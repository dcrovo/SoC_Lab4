
nios_led2.elf:     file format elf32-littlenios2
nios_led2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005d80 memsz 0x00005d80 flags r-x
    LOAD off    0x00006da0 vaddr 0x00025da0 paddr 0x00027810 align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x00000280 vaddr 0x00029280 paddr 0x00029280 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005b10  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000006c  00025d34  00025d34  00006d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  00025da0  00027810  00006da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00029280  00029280  00009280  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000293dc  000293dc  00008810  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008810  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  00008840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00017e70  00000000  00000000  00009290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000071fd  00000000  00000000  00021100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000061e3  00000000  00000000  000282fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000016c4  00000000  00000000  0002e4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001ba2  00000000  00000000  0002fba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00031748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00031758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000015cb  00000000  00000000  000317c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000402b  00000000  00000000  00032d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005ae  00000000  00000000  00036dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00039aee  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  00039af1  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00039af4  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00039af5  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00039af6  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00039afa  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00039afe  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  00039b02  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  00039b0b  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  00039b14  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000009  00000000  00000000  00039b1d  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000004e  00000000  00000000  00039b26  2**0
                  CONTENTS, READONLY
 31 .jdi          0000490b  00000000  00000000  00039b74  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     0005aacf  00000000  00000000  0003e47f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
00025d34 l    d  .rodata	00000000 .rodata
00025da0 l    d  .rwdata	00000000 .rwdata
00029280 l    d  .bss	00000000 .bss
000293dc l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gpio.c
00025d34 l     O .rodata	00000010 SSEG_HEX_TABLE.0
00000000 l    df *ABS*	00000000 main.c
00029280 l     O .bss	00000004 current.1
000277d4 l     O .rwdata	00000001 led_pattern.0
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020c94 l     F .text	00000008 __fp_lock
00020ca8 l     F .text	00000008 __fp_unlock
00020cb0 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00025da0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00023640 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023758 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023784 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002387c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023968 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023a54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023c34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027800 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00023ea0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023fe0 l     F .text	00000034 alt_dev_reg
00026774 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000242d8 l     F .text	0000020c altera_avalon_jtag_uart_irq
000244e4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00024b28 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024da8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002520c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002535c l     F .text	0000003c alt_get_errno
00025398 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000292b0 g     O .bss	00000004 alt_instruction_exception_handler
000235c0 g     F .text	00000058 _isatty_r
00023b70 g     F .text	0000007c alt_main
00020b20 g     F .text	000000cc _puts_r
000292dc g     O .bss	00000100 alt_irq
00023258 g     F .text	00000064 _lseek_r
00027810 g       *ABS*	00000000 __flash_rwdata_start
000293dc g       *ABS*	00000000 __alt_heap_start
000227a8 g     F .text	0000005c __sseek
00020fe0 g     F .text	00000010 __sinit
00020e18 g     F .text	00000078 __sfmoreglue
00023c10 g     F .text	00000024 __malloc_unlock
00021ee4 g     F .text	0000012c memmove
00020fcc g     F .text	00000014 _cleanup
000207d4 g     F .text	00000098 led_flash_v1
000257a4 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00023560 g     F .text	00000060 _fstat_r
00029290 g     O .bss	00000004 errno
00022720 g     F .text	00000008 __seofread
00029298 g     O .bss	00000004 alt_argv
0002f7d4 g       *ABS*	00000000 _gp
000205ec g     F .text	000000f0 jtaguart_disp_msg_v1
000265f4 g     O .rwdata	00000180 alt_fd_list
000257c8 g     F .text	00000090 alt_find_dev
00020a20 g     F .text	00000100 memcpy
00020c9c g     F .text	0000000c _cleanup_r
000252e0 g     F .text	0000007c alt_io_redirect
00025d34 g       *ABS*	00000000 __DTOR_END__
00020bec g     F .text	00000010 puts
00025a18 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000246e0 g     F .text	00000220 altera_avalon_jtag_uart_read
00020960 g     F .text	00000064 .hidden __udivsi3
000238b8 g     F .text	000000b0 isatty
0002928c g     O .bss	00000004 __malloc_top_pad
00021028 g     F .text	000004cc __sfvwrite_r
00022674 g     F .text	00000058 _sbrk_r
000234fc g     F .text	00000064 _read_r
000277f8 g     O .rwdata	00000004 alt_max_fd
00022a2c g     F .text	000000f8 _fclose_r
00022dbc g     F .text	00000084 fflush
00029288 g     O .bss	00000004 __malloc_max_sbrked_mem
00023a90 g     F .text	000000e0 lseek
000277d8 g     O .rwdata	00000004 _global_impure_ptr
00022104 g     F .text	00000570 _realloc_r
000293dc g       *ABS*	00000000 __bss_end
00025124 g     F .text	000000e8 alt_iic_isr_register
00025678 g     F .text	0000012c alt_tick
00021000 g     F .text	00000014 __fp_lock_all
000250d8 g     F .text	0000004c alt_ic_irq_enabled
000255d4 g     F .text	000000a4 alt_alarm_stop
000292a0 g     O .bss	00000004 alt_irq_active
00020000 g       *ABS*	00000000 __alt_mem_onchip_mem
000200fc g     F .exceptions	000000c8 alt_irq_handler
000265cc g     O .rwdata	00000028 alt_dev_null
00024d88 g     F .text	00000020 alt_dcache_flush_all
00027810 g       *ABS*	00000000 __ram_rwdata_end
000277f0 g     O .rwdata	00000008 alt_dev_list
00023edc g     F .text	00000104 write
0002032c g     F .text	00000094 jtaguart_wr_str
00025da0 g       *ABS*	00000000 __ram_rodata_end
000237c0 g     F .text	000000bc fstat
000209c4 g     F .text	0000005c .hidden __umodsi3
000293dc g       *ABS*	00000000 end
00024218 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00025d34 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00024ba4 g     F .text	00000084 alt_avalon_timer_sc_init
00024900 g     F .text	00000228 altera_avalon_jtag_uart_write
00020ff0 g     F .text	00000004 __sfp_lock_acquire
00021e18 g     F .text	000000cc memchr
00022f5c g     F .text	000002fc _free_r
00025bdc g     F .text	00000120 __call_exitprocs
000277e0 g     O .rwdata	00000004 __malloc_sbrk_base
00020224 g     F .text	0000003c _start
000292a4 g     O .bss	00000004 _alt_tick_rate
000292a8 g     O .bss	00000008 _alt_nticks
00023c70 g     F .text	00000108 read
00024050 g     F .text	00000064 alt_sys_init
00025b4c g     F .text	00000090 __register_exitproc
00024584 g     F .text	00000068 altera_avalon_jtag_uart_close
00023618 g     F .text	00000028 .hidden __mulsi3
00025da0 g       *ABS*	00000000 __ram_rwdata_start
00025d34 g       *ABS*	00000000 __ram_rodata_start
000292b4 g     O .bss	00000028 __malloc_current_mallinfo
000240b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025960 g     F .text	000000b8 alt_get_fd
000229d4 g     F .text	00000058 _close_r
00025ad4 g     F .text	00000078 memcmp
00024174 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000293dc g       *ABS*	00000000 __alt_stack_base
000241c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022870 g     F .text	00000164 __swsetup_r
00020e90 g     F .text	0000013c __sfp
000261c4 g     O .rwdata	00000408 __malloc_av_
00020ffc g     F .text	00000004 __sinit_lock_release
000226cc g     F .text	00000054 __sread
00025858 g     F .text	00000108 alt_find_file
00024de4 g     F .text	000000a8 alt_dev_llist_insert
00023bec g     F .text	00000024 __malloc_lock
00023de8 g     F .text	000000b8 sbrk
00022d5c g     F .text	00000060 _fflush_r
000204cc g     F .text	00000050 flashsys_init_v1
00029280 g       *ABS*	00000000 __bss_start
00022010 g     F .text	000000f4 memset
00020438 g     F .text	00000094 main
0002929c g     O .bss	00000004 alt_envp
00029284 g     O .bss	00000004 __malloc_max_total_mem
00024114 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002051c g     F .text	000000d0 sw_get_command_v1
00022804 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00022b24 g     F .text	00000010 fclose
00021634 g     F .text	000007e4 _malloc_r
000277fc g     O .rwdata	00000004 alt_errno
000214f4 g     F .text	00000098 _fwalk
0002086c g     F .text	00000080 .hidden __divsi3
00022e40 g     F .text	0000011c _malloc_trim_r
00025d34 g       *ABS*	00000000 __CTOR_END__
00025d34 g       *ABS*	00000000 __flash_rodata_start
00025d34 g       *ABS*	00000000 __DTOR_LIST__
00024014 g     F .text	0000003c alt_irq_init
00023d78 g     F .text	00000070 alt_release_fd
00025a8c g     F .text	00000014 atexit
0002280c g     F .text	00000064 _write_r
000206dc g     F .text	000000f8 sseg_disp_msg_v1
000277dc g     O .rwdata	00000004 _impure_ptr
00029294 g     O .bss	00000004 alt_argc
00022b34 g     F .text	00000228 __sflush_r
00024ef0 g     F .text	00000064 _do_dtors
00020260 g     F .text	00000050 sseg_conv_hex
00020020 g       .exceptions	00000000 alt_irq_entry
00021014 g     F .text	00000014 __fp_unlock_all
000277e8 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002346c g     F .text	00000090 __swhatbuf_r
000202b0 g     F .text	0000007c sseg_disp_ptn
00024f74 g     F .text	00000050 alt_ic_isr_register
00027810 g       *ABS*	00000000 _edata
000293dc g       *ABS*	00000000 _end
00020224 g       *ABS*	00000000 __ram_exceptions_end
000245ec g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000203c0 g     F .text	00000078 timer_wr_prd
0002504c g     F .text	0000008c alt_ic_irq_disable
00022728 g     F .text	00000080 __swrite
000277e4 g     O .rwdata	00000004 __malloc_trim_threshold
00025aa0 g     F .text	00000034 exit
0002158c g     F .text	000000a8 _fwalk_reent
000208ec g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020ff4 g     F .text	00000004 __sfp_lock_release
00025cfc g     F .text	00000038 _exit
00024c28 g     F .text	00000160 alt_alarm_start
000232bc g     F .text	000001b0 __smakebuf_r
00020bfc g     F .text	00000098 strlen
00025474 g     F .text	00000160 open
00024f54 g     F .text	00000020 alt_icache_flush_all
00027804 g     O .rwdata	00000004 alt_priority_mask
00024fc4 g     F .text	00000088 alt_ic_irq_enable
00027808 g     O .rwdata	00000008 alt_alarm_list
00024e8c g     F .text	00000064 _do_ctors
0002367c g     F .text	000000dc close
000239d0 g     F .text	00000084 alt_load
00020ff8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
   20094:	e93fff04 	addi	r4,ea,-4
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>
   200a0:	ebffff04 	addi	r15,ea,-4
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000f4 	movhi	r2,3
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10e4b717 	ldw	r3,-27940(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000f4 	movhi	r2,3
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10a4b817 	ldw	r2,-27936(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a6b717 	ldw	r2,-25892(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a6b717 	ldw	r2,-25892(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2022c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20230:	d6bdf514 	ori	gp,gp,63444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20238:	10a4a014 	ori	r2,r2,37504

    movhi r3, %hi(__bss_end)
   2023c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20240:	18e4f714 	ori	r3,r3,37852

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	00239d00 	call	239d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	0023b700 	call	23b70 <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <sseg_conv_hex>:
/**
 * Function: sseg_conv_hex
 * Purpose:convert a hex digit to a 7-segment pattern
 **/

alt_u8 sseg_conv_hex(int hex){
   20260:	defffd04 	addi	sp,sp,-12
   20264:	df000215 	stw	fp,8(sp)
   20268:	df000204 	addi	fp,sp,8
   2026c:	e13ffe15 	stw	r4,-8(fp)
	// active-low hex digit 7-seg patterns(0-9, a-f); MSB ignored
	static const alt_u8 SSEG_HEX_TABLE [16] = {
			0x40, 0x79, 0x24, 0x30, 0x19, 0x92, 0x02, 0x78, 0x00, 0x10, //0-9
			0x88, 0x03, 0x46, 0x21, 0x06, 0x0E};
	alt_u8 ptn;
	if(hex < 16){
   20270:	e0bffe17 	ldw	r2,-8(fp)
   20274:	10800408 	cmpgei	r2,r2,16
   20278:	1000061e 	bne	r2,zero,20294 <sseg_conv_hex+0x34>
		ptn = SSEG_HEX_TABLE[hex];
   2027c:	e0fffe17 	ldw	r3,-8(fp)
   20280:	008000b4 	movhi	r2,2
   20284:	1885883a 	add	r2,r3,r2
   20288:	10974d03 	ldbu	r2,23860(r2)
   2028c:	e0bfffc5 	stb	r2,-1(fp)
   20290:	00000206 	br	2029c <sseg_conv_hex+0x3c>
	} else{
		ptn = 0xFF; //blank
   20294:	00bfffc4 	movi	r2,-1
   20298:	e0bfffc5 	stb	r2,-1(fp)
	}

	return ptn;
   2029c:	e0bfffc3 	ldbu	r2,-1(fp)
}
   202a0:	e037883a 	mov	sp,fp
   202a4:	df000017 	ldw	fp,0(sp)
   202a8:	dec00104 	addi	sp,sp,4
   202ac:	f800283a 	ret

000202b0 <sseg_disp_ptn>:
/**
 * Function: sseg_disp_ptn
 * Purpose: display pattern in four 7-seg displays
 **/

void sseg_disp_ptn(alt_u32 base, alt_u8 *ptn){
   202b0:	defffb04 	addi	sp,sp,-20
   202b4:	df000415 	stw	fp,16(sp)
   202b8:	df000404 	addi	fp,sp,16
   202bc:	e13ffd15 	stw	r4,-12(fp)
   202c0:	e17ffc15 	stw	r5,-16(fp)
	alt_u32 sseg_data;
	int i;
	// form a 32 bit data

	for (i=0; i<4; i++){
   202c4:	e03ffe15 	stw	zero,-8(fp)
   202c8:	00000d06 	br	20300 <sseg_disp_ptn+0x50>
		sseg_data = (sseg_data << 8 ) | *ptn;
   202cc:	e0bfff17 	ldw	r2,-4(fp)
   202d0:	1006923a 	slli	r3,r2,8
   202d4:	e0bffc17 	ldw	r2,-16(fp)
   202d8:	10800003 	ldbu	r2,0(r2)
   202dc:	10803fcc 	andi	r2,r2,255
   202e0:	1884b03a 	or	r2,r3,r2
   202e4:	e0bfff15 	stw	r2,-4(fp)
		ptn++;
   202e8:	e0bffc17 	ldw	r2,-16(fp)
   202ec:	10800044 	addi	r2,r2,1
   202f0:	e0bffc15 	stw	r2,-16(fp)
	for (i=0; i<4; i++){
   202f4:	e0bffe17 	ldw	r2,-8(fp)
   202f8:	10800044 	addi	r2,r2,1
   202fc:	e0bffe15 	stw	r2,-8(fp)
   20300:	e0bffe17 	ldw	r2,-8(fp)
   20304:	10800110 	cmplti	r2,r2,4
   20308:	103ff01e 	bne	r2,zero,202cc <sseg_disp_ptn+0x1c>
	}
	pio_write(base, sseg_data);
   2030c:	e0bffd17 	ldw	r2,-12(fp)
   20310:	e0ffff17 	ldw	r3,-4(fp)
   20314:	10c00035 	stwio	r3,0(r2)
}
   20318:	0001883a 	nop
   2031c:	e037883a 	mov	sp,fp
   20320:	df000017 	ldw	fp,0(sp)
   20324:	dec00104 	addi	sp,sp,4
   20328:	f800283a 	ret

0002032c <jtaguart_wr_str>:


void jtaguart_wr_str(alt_u32 jtag_base, char* msg){
   2032c:	defffc04 	addi	sp,sp,-16
   20330:	df000315 	stw	fp,12(sp)
   20334:	df000304 	addi	fp,sp,12
   20338:	e13ffe15 	stw	r4,-8(fp)
   2033c:	e17ffd15 	stw	r5,-12(fp)
	alt_u32 data32;
	while(*msg){
   20340:	00001306 	br	20390 <jtaguart_wr_str+0x64>
		data32 = (alt_u32) *msg;
   20344:	e0bffd17 	ldw	r2,-12(fp)
   20348:	10800003 	ldbu	r2,0(r2)
   2034c:	10803fcc 	andi	r2,r2,255
   20350:	1080201c 	xori	r2,r2,128
   20354:	10bfe004 	addi	r2,r2,-128
   20358:	e0bfff15 	stw	r2,-4(fp)
		if(jtaguart_rd_wspace(jtag_base) != 0){
   2035c:	e0bffe17 	ldw	r2,-8(fp)
   20360:	10800104 	addi	r2,r2,4
   20364:	10800037 	ldwio	r2,0(r2)
   20368:	1004d43a 	srli	r2,r2,16
   2036c:	10bfffcc 	andi	r2,r2,65535
   20370:	10000726 	beq	r2,zero,20390 <jtaguart_wr_str+0x64>
			jtaguart_wr_ch(jtag_base, data32);
   20374:	e0bffe17 	ldw	r2,-8(fp)
   20378:	e0ffff17 	ldw	r3,-4(fp)
   2037c:	18c03fcc 	andi	r3,r3,255
   20380:	10c00035 	stwio	r3,0(r2)
			msg++;
   20384:	e0bffd17 	ldw	r2,-12(fp)
   20388:	10800044 	addi	r2,r2,1
   2038c:	e0bffd15 	stw	r2,-12(fp)
	while(*msg){
   20390:	e0bffd17 	ldw	r2,-12(fp)
   20394:	10800003 	ldbu	r2,0(r2)
   20398:	10803fcc 	andi	r2,r2,255
   2039c:	1080201c 	xori	r2,r2,128
   203a0:	10bfe004 	addi	r2,r2,-128
   203a4:	103fe71e 	bne	r2,zero,20344 <jtaguart_wr_str+0x18>
		}
	}
}
   203a8:	0001883a 	nop
   203ac:	0001883a 	nop
   203b0:	e037883a 	mov	sp,fp
   203b4:	df000017 	ldw	fp,0(sp)
   203b8:	dec00104 	addi	sp,sp,4
   203bc:	f800283a 	ret

000203c0 <timer_wr_prd>:

void timer_wr_prd(alt_u32 timer_base, alt_u32 prd){
   203c0:	defffc04 	addi	sp,sp,-16
   203c4:	df000315 	stw	fp,12(sp)
   203c8:	df000304 	addi	fp,sp,12
   203cc:	e13ffe15 	stw	r4,-8(fp)
   203d0:	e17ffd15 	stw	r5,-12(fp)
	alt_u16 high, low;
	// unpack 32-bit timeout period into two 16-bit half words
	high = (alt_u16)(prd>>16);
   203d4:	e0bffd17 	ldw	r2,-12(fp)
   203d8:	1004d43a 	srli	r2,r2,16
   203dc:	e0bfff8d 	sth	r2,-2(fp)
	low = (alt_16)(prd & 0x0000ffff);
   203e0:	e0bffd17 	ldw	r2,-12(fp)
   203e4:	e0bfff0d 	sth	r2,-4(fp)
	//write timeout period
	IOWR(timer_base, TIMER_PRDH_REG_OFT, high);
   203e8:	e0bffe17 	ldw	r2,-8(fp)
   203ec:	10800304 	addi	r2,r2,12
   203f0:	1007883a 	mov	r3,r2
   203f4:	e0bfff8b 	ldhu	r2,-2(fp)
   203f8:	18800035 	stwio	r2,0(r3)
	IOWR(timer_base, TIMER_PRDL_REG_OFT, low);
   203fc:	e0bffe17 	ldw	r2,-8(fp)
   20400:	10800204 	addi	r2,r2,8
   20404:	1007883a 	mov	r3,r2
   20408:	e0bfff0b 	ldhu	r2,-4(fp)
   2040c:	18800035 	stwio	r2,0(r3)
	//configure timer to start continous mode, enabling interrupt
	IOWR(timer_base, TIMER_CTRL_REG_OFT, 0x0007);
   20410:	e0bffe17 	ldw	r2,-8(fp)
   20414:	10800104 	addi	r2,r2,4
   20418:	1007883a 	mov	r3,r2
   2041c:	008001c4 	movi	r2,7
   20420:	18800035 	stwio	r2,0(r3)
}
   20424:	0001883a 	nop
   20428:	e037883a 	mov	sp,fp
   2042c:	df000017 	ldw	fp,0(sp)
   20430:	dec00104 	addi	sp,sp,4
   20434:	f800283a 	ret

00020438 <main>:
	int pause;
	int prd;
} cmd_type;

int main()
{
   20438:	defffc04 	addi	sp,sp,-16
   2043c:	dfc00315 	stw	ra,12(sp)
   20440:	df000215 	stw	fp,8(sp)
   20444:	df000204 	addi	fp,sp,8

	cmd_type sw_cmd={0,100}; //initial value: not pause, 100 ms interval
   20448:	e03ffe15 	stw	zero,-8(fp)
   2044c:	00801904 	movi	r2,100
   20450:	e0bfff15 	stw	r2,-4(fp)
	flashsys_init_v1(BTN_BASE, USR_TIMER_BASE);
   20454:	01400134 	movhi	r5,4
   20458:	29441004 	addi	r5,r5,4160
   2045c:	01000134 	movhi	r4,4
   20460:	21043004 	addi	r4,r4,4288
   20464:	00204cc0 	call	204cc <flashsys_init_v1>


	while(1){
		sw_get_command_v1(BTN_BASE, SWITCH_BASE, &sw_cmd);
   20468:	e0bffe04 	addi	r2,fp,-8
   2046c:	100d883a 	mov	r6,r2
   20470:	01400134 	movhi	r5,4
   20474:	29443404 	addi	r5,r5,4304
   20478:	01000134 	movhi	r4,4
   2047c:	21043004 	addi	r4,r4,4288
   20480:	002051c0 	call	2051c <sw_get_command_v1>
		jtaguart_disp_msg_v1(JTAG_UART_BASE, sw_cmd);
   20484:	e17ffe17 	ldw	r5,-8(fp)
   20488:	e1bfff17 	ldw	r6,-4(fp)
   2048c:	01000134 	movhi	r4,4
   20490:	21044604 	addi	r4,r4,4376
   20494:	00205ec0 	call	205ec <jtaguart_disp_msg_v1>
		sseg_disp_msg_v1(SSEG_BASE, sw_cmd);
   20498:	e17ffe17 	ldw	r5,-8(fp)
   2049c:	e1bfff17 	ldw	r6,-4(fp)
   204a0:	01000134 	movhi	r4,4
   204a4:	21043804 	addi	r4,r4,4320
   204a8:	00206dc0 	call	206dc <sseg_disp_msg_v1>
		led_flash_v1(LEDR_BASE, USR_TIMER_BASE, sw_cmd);
   204ac:	e1bffe17 	ldw	r6,-8(fp)
   204b0:	e1ffff17 	ldw	r7,-4(fp)
   204b4:	01400134 	movhi	r5,4
   204b8:	29441004 	addi	r5,r5,4160
   204bc:	01000134 	movhi	r4,4
   204c0:	21043c04 	addi	r4,r4,4336
   204c4:	00207d40 	call	207d4 <led_flash_v1>
	while(1){
   204c8:	003fe706 	br	20468 <main+0x30>

000204cc <flashsys_init_v1>:
	}
  return 0;
}


void flashsys_init_v1(alt_u32 btn_base, alt_u32 timer_base){
   204cc:	defffc04 	addi	sp,sp,-16
   204d0:	dfc00315 	stw	ra,12(sp)
   204d4:	df000215 	stw	fp,8(sp)
   204d8:	df000204 	addi	fp,sp,8
   204dc:	e13fff15 	stw	r4,-4(fp)
   204e0:	e17ffe15 	stw	r5,-8(fp)
	btn_clear(btn_base); // clear button edge-capture reg
   204e4:	e0bfff17 	ldw	r2,-4(fp)
   204e8:	10800304 	addi	r2,r2,12
   204ec:	1007883a 	mov	r3,r2
   204f0:	008003c4 	movi	r2,15
   204f4:	18800035 	stwio	r2,0(r3)
	timer_wr_prd(timer_base, 50000); // set 1-ms timeout period
   204f8:	0170d414 	movui	r5,50000
   204fc:	e13ffe17 	ldw	r4,-8(fp)
   20500:	00203c00 	call	203c0 <timer_wr_prd>
}
   20504:	0001883a 	nop
   20508:	e037883a 	mov	sp,fp
   2050c:	dfc00117 	ldw	ra,4(sp)
   20510:	df000017 	ldw	fp,0(sp)
   20514:	dec00204 	addi	sp,sp,8
   20518:	f800283a 	ret

0002051c <sw_get_command_v1>:

void sw_get_command_v1(alt_u32 btn_base, alt_32 sw_base, cmd_type *cmd){
   2051c:	defffa04 	addi	sp,sp,-24
   20520:	dfc00515 	stw	ra,20(sp)
   20524:	df000415 	stw	fp,16(sp)
   20528:	df000404 	addi	fp,sp,16
   2052c:	e13ffe15 	stw	r4,-8(fp)
   20530:	e17ffd15 	stw	r5,-12(fp)
   20534:	e1bffc15 	stw	r6,-16(fp)
	alt_u8 btn;
	btn = (alt_u8) btn_read(btn_base) & 0xF; //read 4 pushbuttons
   20538:	e0bffe17 	ldw	r2,-8(fp)
   2053c:	10800304 	addi	r2,r2,12
   20540:	10800037 	ldwio	r2,0(r2)
   20544:	108003cc 	andi	r2,r2,15
   20548:	e0bfffc5 	stb	r2,-1(fp)
	if(btn != 0){ // button pressed
   2054c:	e0bfffc3 	ldbu	r2,-1(fp)
   20550:	10002026 	beq	r2,zero,205d4 <sw_get_command_v1+0xb8>
		if(btn & 0x01){ // btn 0 pressed
   20554:	e0bfffc3 	ldbu	r2,-1(fp)
   20558:	1080004c 	andi	r2,r2,1
   2055c:	10000d26 	beq	r2,zero,20594 <sw_get_command_v1+0x78>
			cmd->pause = cmd->pause ^ 1; // toogle pause bit
   20560:	e0bffc17 	ldw	r2,-16(fp)
   20564:	10800017 	ldw	r2,0(r2)
   20568:	10c0005c 	xori	r3,r2,1
   2056c:	e0bffc17 	ldw	r2,-16(fp)
   20570:	10c00015 	stw	r3,0(r2)
			printf("%s", "0 preessed\n");
   20574:	010000b4 	movhi	r4,2
   20578:	21175104 	addi	r4,r4,23876
   2057c:	0020bec0 	call	20bec <puts>
			btn_clear(btn_base); //clear edge-capture reg
   20580:	e0bffe17 	ldw	r2,-8(fp)
   20584:	10800304 	addi	r2,r2,12
   20588:	1007883a 	mov	r3,r2
   2058c:	008003c4 	movi	r2,15
   20590:	18800035 	stwio	r2,0(r3)

		}
		if (btn & 0x02){ //btn 1 pressed
   20594:	e0bfffc3 	ldbu	r2,-1(fp)
   20598:	1080008c 	andi	r2,r2,2
   2059c:	10000d26 	beq	r2,zero,205d4 <sw_get_command_v1+0xb8>
			cmd->prd = pio_read(sw_base) & 0x03FF; // load new interval
   205a0:	e0bffd17 	ldw	r2,-12(fp)
   205a4:	10800037 	ldwio	r2,0(r2)
   205a8:	10c0ffcc 	andi	r3,r2,1023
   205ac:	e0bffc17 	ldw	r2,-16(fp)
   205b0:	10c00115 	stw	r3,4(r2)
			btn_clear(btn_base); //clear edge-capture reg
   205b4:	e0bffe17 	ldw	r2,-8(fp)
   205b8:	10800304 	addi	r2,r2,12
   205bc:	1007883a 	mov	r3,r2
   205c0:	008003c4 	movi	r2,15
   205c4:	18800035 	stwio	r2,0(r3)
			printf("%s", "1 preessed\n");
   205c8:	010000b4 	movhi	r4,2
   205cc:	21175404 	addi	r4,r4,23888
   205d0:	0020bec0 	call	20bec <puts>

		}
	}
}
   205d4:	0001883a 	nop
   205d8:	e037883a 	mov	sp,fp
   205dc:	dfc00117 	ldw	ra,4(sp)
   205e0:	df000017 	ldw	fp,0(sp)
   205e4:	dec00204 	addi	sp,sp,8
   205e8:	f800283a 	ret

000205ec <jtaguart_disp_msg_v1>:

void jtaguart_disp_msg_v1(alt_u32 jtag_base, cmd_type cmd){
   205ec:	defff604 	addi	sp,sp,-40
   205f0:	dfc00915 	stw	ra,36(sp)
   205f4:	df000815 	stw	fp,32(sp)
   205f8:	df000804 	addi	fp,sp,32
   205fc:	e13ffa15 	stw	r4,-24(fp)
   20600:	e17ff815 	stw	r5,-32(fp)
   20604:	e1bff915 	stw	r6,-28(fp)
	static int current = 0 ; //current interval
	char msg[] = "Interval: 0000 ms\n";
   20608:	e0fffb44 	addi	r3,fp,-19
   2060c:	008000b4 	movhi	r2,2
   20610:	10975704 	addi	r2,r2,23900
   20614:	010004c4 	movi	r4,19
   20618:	200d883a 	mov	r6,r4
   2061c:	100b883a 	mov	r5,r2
   20620:	1809883a 	mov	r4,r3
   20624:	0020a200 	call	20a20 <memcpy>

	if(cmd.prd != current){//new interval detected
   20628:	e0fff917 	ldw	r3,-28(fp)
   2062c:	d0a6ab17 	ldw	r2,-25940(gp)
   20630:	18802426 	beq	r3,r2,206c4 <jtaguart_disp_msg_v1+0xd8>
		msg[13] = cmd.prd%10 + '0'; //ascii code for 0 digit
   20634:	e0bff917 	ldw	r2,-28(fp)
   20638:	01400284 	movi	r5,10
   2063c:	1009883a 	mov	r4,r2
   20640:	00208ec0 	call	208ec <__modsi3>
   20644:	10800c04 	addi	r2,r2,48
   20648:	e0bffe85 	stb	r2,-6(fp)
		msg[12] = (cmd.prd/10)%10 +'0'; //ascii code for 10 digit
   2064c:	e0bff917 	ldw	r2,-28(fp)
   20650:	01400284 	movi	r5,10
   20654:	1009883a 	mov	r4,r2
   20658:	002086c0 	call	2086c <__divsi3>
   2065c:	01400284 	movi	r5,10
   20660:	1009883a 	mov	r4,r2
   20664:	00208ec0 	call	208ec <__modsi3>
   20668:	10800c04 	addi	r2,r2,48
   2066c:	e0bffe45 	stb	r2,-7(fp)
		msg[11] = (cmd.prd/100)%10 +'0'; //ascii code for 100 digit
   20670:	e0bff917 	ldw	r2,-28(fp)
   20674:	01401904 	movi	r5,100
   20678:	1009883a 	mov	r4,r2
   2067c:	002086c0 	call	2086c <__divsi3>
   20680:	01400284 	movi	r5,10
   20684:	1009883a 	mov	r4,r2
   20688:	00208ec0 	call	208ec <__modsi3>
   2068c:	10800c04 	addi	r2,r2,48
   20690:	e0bffe05 	stb	r2,-8(fp)
		msg[10] = cmd.prd/1000 + '0'; //ascii code for 1000 digit
   20694:	e0bff917 	ldw	r2,-28(fp)
   20698:	0140fa04 	movi	r5,1000
   2069c:	1009883a 	mov	r4,r2
   206a0:	002086c0 	call	2086c <__divsi3>
   206a4:	10800c04 	addi	r2,r2,48
   206a8:	e0bffdc5 	stb	r2,-9(fp)
		jtaguart_wr_str(jtag_base, msg); //send string to console
   206ac:	e0bffb44 	addi	r2,fp,-19
   206b0:	100b883a 	mov	r5,r2
   206b4:	e13ffa17 	ldw	r4,-24(fp)
   206b8:	002032c0 	call	2032c <jtaguart_wr_str>
		current = cmd.prd; //update current interval
   206bc:	e0bff917 	ldw	r2,-28(fp)
   206c0:	d0a6ab15 	stw	r2,-25940(gp)

	}
}
   206c4:	0001883a 	nop
   206c8:	e037883a 	mov	sp,fp
   206cc:	dfc00117 	ldw	ra,4(sp)
   206d0:	df000017 	ldw	fp,0(sp)
   206d4:	dec00204 	addi	sp,sp,8
   206d8:	f800283a 	ret

000206dc <sseg_disp_msg_v1>:

void sseg_disp_msg_v1(alt_u32 sseg_base, cmd_type cmd){
   206dc:	defff804 	addi	sp,sp,-32
   206e0:	dfc00715 	stw	ra,28(sp)
   206e4:	df000615 	stw	fp,24(sp)
   206e8:	df000604 	addi	fp,sp,24
   206ec:	e13ffc15 	stw	r4,-16(fp)
   206f0:	e17ffa15 	stw	r5,-24(fp)
   206f4:	e1bffb15 	stw	r6,-20(fp)
	int pd;
	alt_u8 hex, msg[4];
	if(cmd.prd > 999){ //999 is max # to be displayed
   206f8:	e0bffb17 	ldw	r2,-20(fp)
   206fc:	1080fa10 	cmplti	r2,r2,1000
   20700:	1000031e 	bne	r2,zero,20710 <sseg_disp_msg_v1+0x34>
		pd = 999;
   20704:	0080f9c4 	movi	r2,999
   20708:	e0bfff15 	stw	r2,-4(fp)
   2070c:	00000206 	br	20718 <sseg_disp_msg_v1+0x3c>
	}else{
		pd = cmd.prd;
   20710:	e0bffb17 	ldw	r2,-20(fp)
   20714:	e0bfff15 	stw	r2,-4(fp)
	}
	hex = pd%10; // units digit
   20718:	e0bfff17 	ldw	r2,-4(fp)
   2071c:	01400284 	movi	r5,10
   20720:	1009883a 	mov	r4,r2
   20724:	00208ec0 	call	208ec <__modsi3>
   20728:	e0bffec5 	stb	r2,-5(fp)
	msg[3] = sseg_conv_hex(hex);
   2072c:	e0bffec3 	ldbu	r2,-5(fp)
   20730:	1009883a 	mov	r4,r2
   20734:	00202600 	call	20260 <sseg_conv_hex>
   20738:	e0bffe85 	stb	r2,-6(fp)
	hex = (pd/10)%10; //tens digit
   2073c:	e0bfff17 	ldw	r2,-4(fp)
   20740:	01400284 	movi	r5,10
   20744:	1009883a 	mov	r4,r2
   20748:	002086c0 	call	2086c <__divsi3>
   2074c:	01400284 	movi	r5,10
   20750:	1009883a 	mov	r4,r2
   20754:	00208ec0 	call	208ec <__modsi3>
   20758:	e0bffec5 	stb	r2,-5(fp)
	msg[2] = sseg_conv_hex(hex);
   2075c:	e0bffec3 	ldbu	r2,-5(fp)
   20760:	1009883a 	mov	r4,r2
   20764:	00202600 	call	20260 <sseg_conv_hex>
   20768:	e0bffe45 	stb	r2,-7(fp)
	hex = pd/100;//100 digit
   2076c:	e0bfff17 	ldw	r2,-4(fp)
   20770:	01401904 	movi	r5,100
   20774:	1009883a 	mov	r4,r2
   20778:	002086c0 	call	2086c <__divsi3>
   2077c:	e0bffec5 	stb	r2,-5(fp)
	msg[1] = sseg_conv_hex(hex);
   20780:	e0bffec3 	ldbu	r2,-5(fp)
   20784:	1009883a 	mov	r4,r2
   20788:	00202600 	call	20260 <sseg_conv_hex>
   2078c:	e0bffe05 	stb	r2,-8(fp)
	// specify pattern for the most significant digit
	if(cmd.pause){
   20790:	e0bffa17 	ldw	r2,-24(fp)
   20794:	10000326 	beq	r2,zero,207a4 <sseg_disp_msg_v1+0xc8>
		msg[0] = 0x0C; // pattern for letter P
   20798:	00800304 	movi	r2,12
   2079c:	e0bffdc5 	stb	r2,-9(fp)
   207a0:	00000206 	br	207ac <sseg_disp_msg_v1+0xd0>
	}else{
		msg[0] = 0xFF; // blank
   207a4:	00bfffc4 	movi	r2,-1
   207a8:	e0bffdc5 	stb	r2,-9(fp)
	}
	sseg_disp_ptn(sseg_base, msg);
   207ac:	e0bffdc4 	addi	r2,fp,-9
   207b0:	100b883a 	mov	r5,r2
   207b4:	e13ffc17 	ldw	r4,-16(fp)
   207b8:	00202b00 	call	202b0 <sseg_disp_ptn>
}
   207bc:	0001883a 	nop
   207c0:	e037883a 	mov	sp,fp
   207c4:	dfc00117 	ldw	ra,4(sp)
   207c8:	df000017 	ldw	fp,0(sp)
   207cc:	dec00204 	addi	sp,sp,8
   207d0:	f800283a 	ret

000207d4 <led_flash_v1>:

void led_flash_v1(alt_u32 led_base, alt_u32 timer_base, cmd_type cmd){
   207d4:	defffa04 	addi	sp,sp,-24
   207d8:	df000515 	stw	fp,20(sp)
   207dc:	df000504 	addi	fp,sp,20
   207e0:	e13ffe15 	stw	r4,-8(fp)
   207e4:	e17ffd15 	stw	r5,-12(fp)
   207e8:	e1bffb15 	stw	r6,-20(fp)
   207ec:	e1fffc15 	stw	r7,-16(fp)

	static alt_u8 led_pattern = 0x01;
	int ntick=0;
   207f0:	e03fff15 	stw	zero,-4(fp)
	if(cmd.pause){ // no toggle if paused asserted
   207f4:	e0bffb17 	ldw	r2,-20(fp)
   207f8:	1000171e 	bne	r2,zero,20858 <led_flash_v1+0x84>
		return;
	}
	led_pattern ^= 0x03; //toggle 2 LSBs of LEDs
   207fc:	d0a00003 	ldbu	r2,-32768(gp)
   20800:	108000dc 	xori	r2,r2,3
   20804:	d0a00005 	stb	r2,-32768(gp)
	pio_write(led_base, led_pattern); // write LEDs
   20808:	e0bffe17 	ldw	r2,-8(fp)
   2080c:	d0e00003 	ldbu	r3,-32768(gp)
   20810:	18c03fcc 	andi	r3,r3,255
   20814:	10c00035 	stwio	r3,0(r2)

	while(ntick < cmd.prd){
   20818:	00000b06 	br	20848 <led_flash_v1+0x74>
		if(timer_read_tick(timer_base) == 1){
   2081c:	e0bffd17 	ldw	r2,-12(fp)
   20820:	10800037 	ldwio	r2,0(r2)
   20824:	1080004c 	andi	r2,r2,1
   20828:	10800058 	cmpnei	r2,r2,1
   2082c:	1000061e 	bne	r2,zero,20848 <led_flash_v1+0x74>
			timer_clear_tick(timer_base);
   20830:	e0bffd17 	ldw	r2,-12(fp)
   20834:	0007883a 	mov	r3,zero
   20838:	10c00035 	stwio	r3,0(r2)
			ntick++;
   2083c:	e0bfff17 	ldw	r2,-4(fp)
   20840:	10800044 	addi	r2,r2,1
   20844:	e0bfff15 	stw	r2,-4(fp)
	while(ntick < cmd.prd){
   20848:	e0bffc17 	ldw	r2,-16(fp)
   2084c:	e0ffff17 	ldw	r3,-4(fp)
   20850:	18bff216 	blt	r3,r2,2081c <led_flash_v1+0x48>
   20854:	00000106 	br	2085c <led_flash_v1+0x88>
		return;
   20858:	0001883a 	nop
		}
	}
}
   2085c:	e037883a 	mov	sp,fp
   20860:	df000017 	ldw	fp,0(sp)
   20864:	dec00104 	addi	sp,sp,4
   20868:	f800283a 	ret

0002086c <__divsi3>:
   2086c:	20001a16 	blt	r4,zero,208d8 <__divsi3+0x6c>
   20870:	000f883a 	mov	r7,zero
   20874:	2800020e 	bge	r5,zero,20880 <__divsi3+0x14>
   20878:	014bc83a 	sub	r5,zero,r5
   2087c:	39c0005c 	xori	r7,r7,1
   20880:	200d883a 	mov	r6,r4
   20884:	00c00044 	movi	r3,1
   20888:	2900092e 	bgeu	r5,r4,208b0 <__divsi3+0x44>
   2088c:	00800804 	movi	r2,32
   20890:	00c00044 	movi	r3,1
   20894:	00000106 	br	2089c <__divsi3+0x30>
   20898:	10001226 	beq	r2,zero,208e4 <__divsi3+0x78>
   2089c:	294b883a 	add	r5,r5,r5
   208a0:	10bfffc4 	addi	r2,r2,-1
   208a4:	18c7883a 	add	r3,r3,r3
   208a8:	293ffb36 	bltu	r5,r4,20898 <__divsi3+0x2c>
   208ac:	18000d26 	beq	r3,zero,208e4 <__divsi3+0x78>
   208b0:	0005883a 	mov	r2,zero
   208b4:	31400236 	bltu	r6,r5,208c0 <__divsi3+0x54>
   208b8:	314dc83a 	sub	r6,r6,r5
   208bc:	10c4b03a 	or	r2,r2,r3
   208c0:	1806d07a 	srli	r3,r3,1
   208c4:	280ad07a 	srli	r5,r5,1
   208c8:	183ffa1e 	bne	r3,zero,208b4 <__divsi3+0x48>
   208cc:	38000126 	beq	r7,zero,208d4 <__divsi3+0x68>
   208d0:	0085c83a 	sub	r2,zero,r2
   208d4:	f800283a 	ret
   208d8:	0109c83a 	sub	r4,zero,r4
   208dc:	01c00044 	movi	r7,1
   208e0:	003fe406 	br	20874 <__divsi3+0x8>
   208e4:	0005883a 	mov	r2,zero
   208e8:	003ff806 	br	208cc <__divsi3+0x60>

000208ec <__modsi3>:
   208ec:	20001916 	blt	r4,zero,20954 <__modsi3+0x68>
   208f0:	000f883a 	mov	r7,zero
   208f4:	2005883a 	mov	r2,r4
   208f8:	2800010e 	bge	r5,zero,20900 <__modsi3+0x14>
   208fc:	014bc83a 	sub	r5,zero,r5
   20900:	00c00044 	movi	r3,1
   20904:	2900092e 	bgeu	r5,r4,2092c <__modsi3+0x40>
   20908:	01800804 	movi	r6,32
   2090c:	00c00044 	movi	r3,1
   20910:	00000106 	br	20918 <__modsi3+0x2c>
   20914:	30000d26 	beq	r6,zero,2094c <__modsi3+0x60>
   20918:	294b883a 	add	r5,r5,r5
   2091c:	31bfffc4 	addi	r6,r6,-1
   20920:	18c7883a 	add	r3,r3,r3
   20924:	293ffb36 	bltu	r5,r4,20914 <__modsi3+0x28>
   20928:	18000826 	beq	r3,zero,2094c <__modsi3+0x60>
   2092c:	1806d07a 	srli	r3,r3,1
   20930:	11400136 	bltu	r2,r5,20938 <__modsi3+0x4c>
   20934:	1145c83a 	sub	r2,r2,r5
   20938:	280ad07a 	srli	r5,r5,1
   2093c:	183ffb1e 	bne	r3,zero,2092c <__modsi3+0x40>
   20940:	38000126 	beq	r7,zero,20948 <__modsi3+0x5c>
   20944:	0085c83a 	sub	r2,zero,r2
   20948:	f800283a 	ret
   2094c:	2005883a 	mov	r2,r4
   20950:	003ffb06 	br	20940 <__modsi3+0x54>
   20954:	0109c83a 	sub	r4,zero,r4
   20958:	01c00044 	movi	r7,1
   2095c:	003fe506 	br	208f4 <__modsi3+0x8>

00020960 <__udivsi3>:
   20960:	200d883a 	mov	r6,r4
   20964:	2900152e 	bgeu	r5,r4,209bc <__udivsi3+0x5c>
   20968:	28001416 	blt	r5,zero,209bc <__udivsi3+0x5c>
   2096c:	00800804 	movi	r2,32
   20970:	00c00044 	movi	r3,1
   20974:	00000206 	br	20980 <__udivsi3+0x20>
   20978:	10000e26 	beq	r2,zero,209b4 <__udivsi3+0x54>
   2097c:	28000516 	blt	r5,zero,20994 <__udivsi3+0x34>
   20980:	294b883a 	add	r5,r5,r5
   20984:	10bfffc4 	addi	r2,r2,-1
   20988:	18c7883a 	add	r3,r3,r3
   2098c:	293ffa36 	bltu	r5,r4,20978 <__udivsi3+0x18>
   20990:	18000826 	beq	r3,zero,209b4 <__udivsi3+0x54>
   20994:	0005883a 	mov	r2,zero
   20998:	31400236 	bltu	r6,r5,209a4 <__udivsi3+0x44>
   2099c:	314dc83a 	sub	r6,r6,r5
   209a0:	10c4b03a 	or	r2,r2,r3
   209a4:	1806d07a 	srli	r3,r3,1
   209a8:	280ad07a 	srli	r5,r5,1
   209ac:	183ffa1e 	bne	r3,zero,20998 <__udivsi3+0x38>
   209b0:	f800283a 	ret
   209b4:	0005883a 	mov	r2,zero
   209b8:	f800283a 	ret
   209bc:	00c00044 	movi	r3,1
   209c0:	003ff406 	br	20994 <__udivsi3+0x34>

000209c4 <__umodsi3>:
   209c4:	2005883a 	mov	r2,r4
   209c8:	2900132e 	bgeu	r5,r4,20a18 <__umodsi3+0x54>
   209cc:	28001216 	blt	r5,zero,20a18 <__umodsi3+0x54>
   209d0:	01800804 	movi	r6,32
   209d4:	00c00044 	movi	r3,1
   209d8:	00000206 	br	209e4 <__umodsi3+0x20>
   209dc:	30000c26 	beq	r6,zero,20a10 <__umodsi3+0x4c>
   209e0:	28000516 	blt	r5,zero,209f8 <__umodsi3+0x34>
   209e4:	294b883a 	add	r5,r5,r5
   209e8:	31bfffc4 	addi	r6,r6,-1
   209ec:	18c7883a 	add	r3,r3,r3
   209f0:	293ffa36 	bltu	r5,r4,209dc <__umodsi3+0x18>
   209f4:	18000626 	beq	r3,zero,20a10 <__umodsi3+0x4c>
   209f8:	1806d07a 	srli	r3,r3,1
   209fc:	11400136 	bltu	r2,r5,20a04 <__umodsi3+0x40>
   20a00:	1145c83a 	sub	r2,r2,r5
   20a04:	280ad07a 	srli	r5,r5,1
   20a08:	183ffb1e 	bne	r3,zero,209f8 <__umodsi3+0x34>
   20a0c:	f800283a 	ret
   20a10:	2005883a 	mov	r2,r4
   20a14:	f800283a 	ret
   20a18:	00c00044 	movi	r3,1
   20a1c:	003ff606 	br	209f8 <__umodsi3+0x34>

00020a20 <memcpy>:
   20a20:	30c00430 	cmpltui	r3,r6,16
   20a24:	2005883a 	mov	r2,r4
   20a28:	18002d1e 	bne	r3,zero,20ae0 <memcpy+0xc0>
   20a2c:	2146b03a 	or	r3,r4,r5
   20a30:	18c000cc 	andi	r3,r3,3
   20a34:	1800351e 	bne	r3,zero,20b0c <memcpy+0xec>
   20a38:	32fffc04 	addi	r11,r6,-16
   20a3c:	5816d13a 	srli	r11,r11,4
   20a40:	280f883a 	mov	r7,r5
   20a44:	2007883a 	mov	r3,r4
   20a48:	5ac00044 	addi	r11,r11,1
   20a4c:	5816913a 	slli	r11,r11,4
   20a50:	22d5883a 	add	r10,r4,r11
   20a54:	39000117 	ldw	r4,4(r7)
   20a58:	3a400017 	ldw	r9,0(r7)
   20a5c:	3a000217 	ldw	r8,8(r7)
   20a60:	19000115 	stw	r4,4(r3)
   20a64:	39000317 	ldw	r4,12(r7)
   20a68:	1a400015 	stw	r9,0(r3)
   20a6c:	1a000215 	stw	r8,8(r3)
   20a70:	19000315 	stw	r4,12(r3)
   20a74:	18c00404 	addi	r3,r3,16
   20a78:	39c00404 	addi	r7,r7,16
   20a7c:	50fff51e 	bne	r10,r3,20a54 <memcpy+0x34>
   20a80:	3100030c 	andi	r4,r6,12
   20a84:	2acb883a 	add	r5,r5,r11
   20a88:	320003cc 	andi	r8,r6,15
   20a8c:	20002226 	beq	r4,zero,20b18 <memcpy+0xf8>
   20a90:	280f883a 	mov	r7,r5
   20a94:	1813883a 	mov	r9,r3
   20a98:	39c00104 	addi	r7,r7,4
   20a9c:	3abfff17 	ldw	r10,-4(r7)
   20aa0:	41c9c83a 	sub	r4,r8,r7
   20aa4:	2909883a 	add	r4,r5,r4
   20aa8:	4a800015 	stw	r10,0(r9)
   20aac:	21000128 	cmpgeui	r4,r4,4
   20ab0:	4a400104 	addi	r9,r9,4
   20ab4:	203ff81e 	bne	r4,zero,20a98 <memcpy+0x78>
   20ab8:	413fff04 	addi	r4,r8,-4
   20abc:	2008d0ba 	srli	r4,r4,2
   20ac0:	318000cc 	andi	r6,r6,3
   20ac4:	31ffffc4 	addi	r7,r6,-1
   20ac8:	21000044 	addi	r4,r4,1
   20acc:	200890ba 	slli	r4,r4,2
   20ad0:	1907883a 	add	r3,r3,r4
   20ad4:	290b883a 	add	r5,r5,r4
   20ad8:	3000041e 	bne	r6,zero,20aec <memcpy+0xcc>
   20adc:	f800283a 	ret
   20ae0:	2007883a 	mov	r3,r4
   20ae4:	31ffffc4 	addi	r7,r6,-1
   20ae8:	303ffc26 	beq	r6,zero,20adc <memcpy+0xbc>
   20aec:	39c00044 	addi	r7,r7,1
   20af0:	19cf883a 	add	r7,r3,r7
   20af4:	29800003 	ldbu	r6,0(r5)
   20af8:	18c00044 	addi	r3,r3,1
   20afc:	29400044 	addi	r5,r5,1
   20b00:	19bfffc5 	stb	r6,-1(r3)
   20b04:	38fffb1e 	bne	r7,r3,20af4 <memcpy+0xd4>
   20b08:	f800283a 	ret
   20b0c:	31ffffc4 	addi	r7,r6,-1
   20b10:	2007883a 	mov	r3,r4
   20b14:	003ff506 	br	20aec <memcpy+0xcc>
   20b18:	400d883a 	mov	r6,r8
   20b1c:	003ff106 	br	20ae4 <memcpy+0xc4>

00020b20 <_puts_r>:
   20b20:	defff504 	addi	sp,sp,-44
   20b24:	dc000815 	stw	r16,32(sp)
   20b28:	2021883a 	mov	r16,r4
   20b2c:	2809883a 	mov	r4,r5
   20b30:	dc400915 	stw	r17,36(sp)
   20b34:	dfc00a15 	stw	ra,40(sp)
   20b38:	2823883a 	mov	r17,r5
   20b3c:	0020bfc0 	call	20bfc <strlen>
   20b40:	11000044 	addi	r4,r2,1
   20b44:	d8800515 	stw	r2,20(sp)
   20b48:	00800044 	movi	r2,1
   20b4c:	00c000b4 	movhi	r3,2
   20b50:	d8800715 	stw	r2,28(sp)
   20b54:	d8800404 	addi	r2,sp,16
   20b58:	18d75c04 	addi	r3,r3,23920
   20b5c:	d8800115 	stw	r2,4(sp)
   20b60:	00800084 	movi	r2,2
   20b64:	dc400415 	stw	r17,16(sp)
   20b68:	d8c00615 	stw	r3,24(sp)
   20b6c:	d9000315 	stw	r4,12(sp)
   20b70:	d8800215 	stw	r2,8(sp)
   20b74:	81400217 	ldw	r5,8(r16)
   20b78:	80000226 	beq	r16,zero,20b84 <_puts_r+0x64>
   20b7c:	80800e17 	ldw	r2,56(r16)
   20b80:	10001326 	beq	r2,zero,20bd0 <_puts_r+0xb0>
   20b84:	2880030b 	ldhu	r2,12(r5)
   20b88:	10c8000c 	andi	r3,r2,8192
   20b8c:	1800061e 	bne	r3,zero,20ba8 <_puts_r+0x88>
   20b90:	28c01917 	ldw	r3,100(r5)
   20b94:	0137ffc4 	movi	r4,-8193
   20b98:	10880014 	ori	r2,r2,8192
   20b9c:	1906703a 	and	r3,r3,r4
   20ba0:	2880030d 	sth	r2,12(r5)
   20ba4:	28c01915 	stw	r3,100(r5)
   20ba8:	d9800104 	addi	r6,sp,4
   20bac:	8009883a 	mov	r4,r16
   20bb0:	00210280 	call	21028 <__sfvwrite_r>
   20bb4:	10000b1e 	bne	r2,zero,20be4 <_puts_r+0xc4>
   20bb8:	00800284 	movi	r2,10
   20bbc:	dfc00a17 	ldw	ra,40(sp)
   20bc0:	dc400917 	ldw	r17,36(sp)
   20bc4:	dc000817 	ldw	r16,32(sp)
   20bc8:	dec00b04 	addi	sp,sp,44
   20bcc:	f800283a 	ret
   20bd0:	8009883a 	mov	r4,r16
   20bd4:	d9400015 	stw	r5,0(sp)
   20bd8:	0020fe00 	call	20fe0 <__sinit>
   20bdc:	d9400017 	ldw	r5,0(sp)
   20be0:	003fe806 	br	20b84 <_puts_r+0x64>
   20be4:	00bfffc4 	movi	r2,-1
   20be8:	003ff406 	br	20bbc <_puts_r+0x9c>

00020bec <puts>:
   20bec:	008000b4 	movhi	r2,2
   20bf0:	200b883a 	mov	r5,r4
   20bf4:	111df717 	ldw	r4,30684(r2)
   20bf8:	0020b201 	jmpi	20b20 <_puts_r>

00020bfc <strlen>:
   20bfc:	208000cc 	andi	r2,r4,3
   20c00:	10000926 	beq	r2,zero,20c28 <strlen+0x2c>
   20c04:	2005883a 	mov	r2,r4
   20c08:	00000306 	br	20c18 <strlen+0x1c>
   20c0c:	10800044 	addi	r2,r2,1
   20c10:	10c000cc 	andi	r3,r2,3
   20c14:	18000526 	beq	r3,zero,20c2c <strlen+0x30>
   20c18:	10c00007 	ldb	r3,0(r2)
   20c1c:	183ffb1e 	bne	r3,zero,20c0c <strlen+0x10>
   20c20:	1105c83a 	sub	r2,r2,r4
   20c24:	f800283a 	ret
   20c28:	2005883a 	mov	r2,r4
   20c2c:	11400017 	ldw	r5,0(r2)
   20c30:	01ffbff4 	movhi	r7,65279
   20c34:	39ffbfc4 	addi	r7,r7,-257
   20c38:	29c7883a 	add	r3,r5,r7
   20c3c:	01a02074 	movhi	r6,32897
   20c40:	014a303a 	nor	r5,zero,r5
   20c44:	1946703a 	and	r3,r3,r5
   20c48:	31a02004 	addi	r6,r6,-32640
   20c4c:	1986703a 	and	r3,r3,r6
   20c50:	1800071e 	bne	r3,zero,20c70 <strlen+0x74>
   20c54:	11400117 	ldw	r5,4(r2)
   20c58:	10800104 	addi	r2,r2,4
   20c5c:	29c7883a 	add	r3,r5,r7
   20c60:	014a303a 	nor	r5,zero,r5
   20c64:	1946703a 	and	r3,r3,r5
   20c68:	1986703a 	and	r3,r3,r6
   20c6c:	183ff926 	beq	r3,zero,20c54 <strlen+0x58>
   20c70:	10c00007 	ldb	r3,0(r2)
   20c74:	183fea26 	beq	r3,zero,20c20 <strlen+0x24>
   20c78:	10c00047 	ldb	r3,1(r2)
   20c7c:	10800044 	addi	r2,r2,1
   20c80:	183fe726 	beq	r3,zero,20c20 <strlen+0x24>
   20c84:	10c00047 	ldb	r3,1(r2)
   20c88:	10800044 	addi	r2,r2,1
   20c8c:	183ffa1e 	bne	r3,zero,20c78 <strlen+0x7c>
   20c90:	003fe306 	br	20c20 <strlen+0x24>

00020c94 <__fp_lock>:
   20c94:	0005883a 	mov	r2,zero
   20c98:	f800283a 	ret

00020c9c <_cleanup_r>:
   20c9c:	014000b4 	movhi	r5,2
   20ca0:	294a8b04 	addi	r5,r5,10796
   20ca4:	002158c1 	jmpi	2158c <_fwalk_reent>

00020ca8 <__fp_unlock>:
   20ca8:	0005883a 	mov	r2,zero
   20cac:	f800283a 	ret

00020cb0 <__sinit.part.0>:
   20cb0:	00c000b4 	movhi	r3,2
   20cb4:	20800117 	ldw	r2,4(r4)
   20cb8:	18c32704 	addi	r3,r3,3228
   20cbc:	20c00f15 	stw	r3,60(r4)
   20cc0:	2140bb04 	addi	r5,r4,748
   20cc4:	00c000c4 	movi	r3,3
   20cc8:	20c0b915 	stw	r3,740(r4)
   20ccc:	2140ba15 	stw	r5,744(r4)
   20cd0:	2000b815 	stw	zero,736(r4)
   20cd4:	10001705 	stb	zero,92(r2)
   20cd8:	10001745 	stb	zero,93(r2)
   20cdc:	10001785 	stb	zero,94(r2)
   20ce0:	100017c5 	stb	zero,95(r2)
   20ce4:	10001805 	stb	zero,96(r2)
   20ce8:	10001845 	stb	zero,97(r2)
   20cec:	10001885 	stb	zero,98(r2)
   20cf0:	100018c5 	stb	zero,99(r2)
   20cf4:	00c00104 	movi	r3,4
   20cf8:	10c00315 	stw	r3,12(r2)
   20cfc:	020000b4 	movhi	r8,2
   20d00:	20c00217 	ldw	r3,8(r4)
   20d04:	01c000b4 	movhi	r7,2
   20d08:	018000b4 	movhi	r6,2
   20d0c:	014000b4 	movhi	r5,2
   20d10:	4209b304 	addi	r8,r8,9932
   20d14:	39c9ca04 	addi	r7,r7,10024
   20d18:	3189ea04 	addi	r6,r6,10152
   20d1c:	294a0104 	addi	r5,r5,10244
   20d20:	02400074 	movhi	r9,1
   20d24:	10001915 	stw	zero,100(r2)
   20d28:	10000015 	stw	zero,0(r2)
   20d2c:	10000115 	stw	zero,4(r2)
   20d30:	10000215 	stw	zero,8(r2)
   20d34:	10000415 	stw	zero,16(r2)
   20d38:	10000515 	stw	zero,20(r2)
   20d3c:	10000615 	stw	zero,24(r2)
   20d40:	10800715 	stw	r2,28(r2)
   20d44:	12000815 	stw	r8,32(r2)
   20d48:	11c00915 	stw	r7,36(r2)
   20d4c:	11800a15 	stw	r6,40(r2)
   20d50:	11400b15 	stw	r5,44(r2)
   20d54:	4a400284 	addi	r9,r9,10
   20d58:	1a400315 	stw	r9,12(r3)
   20d5c:	18001915 	stw	zero,100(r3)
   20d60:	18000015 	stw	zero,0(r3)
   20d64:	18000115 	stw	zero,4(r3)
   20d68:	18000215 	stw	zero,8(r3)
   20d6c:	18000415 	stw	zero,16(r3)
   20d70:	18001705 	stb	zero,92(r3)
   20d74:	18001745 	stb	zero,93(r3)
   20d78:	18001785 	stb	zero,94(r3)
   20d7c:	180017c5 	stb	zero,95(r3)
   20d80:	18001805 	stb	zero,96(r3)
   20d84:	18001845 	stb	zero,97(r3)
   20d88:	18001885 	stb	zero,98(r3)
   20d8c:	180018c5 	stb	zero,99(r3)
   20d90:	20800317 	ldw	r2,12(r4)
   20d94:	024000b4 	movhi	r9,2
   20d98:	18000515 	stw	zero,20(r3)
   20d9c:	18000615 	stw	zero,24(r3)
   20da0:	18c00715 	stw	r3,28(r3)
   20da4:	1a000815 	stw	r8,32(r3)
   20da8:	19c00915 	stw	r7,36(r3)
   20dac:	19800a15 	stw	r6,40(r3)
   20db0:	19400b15 	stw	r5,44(r3)
   20db4:	4a400484 	addi	r9,r9,18
   20db8:	10001915 	stw	zero,100(r2)
   20dbc:	10000015 	stw	zero,0(r2)
   20dc0:	10000115 	stw	zero,4(r2)
   20dc4:	10000215 	stw	zero,8(r2)
   20dc8:	12400315 	stw	r9,12(r2)
   20dcc:	10000415 	stw	zero,16(r2)
   20dd0:	10000515 	stw	zero,20(r2)
   20dd4:	10000615 	stw	zero,24(r2)
   20dd8:	10001705 	stb	zero,92(r2)
   20ddc:	10001745 	stb	zero,93(r2)
   20de0:	10001785 	stb	zero,94(r2)
   20de4:	100017c5 	stb	zero,95(r2)
   20de8:	10001805 	stb	zero,96(r2)
   20dec:	10001845 	stb	zero,97(r2)
   20df0:	10001885 	stb	zero,98(r2)
   20df4:	100018c5 	stb	zero,99(r2)
   20df8:	10800715 	stw	r2,28(r2)
   20dfc:	12000815 	stw	r8,32(r2)
   20e00:	11c00915 	stw	r7,36(r2)
   20e04:	11800a15 	stw	r6,40(r2)
   20e08:	11400b15 	stw	r5,44(r2)
   20e0c:	00800044 	movi	r2,1
   20e10:	20800e15 	stw	r2,56(r4)
   20e14:	f800283a 	ret

00020e18 <__sfmoreglue>:
   20e18:	defffc04 	addi	sp,sp,-16
   20e1c:	dc800215 	stw	r18,8(sp)
   20e20:	2825883a 	mov	r18,r5
   20e24:	dc000015 	stw	r16,0(sp)
   20e28:	01401a04 	movi	r5,104
   20e2c:	2021883a 	mov	r16,r4
   20e30:	913fffc4 	addi	r4,r18,-1
   20e34:	dfc00315 	stw	ra,12(sp)
   20e38:	dc400115 	stw	r17,4(sp)
   20e3c:	00236180 	call	23618 <__mulsi3>
   20e40:	8009883a 	mov	r4,r16
   20e44:	11401d04 	addi	r5,r2,116
   20e48:	1023883a 	mov	r17,r2
   20e4c:	00216340 	call	21634 <_malloc_r>
   20e50:	1021883a 	mov	r16,r2
   20e54:	10000726 	beq	r2,zero,20e74 <__sfmoreglue+0x5c>
   20e58:	11000304 	addi	r4,r2,12
   20e5c:	10000015 	stw	zero,0(r2)
   20e60:	14800115 	stw	r18,4(r2)
   20e64:	11000215 	stw	r4,8(r2)
   20e68:	89801a04 	addi	r6,r17,104
   20e6c:	000b883a 	mov	r5,zero
   20e70:	00220100 	call	22010 <memset>
   20e74:	8005883a 	mov	r2,r16
   20e78:	dfc00317 	ldw	ra,12(sp)
   20e7c:	dc800217 	ldw	r18,8(sp)
   20e80:	dc400117 	ldw	r17,4(sp)
   20e84:	dc000017 	ldw	r16,0(sp)
   20e88:	dec00404 	addi	sp,sp,16
   20e8c:	f800283a 	ret

00020e90 <__sfp>:
   20e90:	defffb04 	addi	sp,sp,-20
   20e94:	008000b4 	movhi	r2,2
   20e98:	dc400115 	stw	r17,4(sp)
   20e9c:	145df617 	ldw	r17,30680(r2)
   20ea0:	dc800215 	stw	r18,8(sp)
   20ea4:	dfc00415 	stw	ra,16(sp)
   20ea8:	88800e17 	ldw	r2,56(r17)
   20eac:	dcc00315 	stw	r19,12(sp)
   20eb0:	dc000015 	stw	r16,0(sp)
   20eb4:	2025883a 	mov	r18,r4
   20eb8:	10002f26 	beq	r2,zero,20f78 <__sfp+0xe8>
   20ebc:	8c40b804 	addi	r17,r17,736
   20ec0:	04c00104 	movi	r19,4
   20ec4:	88800117 	ldw	r2,4(r17)
   20ec8:	8c000217 	ldw	r16,8(r17)
   20ecc:	10bfffc4 	addi	r2,r2,-1
   20ed0:	1000030e 	bge	r2,zero,20ee0 <__sfp+0x50>
   20ed4:	00002406 	br	20f68 <__sfp+0xd8>
   20ed8:	84001a04 	addi	r16,r16,104
   20edc:	28002226 	beq	r5,zero,20f68 <__sfp+0xd8>
   20ee0:	80c0030f 	ldh	r3,12(r16)
   20ee4:	10bfffc4 	addi	r2,r2,-1
   20ee8:	117fffd8 	cmpnei	r5,r2,-1
   20eec:	183ffa1e 	bne	r3,zero,20ed8 <__sfp+0x48>
   20ef0:	00bffff4 	movhi	r2,65535
   20ef4:	10800044 	addi	r2,r2,1
   20ef8:	80001915 	stw	zero,100(r16)
   20efc:	80000015 	stw	zero,0(r16)
   20f00:	80000115 	stw	zero,4(r16)
   20f04:	80000215 	stw	zero,8(r16)
   20f08:	80800315 	stw	r2,12(r16)
   20f0c:	80000415 	stw	zero,16(r16)
   20f10:	80000515 	stw	zero,20(r16)
   20f14:	80000615 	stw	zero,24(r16)
   20f18:	80001705 	stb	zero,92(r16)
   20f1c:	80001745 	stb	zero,93(r16)
   20f20:	80001785 	stb	zero,94(r16)
   20f24:	800017c5 	stb	zero,95(r16)
   20f28:	80001805 	stb	zero,96(r16)
   20f2c:	80001845 	stb	zero,97(r16)
   20f30:	80001885 	stb	zero,98(r16)
   20f34:	800018c5 	stb	zero,99(r16)
   20f38:	80000c15 	stw	zero,48(r16)
   20f3c:	80000d15 	stw	zero,52(r16)
   20f40:	80001115 	stw	zero,68(r16)
   20f44:	80001215 	stw	zero,72(r16)
   20f48:	8005883a 	mov	r2,r16
   20f4c:	dfc00417 	ldw	ra,16(sp)
   20f50:	dcc00317 	ldw	r19,12(sp)
   20f54:	dc800217 	ldw	r18,8(sp)
   20f58:	dc400117 	ldw	r17,4(sp)
   20f5c:	dc000017 	ldw	r16,0(sp)
   20f60:	dec00504 	addi	sp,sp,20
   20f64:	f800283a 	ret
   20f68:	8c000017 	ldw	r16,0(r17)
   20f6c:	80000526 	beq	r16,zero,20f84 <__sfp+0xf4>
   20f70:	8023883a 	mov	r17,r16
   20f74:	003fd306 	br	20ec4 <__sfp+0x34>
   20f78:	8809883a 	mov	r4,r17
   20f7c:	0020cb00 	call	20cb0 <__sinit.part.0>
   20f80:	003fce06 	br	20ebc <__sfp+0x2c>
   20f84:	01406b04 	movi	r5,428
   20f88:	9009883a 	mov	r4,r18
   20f8c:	00216340 	call	21634 <_malloc_r>
   20f90:	1021883a 	mov	r16,r2
   20f94:	10000926 	beq	r2,zero,20fbc <__sfp+0x12c>
   20f98:	11000304 	addi	r4,r2,12
   20f9c:	10000015 	stw	zero,0(r2)
   20fa0:	14c00115 	stw	r19,4(r2)
   20fa4:	11000215 	stw	r4,8(r2)
   20fa8:	01806804 	movi	r6,416
   20fac:	000b883a 	mov	r5,zero
   20fb0:	00220100 	call	22010 <memset>
   20fb4:	8c000015 	stw	r16,0(r17)
   20fb8:	003fed06 	br	20f70 <__sfp+0xe0>
   20fbc:	88000015 	stw	zero,0(r17)
   20fc0:	00800304 	movi	r2,12
   20fc4:	90800015 	stw	r2,0(r18)
   20fc8:	003fdf06 	br	20f48 <__sfp+0xb8>

00020fcc <_cleanup>:
   20fcc:	008000b4 	movhi	r2,2
   20fd0:	111df617 	ldw	r4,30680(r2)
   20fd4:	014000b4 	movhi	r5,2
   20fd8:	294a8b04 	addi	r5,r5,10796
   20fdc:	002158c1 	jmpi	2158c <_fwalk_reent>

00020fe0 <__sinit>:
   20fe0:	20800e17 	ldw	r2,56(r4)
   20fe4:	10000126 	beq	r2,zero,20fec <__sinit+0xc>
   20fe8:	f800283a 	ret
   20fec:	0020cb01 	jmpi	20cb0 <__sinit.part.0>

00020ff0 <__sfp_lock_acquire>:
   20ff0:	f800283a 	ret

00020ff4 <__sfp_lock_release>:
   20ff4:	f800283a 	ret

00020ff8 <__sinit_lock_acquire>:
   20ff8:	f800283a 	ret

00020ffc <__sinit_lock_release>:
   20ffc:	f800283a 	ret

00021000 <__fp_lock_all>:
   21000:	008000b4 	movhi	r2,2
   21004:	111df717 	ldw	r4,30684(r2)
   21008:	014000b4 	movhi	r5,2
   2100c:	29432504 	addi	r5,r5,3220
   21010:	00214f41 	jmpi	214f4 <_fwalk>

00021014 <__fp_unlock_all>:
   21014:	008000b4 	movhi	r2,2
   21018:	111df717 	ldw	r4,30684(r2)
   2101c:	014000b4 	movhi	r5,2
   21020:	29432a04 	addi	r5,r5,3240
   21024:	00214f41 	jmpi	214f4 <_fwalk>

00021028 <__sfvwrite_r>:
   21028:	30800217 	ldw	r2,8(r6)
   2102c:	1000c726 	beq	r2,zero,2134c <__sfvwrite_r+0x324>
   21030:	2a80030b 	ldhu	r10,12(r5)
   21034:	defff404 	addi	sp,sp,-48
   21038:	df000a15 	stw	fp,40(sp)
   2103c:	dc800415 	stw	r18,16(sp)
   21040:	dc000215 	stw	r16,8(sp)
   21044:	dfc00b15 	stw	ra,44(sp)
   21048:	ddc00915 	stw	r23,36(sp)
   2104c:	dd800815 	stw	r22,32(sp)
   21050:	dd400715 	stw	r21,28(sp)
   21054:	dd000615 	stw	r20,24(sp)
   21058:	dcc00515 	stw	r19,20(sp)
   2105c:	dc400315 	stw	r17,12(sp)
   21060:	5080020c 	andi	r2,r10,8
   21064:	3039883a 	mov	fp,r6
   21068:	2025883a 	mov	r18,r4
   2106c:	2821883a 	mov	r16,r5
   21070:	10002226 	beq	r2,zero,210fc <__sfvwrite_r+0xd4>
   21074:	28800417 	ldw	r2,16(r5)
   21078:	10002026 	beq	r2,zero,210fc <__sfvwrite_r+0xd4>
   2107c:	5080008c 	andi	r2,r10,2
   21080:	e4400017 	ldw	r17,0(fp)
   21084:	10002526 	beq	r2,zero,2111c <__sfvwrite_r+0xf4>
   21088:	80800917 	ldw	r2,36(r16)
   2108c:	81400717 	ldw	r5,28(r16)
   21090:	05600034 	movhi	r21,32768
   21094:	0029883a 	mov	r20,zero
   21098:	0027883a 	mov	r19,zero
   2109c:	ad7f0004 	addi	r21,r21,-1024
   210a0:	a00d883a 	mov	r6,r20
   210a4:	9009883a 	mov	r4,r18
   210a8:	98001026 	beq	r19,zero,210ec <__sfvwrite_r+0xc4>
   210ac:	980f883a 	mov	r7,r19
   210b0:	acc0012e 	bgeu	r21,r19,210b8 <__sfvwrite_r+0x90>
   210b4:	a80f883a 	mov	r7,r21
   210b8:	103ee83a 	callr	r2
   210bc:	00809e0e 	bge	zero,r2,21338 <__sfvwrite_r+0x310>
   210c0:	e0c00217 	ldw	r3,8(fp)
   210c4:	a0a9883a 	add	r20,r20,r2
   210c8:	98a7c83a 	sub	r19,r19,r2
   210cc:	1885c83a 	sub	r2,r3,r2
   210d0:	e0800215 	stw	r2,8(fp)
   210d4:	10008726 	beq	r2,zero,212f4 <__sfvwrite_r+0x2cc>
   210d8:	80800917 	ldw	r2,36(r16)
   210dc:	81400717 	ldw	r5,28(r16)
   210e0:	a00d883a 	mov	r6,r20
   210e4:	9009883a 	mov	r4,r18
   210e8:	983ff01e 	bne	r19,zero,210ac <__sfvwrite_r+0x84>
   210ec:	8d000017 	ldw	r20,0(r17)
   210f0:	8cc00117 	ldw	r19,4(r17)
   210f4:	8c400204 	addi	r17,r17,8
   210f8:	003fe906 	br	210a0 <__sfvwrite_r+0x78>
   210fc:	800b883a 	mov	r5,r16
   21100:	9009883a 	mov	r4,r18
   21104:	00228700 	call	22870 <__swsetup_r>
   21108:	1000f81e 	bne	r2,zero,214ec <__sfvwrite_r+0x4c4>
   2110c:	8280030b 	ldhu	r10,12(r16)
   21110:	e4400017 	ldw	r17,0(fp)
   21114:	5080008c 	andi	r2,r10,2
   21118:	103fdb1e 	bne	r2,zero,21088 <__sfvwrite_r+0x60>
   2111c:	5080004c 	andi	r2,r10,1
   21120:	1000521e 	bne	r2,zero,2126c <__sfvwrite_r+0x244>
   21124:	00a00034 	movhi	r2,32768
   21128:	10bfff84 	addi	r2,r2,-2
   2112c:	01200034 	movhi	r4,32768
   21130:	81c00017 	ldw	r7,0(r16)
   21134:	80c00217 	ldw	r3,8(r16)
   21138:	d8800015 	stw	r2,0(sp)
   2113c:	20bfffc4 	addi	r2,r4,-1
   21140:	002b883a 	mov	r21,zero
   21144:	002d883a 	mov	r22,zero
   21148:	d8800115 	stw	r2,4(sp)
   2114c:	3809883a 	mov	r4,r7
   21150:	1827883a 	mov	r19,r3
   21154:	b0004126 	beq	r22,zero,2125c <__sfvwrite_r+0x234>
   21158:	5080800c 	andi	r2,r10,512
   2115c:	10009526 	beq	r2,zero,213b4 <__sfvwrite_r+0x38c>
   21160:	1829883a 	mov	r20,r3
   21164:	b0c0bc36 	bltu	r22,r3,21458 <__sfvwrite_r+0x430>
   21168:	5081200c 	andi	r2,r10,1152
   2116c:	10002526 	beq	r2,zero,21204 <__sfvwrite_r+0x1dc>
   21170:	80c00517 	ldw	r3,20(r16)
   21174:	81000417 	ldw	r4,16(r16)
   21178:	18c5883a 	add	r2,r3,r3
   2117c:	10c5883a 	add	r2,r2,r3
   21180:	1012d7fa 	srli	r9,r2,31
   21184:	392fc83a 	sub	r23,r7,r4
   21188:	b8c00044 	addi	r3,r23,1
   2118c:	4893883a 	add	r9,r9,r2
   21190:	4827d07a 	srai	r19,r9,1
   21194:	1d85883a 	add	r2,r3,r22
   21198:	980b883a 	mov	r5,r19
   2119c:	9880022e 	bgeu	r19,r2,211a8 <__sfvwrite_r+0x180>
   211a0:	1027883a 	mov	r19,r2
   211a4:	100b883a 	mov	r5,r2
   211a8:	5281000c 	andi	r10,r10,1024
   211ac:	5000bd26 	beq	r10,zero,214a4 <__sfvwrite_r+0x47c>
   211b0:	9009883a 	mov	r4,r18
   211b4:	00216340 	call	21634 <_malloc_r>
   211b8:	1000c826 	beq	r2,zero,214dc <__sfvwrite_r+0x4b4>
   211bc:	81400417 	ldw	r5,16(r16)
   211c0:	1009883a 	mov	r4,r2
   211c4:	b80d883a 	mov	r6,r23
   211c8:	0020a200 	call	20a20 <memcpy>
   211cc:	1007883a 	mov	r3,r2
   211d0:	8080030b 	ldhu	r2,12(r16)
   211d4:	013edfc4 	movi	r4,-1153
   211d8:	1104703a 	and	r2,r2,r4
   211dc:	10802014 	ori	r2,r2,128
   211e0:	8080030d 	sth	r2,12(r16)
   211e4:	9dcfc83a 	sub	r7,r19,r23
   211e8:	1dc9883a 	add	r4,r3,r23
   211ec:	84c00515 	stw	r19,20(r16)
   211f0:	80c00415 	stw	r3,16(r16)
   211f4:	81000015 	stw	r4,0(r16)
   211f8:	b027883a 	mov	r19,r22
   211fc:	81c00215 	stw	r7,8(r16)
   21200:	b029883a 	mov	r20,r22
   21204:	a00d883a 	mov	r6,r20
   21208:	a80b883a 	mov	r5,r21
   2120c:	0021ee40 	call	21ee4 <memmove>
   21210:	80c00217 	ldw	r3,8(r16)
   21214:	81c00017 	ldw	r7,0(r16)
   21218:	b02f883a 	mov	r23,r22
   2121c:	1cc7c83a 	sub	r3,r3,r19
   21220:	3d0d883a 	add	r6,r7,r20
   21224:	80c00215 	stw	r3,8(r16)
   21228:	81800015 	stw	r6,0(r16)
   2122c:	002d883a 	mov	r22,zero
   21230:	e0800217 	ldw	r2,8(fp)
   21234:	adeb883a 	add	r21,r21,r23
   21238:	15c5c83a 	sub	r2,r2,r23
   2123c:	e0800215 	stw	r2,8(fp)
   21240:	10002c26 	beq	r2,zero,212f4 <__sfvwrite_r+0x2cc>
   21244:	81c00017 	ldw	r7,0(r16)
   21248:	80c00217 	ldw	r3,8(r16)
   2124c:	8280030b 	ldhu	r10,12(r16)
   21250:	3809883a 	mov	r4,r7
   21254:	1827883a 	mov	r19,r3
   21258:	b03fbf1e 	bne	r22,zero,21158 <__sfvwrite_r+0x130>
   2125c:	8d400017 	ldw	r21,0(r17)
   21260:	8d800117 	ldw	r22,4(r17)
   21264:	8c400204 	addi	r17,r17,8
   21268:	003fb806 	br	2114c <__sfvwrite_r+0x124>
   2126c:	002f883a 	mov	r23,zero
   21270:	0005883a 	mov	r2,zero
   21274:	002d883a 	mov	r22,zero
   21278:	0029883a 	mov	r20,zero
   2127c:	a0003526 	beq	r20,zero,21354 <__sfvwrite_r+0x32c>
   21280:	10003926 	beq	r2,zero,21368 <__sfvwrite_r+0x340>
   21284:	b805883a 	mov	r2,r23
   21288:	a02b883a 	mov	r21,r20
   2128c:	1500012e 	bgeu	r2,r20,21294 <__sfvwrite_r+0x26c>
   21290:	102b883a 	mov	r21,r2
   21294:	81000017 	ldw	r4,0(r16)
   21298:	80800417 	ldw	r2,16(r16)
   2129c:	84c00217 	ldw	r19,8(r16)
   212a0:	81c00517 	ldw	r7,20(r16)
   212a4:	1100022e 	bgeu	r2,r4,212b0 <__sfvwrite_r+0x288>
   212a8:	99e7883a 	add	r19,r19,r7
   212ac:	9d403616 	blt	r19,r21,21388 <__sfvwrite_r+0x360>
   212b0:	a9c06c16 	blt	r21,r7,21464 <__sfvwrite_r+0x43c>
   212b4:	80800917 	ldw	r2,36(r16)
   212b8:	81400717 	ldw	r5,28(r16)
   212bc:	b00d883a 	mov	r6,r22
   212c0:	9009883a 	mov	r4,r18
   212c4:	103ee83a 	callr	r2
   212c8:	1027883a 	mov	r19,r2
   212cc:	00801a0e 	bge	zero,r2,21338 <__sfvwrite_r+0x310>
   212d0:	bcefc83a 	sub	r23,r23,r19
   212d4:	b8001426 	beq	r23,zero,21328 <__sfvwrite_r+0x300>
   212d8:	00800044 	movi	r2,1
   212dc:	e0c00217 	ldw	r3,8(fp)
   212e0:	b4ed883a 	add	r22,r22,r19
   212e4:	a4e9c83a 	sub	r20,r20,r19
   212e8:	1cc7c83a 	sub	r3,r3,r19
   212ec:	e0c00215 	stw	r3,8(fp)
   212f0:	183fe21e 	bne	r3,zero,2127c <__sfvwrite_r+0x254>
   212f4:	0005883a 	mov	r2,zero
   212f8:	dfc00b17 	ldw	ra,44(sp)
   212fc:	df000a17 	ldw	fp,40(sp)
   21300:	ddc00917 	ldw	r23,36(sp)
   21304:	dd800817 	ldw	r22,32(sp)
   21308:	dd400717 	ldw	r21,28(sp)
   2130c:	dd000617 	ldw	r20,24(sp)
   21310:	dcc00517 	ldw	r19,20(sp)
   21314:	dc800417 	ldw	r18,16(sp)
   21318:	dc400317 	ldw	r17,12(sp)
   2131c:	dc000217 	ldw	r16,8(sp)
   21320:	dec00c04 	addi	sp,sp,48
   21324:	f800283a 	ret
   21328:	800b883a 	mov	r5,r16
   2132c:	9009883a 	mov	r4,r18
   21330:	0022d5c0 	call	22d5c <_fflush_r>
   21334:	103fe926 	beq	r2,zero,212dc <__sfvwrite_r+0x2b4>
   21338:	8080030b 	ldhu	r2,12(r16)
   2133c:	10801014 	ori	r2,r2,64
   21340:	8080030d 	sth	r2,12(r16)
   21344:	00bfffc4 	movi	r2,-1
   21348:	003feb06 	br	212f8 <__sfvwrite_r+0x2d0>
   2134c:	0005883a 	mov	r2,zero
   21350:	f800283a 	ret
   21354:	8d000117 	ldw	r20,4(r17)
   21358:	8805883a 	mov	r2,r17
   2135c:	8c400204 	addi	r17,r17,8
   21360:	a03ffc26 	beq	r20,zero,21354 <__sfvwrite_r+0x32c>
   21364:	15800017 	ldw	r22,0(r2)
   21368:	a00d883a 	mov	r6,r20
   2136c:	01400284 	movi	r5,10
   21370:	b009883a 	mov	r4,r22
   21374:	0021e180 	call	21e18 <memchr>
   21378:	10004726 	beq	r2,zero,21498 <__sfvwrite_r+0x470>
   2137c:	10800044 	addi	r2,r2,1
   21380:	15afc83a 	sub	r23,r2,r22
   21384:	003fbf06 	br	21284 <__sfvwrite_r+0x25c>
   21388:	b00b883a 	mov	r5,r22
   2138c:	980d883a 	mov	r6,r19
   21390:	0021ee40 	call	21ee4 <memmove>
   21394:	80800017 	ldw	r2,0(r16)
   21398:	800b883a 	mov	r5,r16
   2139c:	9009883a 	mov	r4,r18
   213a0:	14c5883a 	add	r2,r2,r19
   213a4:	80800015 	stw	r2,0(r16)
   213a8:	0022d5c0 	call	22d5c <_fflush_r>
   213ac:	103fc826 	beq	r2,zero,212d0 <__sfvwrite_r+0x2a8>
   213b0:	003fe106 	br	21338 <__sfvwrite_r+0x310>
   213b4:	80800417 	ldw	r2,16(r16)
   213b8:	11c01436 	bltu	r2,r7,2140c <__sfvwrite_r+0x3e4>
   213bc:	85c00517 	ldw	r23,20(r16)
   213c0:	b5c01236 	bltu	r22,r23,2140c <__sfvwrite_r+0x3e4>
   213c4:	d8800017 	ldw	r2,0(sp)
   213c8:	1580312e 	bgeu	r2,r22,21490 <__sfvwrite_r+0x468>
   213cc:	d9000117 	ldw	r4,4(sp)
   213d0:	b80b883a 	mov	r5,r23
   213d4:	002086c0 	call	2086c <__divsi3>
   213d8:	b80b883a 	mov	r5,r23
   213dc:	1009883a 	mov	r4,r2
   213e0:	00236180 	call	23618 <__mulsi3>
   213e4:	80c00917 	ldw	r3,36(r16)
   213e8:	81400717 	ldw	r5,28(r16)
   213ec:	100f883a 	mov	r7,r2
   213f0:	a80d883a 	mov	r6,r21
   213f4:	9009883a 	mov	r4,r18
   213f8:	183ee83a 	callr	r3
   213fc:	102f883a 	mov	r23,r2
   21400:	00bfcd0e 	bge	zero,r2,21338 <__sfvwrite_r+0x310>
   21404:	b5edc83a 	sub	r22,r22,r23
   21408:	003f8906 	br	21230 <__sfvwrite_r+0x208>
   2140c:	182f883a 	mov	r23,r3
   21410:	b0c0012e 	bgeu	r22,r3,21418 <__sfvwrite_r+0x3f0>
   21414:	b02f883a 	mov	r23,r22
   21418:	3809883a 	mov	r4,r7
   2141c:	b80d883a 	mov	r6,r23
   21420:	a80b883a 	mov	r5,r21
   21424:	0021ee40 	call	21ee4 <memmove>
   21428:	80c00217 	ldw	r3,8(r16)
   2142c:	81c00017 	ldw	r7,0(r16)
   21430:	1dc7c83a 	sub	r3,r3,r23
   21434:	3dcf883a 	add	r7,r7,r23
   21438:	80c00215 	stw	r3,8(r16)
   2143c:	81c00015 	stw	r7,0(r16)
   21440:	183ff01e 	bne	r3,zero,21404 <__sfvwrite_r+0x3dc>
   21444:	800b883a 	mov	r5,r16
   21448:	9009883a 	mov	r4,r18
   2144c:	0022d5c0 	call	22d5c <_fflush_r>
   21450:	103fec26 	beq	r2,zero,21404 <__sfvwrite_r+0x3dc>
   21454:	003fb806 	br	21338 <__sfvwrite_r+0x310>
   21458:	b027883a 	mov	r19,r22
   2145c:	b029883a 	mov	r20,r22
   21460:	003f6806 	br	21204 <__sfvwrite_r+0x1dc>
   21464:	a80d883a 	mov	r6,r21
   21468:	b00b883a 	mov	r5,r22
   2146c:	0021ee40 	call	21ee4 <memmove>
   21470:	80c00217 	ldw	r3,8(r16)
   21474:	80800017 	ldw	r2,0(r16)
   21478:	a827883a 	mov	r19,r21
   2147c:	1d47c83a 	sub	r3,r3,r21
   21480:	1545883a 	add	r2,r2,r21
   21484:	80c00215 	stw	r3,8(r16)
   21488:	80800015 	stw	r2,0(r16)
   2148c:	003f9006 	br	212d0 <__sfvwrite_r+0x2a8>
   21490:	b009883a 	mov	r4,r22
   21494:	003fce06 	br	213d0 <__sfvwrite_r+0x3a8>
   21498:	a0800044 	addi	r2,r20,1
   2149c:	102f883a 	mov	r23,r2
   214a0:	003f7906 	br	21288 <__sfvwrite_r+0x260>
   214a4:	280d883a 	mov	r6,r5
   214a8:	200b883a 	mov	r5,r4
   214ac:	9009883a 	mov	r4,r18
   214b0:	00221040 	call	22104 <_realloc_r>
   214b4:	1007883a 	mov	r3,r2
   214b8:	103f4a1e 	bne	r2,zero,211e4 <__sfvwrite_r+0x1bc>
   214bc:	81400417 	ldw	r5,16(r16)
   214c0:	9009883a 	mov	r4,r18
   214c4:	0022f5c0 	call	22f5c <_free_r>
   214c8:	8080030b 	ldhu	r2,12(r16)
   214cc:	00c00304 	movi	r3,12
   214d0:	90c00015 	stw	r3,0(r18)
   214d4:	10bfdfcc 	andi	r2,r2,65407
   214d8:	003f9806 	br	2133c <__sfvwrite_r+0x314>
   214dc:	00c00304 	movi	r3,12
   214e0:	8080030b 	ldhu	r2,12(r16)
   214e4:	90c00015 	stw	r3,0(r18)
   214e8:	003f9406 	br	2133c <__sfvwrite_r+0x314>
   214ec:	00bfffc4 	movi	r2,-1
   214f0:	003f8106 	br	212f8 <__sfvwrite_r+0x2d0>

000214f4 <_fwalk>:
   214f4:	defffa04 	addi	sp,sp,-24
   214f8:	dd000415 	stw	r20,16(sp)
   214fc:	dcc00315 	stw	r19,12(sp)
   21500:	dc800215 	stw	r18,8(sp)
   21504:	dfc00515 	stw	ra,20(sp)
   21508:	dc400115 	stw	r17,4(sp)
   2150c:	dc000015 	stw	r16,0(sp)
   21510:	2827883a 	mov	r19,r5
   21514:	2480b804 	addi	r18,r4,736
   21518:	0029883a 	mov	r20,zero
   2151c:	94400117 	ldw	r17,4(r18)
   21520:	94000217 	ldw	r16,8(r18)
   21524:	8c7fffc4 	addi	r17,r17,-1
   21528:	88000d16 	blt	r17,zero,21560 <_fwalk+0x6c>
   2152c:	8080030b 	ldhu	r2,12(r16)
   21530:	8c7fffc4 	addi	r17,r17,-1
   21534:	108000b0 	cmpltui	r2,r2,2
   21538:	1000061e 	bne	r2,zero,21554 <_fwalk+0x60>
   2153c:	8080038f 	ldh	r2,14(r16)
   21540:	8009883a 	mov	r4,r16
   21544:	10bfffe0 	cmpeqi	r2,r2,-1
   21548:	1000021e 	bne	r2,zero,21554 <_fwalk+0x60>
   2154c:	983ee83a 	callr	r19
   21550:	a0a8b03a 	or	r20,r20,r2
   21554:	88bfffd8 	cmpnei	r2,r17,-1
   21558:	84001a04 	addi	r16,r16,104
   2155c:	103ff31e 	bne	r2,zero,2152c <_fwalk+0x38>
   21560:	94800017 	ldw	r18,0(r18)
   21564:	903fed1e 	bne	r18,zero,2151c <_fwalk+0x28>
   21568:	a005883a 	mov	r2,r20
   2156c:	dfc00517 	ldw	ra,20(sp)
   21570:	dd000417 	ldw	r20,16(sp)
   21574:	dcc00317 	ldw	r19,12(sp)
   21578:	dc800217 	ldw	r18,8(sp)
   2157c:	dc400117 	ldw	r17,4(sp)
   21580:	dc000017 	ldw	r16,0(sp)
   21584:	dec00604 	addi	sp,sp,24
   21588:	f800283a 	ret

0002158c <_fwalk_reent>:
   2158c:	defff904 	addi	sp,sp,-28
   21590:	dd400515 	stw	r21,20(sp)
   21594:	dd000415 	stw	r20,16(sp)
   21598:	dcc00315 	stw	r19,12(sp)
   2159c:	dc800215 	stw	r18,8(sp)
   215a0:	dfc00615 	stw	ra,24(sp)
   215a4:	dc400115 	stw	r17,4(sp)
   215a8:	dc000015 	stw	r16,0(sp)
   215ac:	202b883a 	mov	r21,r4
   215b0:	2827883a 	mov	r19,r5
   215b4:	2480b804 	addi	r18,r4,736
   215b8:	0029883a 	mov	r20,zero
   215bc:	94400117 	ldw	r17,4(r18)
   215c0:	94000217 	ldw	r16,8(r18)
   215c4:	8c7fffc4 	addi	r17,r17,-1
   215c8:	88000e16 	blt	r17,zero,21604 <_fwalk_reent+0x78>
   215cc:	8080030b 	ldhu	r2,12(r16)
   215d0:	8c7fffc4 	addi	r17,r17,-1
   215d4:	108000b0 	cmpltui	r2,r2,2
   215d8:	1000071e 	bne	r2,zero,215f8 <_fwalk_reent+0x6c>
   215dc:	8080038f 	ldh	r2,14(r16)
   215e0:	800b883a 	mov	r5,r16
   215e4:	a809883a 	mov	r4,r21
   215e8:	10bfffe0 	cmpeqi	r2,r2,-1
   215ec:	1000021e 	bne	r2,zero,215f8 <_fwalk_reent+0x6c>
   215f0:	983ee83a 	callr	r19
   215f4:	a0a8b03a 	or	r20,r20,r2
   215f8:	88bfffd8 	cmpnei	r2,r17,-1
   215fc:	84001a04 	addi	r16,r16,104
   21600:	103ff21e 	bne	r2,zero,215cc <_fwalk_reent+0x40>
   21604:	94800017 	ldw	r18,0(r18)
   21608:	903fec1e 	bne	r18,zero,215bc <_fwalk_reent+0x30>
   2160c:	a005883a 	mov	r2,r20
   21610:	dfc00617 	ldw	ra,24(sp)
   21614:	dd400517 	ldw	r21,20(sp)
   21618:	dd000417 	ldw	r20,16(sp)
   2161c:	dcc00317 	ldw	r19,12(sp)
   21620:	dc800217 	ldw	r18,8(sp)
   21624:	dc400117 	ldw	r17,4(sp)
   21628:	dc000017 	ldw	r16,0(sp)
   2162c:	dec00704 	addi	sp,sp,28
   21630:	f800283a 	ret

00021634 <_malloc_r>:
   21634:	defff604 	addi	sp,sp,-40
   21638:	dc400115 	stw	r17,4(sp)
   2163c:	2c4002c4 	addi	r17,r5,11
   21640:	dc800215 	stw	r18,8(sp)
   21644:	dfc00915 	stw	ra,36(sp)
   21648:	df000815 	stw	fp,32(sp)
   2164c:	ddc00715 	stw	r23,28(sp)
   21650:	dd800615 	stw	r22,24(sp)
   21654:	dd400515 	stw	r21,20(sp)
   21658:	dd000415 	stw	r20,16(sp)
   2165c:	dcc00315 	stw	r19,12(sp)
   21660:	dc000015 	stw	r16,0(sp)
   21664:	888005e8 	cmpgeui	r2,r17,23
   21668:	2025883a 	mov	r18,r4
   2166c:	10001b1e 	bne	r2,zero,216dc <_malloc_r+0xa8>
   21670:	29400468 	cmpgeui	r5,r5,17
   21674:	2800821e 	bne	r5,zero,21880 <_malloc_r+0x24c>
   21678:	0023bec0 	call	23bec <__malloc_lock>
   2167c:	04400404 	movi	r17,16
   21680:	00800604 	movi	r2,24
   21684:	01c00084 	movi	r7,2
   21688:	04c000b4 	movhi	r19,2
   2168c:	9cd87104 	addi	r19,r19,25028
   21690:	9885883a 	add	r2,r19,r2
   21694:	14000117 	ldw	r16,4(r2)
   21698:	10fffe04 	addi	r3,r2,-8
   2169c:	80c08b26 	beq	r16,r3,218cc <_malloc_r+0x298>
   216a0:	80800117 	ldw	r2,4(r16)
   216a4:	81000317 	ldw	r4,12(r16)
   216a8:	00ffff04 	movi	r3,-4
   216ac:	10c4703a 	and	r2,r2,r3
   216b0:	81400217 	ldw	r5,8(r16)
   216b4:	8085883a 	add	r2,r16,r2
   216b8:	10c00117 	ldw	r3,4(r2)
   216bc:	29000315 	stw	r4,12(r5)
   216c0:	21400215 	stw	r5,8(r4)
   216c4:	18c00054 	ori	r3,r3,1
   216c8:	10c00115 	stw	r3,4(r2)
   216cc:	9009883a 	mov	r4,r18
   216d0:	0023c100 	call	23c10 <__malloc_unlock>
   216d4:	80800204 	addi	r2,r16,8
   216d8:	00006c06 	br	2188c <_malloc_r+0x258>
   216dc:	00bffe04 	movi	r2,-8
   216e0:	88a2703a 	and	r17,r17,r2
   216e4:	88006616 	blt	r17,zero,21880 <_malloc_r+0x24c>
   216e8:	89406536 	bltu	r17,r5,21880 <_malloc_r+0x24c>
   216ec:	0023bec0 	call	23bec <__malloc_lock>
   216f0:	88807e28 	cmpgeui	r2,r17,504
   216f4:	10012326 	beq	r2,zero,21b84 <_malloc_r+0x550>
   216f8:	8804d27a 	srli	r2,r17,9
   216fc:	10006f26 	beq	r2,zero,218bc <_malloc_r+0x288>
   21700:	10c00168 	cmpgeui	r3,r2,5
   21704:	1800ff1e 	bne	r3,zero,21b04 <_malloc_r+0x4d0>
   21708:	8804d1ba 	srli	r2,r17,6
   2170c:	11c00e44 	addi	r7,r2,57
   21710:	380890fa 	slli	r4,r7,3
   21714:	12000e04 	addi	r8,r2,56
   21718:	04c000b4 	movhi	r19,2
   2171c:	9cd87104 	addi	r19,r19,25028
   21720:	9909883a 	add	r4,r19,r4
   21724:	24000117 	ldw	r16,4(r4)
   21728:	213ffe04 	addi	r4,r4,-8
   2172c:	24000b26 	beq	r4,r16,2175c <_malloc_r+0x128>
   21730:	01bfff04 	movi	r6,-4
   21734:	00000306 	br	21744 <_malloc_r+0x110>
   21738:	1800d70e 	bge	r3,zero,21a98 <_malloc_r+0x464>
   2173c:	84000317 	ldw	r16,12(r16)
   21740:	24000626 	beq	r4,r16,2175c <_malloc_r+0x128>
   21744:	80800117 	ldw	r2,4(r16)
   21748:	1184703a 	and	r2,r2,r6
   2174c:	1447c83a 	sub	r3,r2,r17
   21750:	19400408 	cmpgei	r5,r3,16
   21754:	283ff826 	beq	r5,zero,21738 <_malloc_r+0x104>
   21758:	400f883a 	mov	r7,r8
   2175c:	9c000417 	ldw	r16,16(r19)
   21760:	024000b4 	movhi	r9,2
   21764:	4a587304 	addi	r9,r9,25036
   21768:	82405f26 	beq	r16,r9,218e8 <_malloc_r+0x2b4>
   2176c:	80800117 	ldw	r2,4(r16)
   21770:	00ffff04 	movi	r3,-4
   21774:	10c4703a 	and	r2,r2,r3
   21778:	1447c83a 	sub	r3,r2,r17
   2177c:	19000410 	cmplti	r4,r3,16
   21780:	20010b26 	beq	r4,zero,21bb0 <_malloc_r+0x57c>
   21784:	9a400515 	stw	r9,20(r19)
   21788:	9a400415 	stw	r9,16(r19)
   2178c:	1801000e 	bge	r3,zero,21b90 <_malloc_r+0x55c>
   21790:	10c08028 	cmpgeui	r3,r2,512
   21794:	1800c21e 	bne	r3,zero,21aa0 <_malloc_r+0x46c>
   21798:	1006d0fa 	srli	r3,r2,3
   2179c:	1008d17a 	srli	r4,r2,5
   217a0:	00800044 	movi	r2,1
   217a4:	18c00044 	addi	r3,r3,1
   217a8:	180690fa 	slli	r3,r3,3
   217ac:	99400117 	ldw	r5,4(r19)
   217b0:	1104983a 	sll	r2,r2,r4
   217b4:	98c7883a 	add	r3,r19,r3
   217b8:	19000017 	ldw	r4,0(r3)
   217bc:	1144b03a 	or	r2,r2,r5
   217c0:	197ffe04 	addi	r5,r3,-8
   217c4:	81400315 	stw	r5,12(r16)
   217c8:	81000215 	stw	r4,8(r16)
   217cc:	98800115 	stw	r2,4(r19)
   217d0:	1c000015 	stw	r16,0(r3)
   217d4:	24000315 	stw	r16,12(r4)
   217d8:	3807d0ba 	srai	r3,r7,2
   217dc:	01000044 	movi	r4,1
   217e0:	20c8983a 	sll	r4,r4,r3
   217e4:	11004536 	bltu	r2,r4,218fc <_malloc_r+0x2c8>
   217e8:	2086703a 	and	r3,r4,r2
   217ec:	18000a1e 	bne	r3,zero,21818 <_malloc_r+0x1e4>
   217f0:	2109883a 	add	r4,r4,r4
   217f4:	00ffff04 	movi	r3,-4
   217f8:	38c6703a 	and	r3,r7,r3
   217fc:	208a703a 	and	r5,r4,r2
   21800:	19c00104 	addi	r7,r3,4
   21804:	2800041e 	bne	r5,zero,21818 <_malloc_r+0x1e4>
   21808:	2109883a 	add	r4,r4,r4
   2180c:	2086703a 	and	r3,r4,r2
   21810:	39c00104 	addi	r7,r7,4
   21814:	183ffc26 	beq	r3,zero,21808 <_malloc_r+0x1d4>
   21818:	02bfff04 	movi	r10,-4
   2181c:	381690fa 	slli	r11,r7,3
   21820:	3819883a 	mov	r12,r7
   21824:	9ad7883a 	add	r11,r19,r11
   21828:	5811883a 	mov	r8,r11
   2182c:	40800317 	ldw	r2,12(r8)
   21830:	4080bd26 	beq	r8,r2,21b28 <_malloc_r+0x4f4>
   21834:	10c00117 	ldw	r3,4(r2)
   21838:	1021883a 	mov	r16,r2
   2183c:	10800317 	ldw	r2,12(r2)
   21840:	1a86703a 	and	r3,r3,r10
   21844:	1c4bc83a 	sub	r5,r3,r17
   21848:	29800410 	cmplti	r6,r5,16
   2184c:	3000bb26 	beq	r6,zero,21b3c <_malloc_r+0x508>
   21850:	283ff716 	blt	r5,zero,21830 <_malloc_r+0x1fc>
   21854:	80c7883a 	add	r3,r16,r3
   21858:	19400117 	ldw	r5,4(r3)
   2185c:	81800217 	ldw	r6,8(r16)
   21860:	9009883a 	mov	r4,r18
   21864:	29400054 	ori	r5,r5,1
   21868:	19400115 	stw	r5,4(r3)
   2186c:	30800315 	stw	r2,12(r6)
   21870:	11800215 	stw	r6,8(r2)
   21874:	0023c100 	call	23c10 <__malloc_unlock>
   21878:	80800204 	addi	r2,r16,8
   2187c:	00000306 	br	2188c <_malloc_r+0x258>
   21880:	00800304 	movi	r2,12
   21884:	90800015 	stw	r2,0(r18)
   21888:	0005883a 	mov	r2,zero
   2188c:	dfc00917 	ldw	ra,36(sp)
   21890:	df000817 	ldw	fp,32(sp)
   21894:	ddc00717 	ldw	r23,28(sp)
   21898:	dd800617 	ldw	r22,24(sp)
   2189c:	dd400517 	ldw	r21,20(sp)
   218a0:	dd000417 	ldw	r20,16(sp)
   218a4:	dcc00317 	ldw	r19,12(sp)
   218a8:	dc800217 	ldw	r18,8(sp)
   218ac:	dc400117 	ldw	r17,4(sp)
   218b0:	dc000017 	ldw	r16,0(sp)
   218b4:	dec00a04 	addi	sp,sp,40
   218b8:	f800283a 	ret
   218bc:	01008004 	movi	r4,512
   218c0:	01c01004 	movi	r7,64
   218c4:	02000fc4 	movi	r8,63
   218c8:	003f9306 	br	21718 <_malloc_r+0xe4>
   218cc:	14000317 	ldw	r16,12(r2)
   218d0:	39c00084 	addi	r7,r7,2
   218d4:	143f721e 	bne	r2,r16,216a0 <_malloc_r+0x6c>
   218d8:	9c000417 	ldw	r16,16(r19)
   218dc:	024000b4 	movhi	r9,2
   218e0:	4a587304 	addi	r9,r9,25036
   218e4:	827fa11e 	bne	r16,r9,2176c <_malloc_r+0x138>
   218e8:	3807d0ba 	srai	r3,r7,2
   218ec:	01000044 	movi	r4,1
   218f0:	98800117 	ldw	r2,4(r19)
   218f4:	20c8983a 	sll	r4,r4,r3
   218f8:	113fbb2e 	bgeu	r2,r4,217e8 <_malloc_r+0x1b4>
   218fc:	9c000217 	ldw	r16,8(r19)
   21900:	00bfff04 	movi	r2,-4
   21904:	85800117 	ldw	r22,4(r16)
   21908:	b0ac703a 	and	r22,r22,r2
   2190c:	b4400336 	bltu	r22,r17,2191c <_malloc_r+0x2e8>
   21910:	b445c83a 	sub	r2,r22,r17
   21914:	10c00408 	cmpgei	r3,r2,16
   21918:	1800551e 	bne	r3,zero,21a70 <_malloc_r+0x43c>
   2191c:	008000b4 	movhi	r2,2
   21920:	109df817 	ldw	r2,30688(r2)
   21924:	00c000f4 	movhi	r3,3
   21928:	1d64a317 	ldw	r21,-28020(r3)
   2192c:	10bfffd8 	cmpnei	r2,r2,-1
   21930:	85b9883a 	add	fp,r16,r22
   21934:	8d6b883a 	add	r21,r17,r21
   21938:	1000d726 	beq	r2,zero,21c98 <_malloc_r+0x664>
   2193c:	ad4403c4 	addi	r21,r21,4111
   21940:	00bc0004 	movi	r2,-4096
   21944:	a8aa703a 	and	r21,r21,r2
   21948:	a80b883a 	mov	r5,r21
   2194c:	9009883a 	mov	r4,r18
   21950:	00226740 	call	22674 <_sbrk_r>
   21954:	102f883a 	mov	r23,r2
   21958:	10bfffd8 	cmpnei	r2,r2,-1
   2195c:	1000a926 	beq	r2,zero,21c04 <_malloc_r+0x5d0>
   21960:	bf00a736 	bltu	r23,fp,21c00 <_malloc_r+0x5cc>
   21964:	008000f4 	movhi	r2,3
   21968:	1524ad17 	ldw	r20,-27980(r2)
   2196c:	ad29883a 	add	r20,r21,r20
   21970:	1524ad15 	stw	r20,-27980(r2)
   21974:	a007883a 	mov	r3,r20
   21978:	e5c0ed26 	beq	fp,r23,21d30 <_malloc_r+0x6fc>
   2197c:	008000b4 	movhi	r2,2
   21980:	109df817 	ldw	r2,30688(r2)
   21984:	10bfffd8 	cmpnei	r2,r2,-1
   21988:	1000f026 	beq	r2,zero,21d4c <_malloc_r+0x718>
   2198c:	bf05c83a 	sub	r2,r23,fp
   21990:	10c5883a 	add	r2,r2,r3
   21994:	00c000f4 	movhi	r3,3
   21998:	18a4ad15 	stw	r2,-27980(r3)
   2199c:	bf0001cc 	andi	fp,r23,7
   219a0:	e000c626 	beq	fp,zero,21cbc <_malloc_r+0x688>
   219a4:	bf2fc83a 	sub	r23,r23,fp
   219a8:	bdc00204 	addi	r23,r23,8
   219ac:	05040204 	movi	r20,4104
   219b0:	a729c83a 	sub	r20,r20,fp
   219b4:	bd6b883a 	add	r21,r23,r21
   219b8:	a569c83a 	sub	r20,r20,r21
   219bc:	a503ffcc 	andi	r20,r20,4095
   219c0:	a00b883a 	mov	r5,r20
   219c4:	9009883a 	mov	r4,r18
   219c8:	00226740 	call	22674 <_sbrk_r>
   219cc:	10ffffe0 	cmpeqi	r3,r2,-1
   219d0:	1800f41e 	bne	r3,zero,21da4 <_malloc_r+0x770>
   219d4:	15c5c83a 	sub	r2,r2,r23
   219d8:	152b883a 	add	r21,r2,r20
   219dc:	008000f4 	movhi	r2,3
   219e0:	10a4ad17 	ldw	r2,-27980(r2)
   219e4:	9dc00215 	stw	r23,8(r19)
   219e8:	ad400054 	ori	r21,r21,1
   219ec:	a0a9883a 	add	r20,r20,r2
   219f0:	008000f4 	movhi	r2,3
   219f4:	1524ad15 	stw	r20,-27980(r2)
   219f8:	bd400115 	stw	r21,4(r23)
   219fc:	84c0d626 	beq	r16,r19,21d58 <_malloc_r+0x724>
   21a00:	b0800428 	cmpgeui	r2,r22,16
   21a04:	1000d626 	beq	r2,zero,21d60 <_malloc_r+0x72c>
   21a08:	80c00117 	ldw	r3,4(r16)
   21a0c:	013ffe04 	movi	r4,-8
   21a10:	b0bffd04 	addi	r2,r22,-12
   21a14:	1104703a 	and	r2,r2,r4
   21a18:	18c0004c 	andi	r3,r3,1
   21a1c:	1886b03a 	or	r3,r3,r2
   21a20:	80c00115 	stw	r3,4(r16)
   21a24:	01000144 	movi	r4,5
   21a28:	8087883a 	add	r3,r16,r2
   21a2c:	19000115 	stw	r4,4(r3)
   21a30:	19000215 	stw	r4,8(r3)
   21a34:	10800428 	cmpgeui	r2,r2,16
   21a38:	1000df1e 	bne	r2,zero,21db8 <_malloc_r+0x784>
   21a3c:	bd400117 	ldw	r21,4(r23)
   21a40:	b821883a 	mov	r16,r23
   21a44:	008000f4 	movhi	r2,3
   21a48:	10a4a217 	ldw	r2,-28024(r2)
   21a4c:	1500022e 	bgeu	r2,r20,21a58 <_malloc_r+0x424>
   21a50:	008000f4 	movhi	r2,3
   21a54:	1524a215 	stw	r20,-28024(r2)
   21a58:	008000f4 	movhi	r2,3
   21a5c:	10a4a117 	ldw	r2,-28028(r2)
   21a60:	15006a2e 	bgeu	r2,r20,21c0c <_malloc_r+0x5d8>
   21a64:	008000f4 	movhi	r2,3
   21a68:	1524a115 	stw	r20,-28028(r2)
   21a6c:	00006706 	br	21c0c <_malloc_r+0x5d8>
   21a70:	88c00054 	ori	r3,r17,1
   21a74:	80c00115 	stw	r3,4(r16)
   21a78:	8463883a 	add	r17,r16,r17
   21a7c:	10800054 	ori	r2,r2,1
   21a80:	9c400215 	stw	r17,8(r19)
   21a84:	88800115 	stw	r2,4(r17)
   21a88:	9009883a 	mov	r4,r18
   21a8c:	0023c100 	call	23c10 <__malloc_unlock>
   21a90:	80800204 	addi	r2,r16,8
   21a94:	003f7d06 	br	2188c <_malloc_r+0x258>
   21a98:	81000317 	ldw	r4,12(r16)
   21a9c:	003f0406 	br	216b0 <_malloc_r+0x7c>
   21aa0:	1006d27a 	srli	r3,r2,9
   21aa4:	19000168 	cmpgeui	r4,r3,5
   21aa8:	20005026 	beq	r4,zero,21bec <_malloc_r+0x5b8>
   21aac:	19000568 	cmpgeui	r4,r3,21
   21ab0:	20008c1e 	bne	r4,zero,21ce4 <_malloc_r+0x6b0>
   21ab4:	19401704 	addi	r5,r3,92
   21ab8:	280a90fa 	slli	r5,r5,3
   21abc:	190016c4 	addi	r4,r3,91
   21ac0:	994b883a 	add	r5,r19,r5
   21ac4:	28c00017 	ldw	r3,0(r5)
   21ac8:	297ffe04 	addi	r5,r5,-8
   21acc:	28c07426 	beq	r5,r3,21ca0 <_malloc_r+0x66c>
   21ad0:	01bfff04 	movi	r6,-4
   21ad4:	19000117 	ldw	r4,4(r3)
   21ad8:	2188703a 	and	r4,r4,r6
   21adc:	1100022e 	bgeu	r2,r4,21ae8 <_malloc_r+0x4b4>
   21ae0:	18c00217 	ldw	r3,8(r3)
   21ae4:	28fffb1e 	bne	r5,r3,21ad4 <_malloc_r+0x4a0>
   21ae8:	19400317 	ldw	r5,12(r3)
   21aec:	98800117 	ldw	r2,4(r19)
   21af0:	81400315 	stw	r5,12(r16)
   21af4:	80c00215 	stw	r3,8(r16)
   21af8:	2c000215 	stw	r16,8(r5)
   21afc:	1c000315 	stw	r16,12(r3)
   21b00:	003f3506 	br	217d8 <_malloc_r+0x1a4>
   21b04:	10c00568 	cmpgeui	r3,r2,21
   21b08:	18004a26 	beq	r3,zero,21c34 <_malloc_r+0x600>
   21b0c:	10c01568 	cmpgeui	r3,r2,85
   21b10:	18007b1e 	bne	r3,zero,21d00 <_malloc_r+0x6cc>
   21b14:	8804d33a 	srli	r2,r17,12
   21b18:	11c01bc4 	addi	r7,r2,111
   21b1c:	380890fa 	slli	r4,r7,3
   21b20:	12001b84 	addi	r8,r2,110
   21b24:	003efc06 	br	21718 <_malloc_r+0xe4>
   21b28:	63000044 	addi	r12,r12,1
   21b2c:	608000cc 	andi	r2,r12,3
   21b30:	42000204 	addi	r8,r8,8
   21b34:	103f3d1e 	bne	r2,zero,2182c <_malloc_r+0x1f8>
   21b38:	00004506 	br	21c50 <_malloc_r+0x61c>
   21b3c:	81000217 	ldw	r4,8(r16)
   21b40:	89800054 	ori	r6,r17,1
   21b44:	81800115 	stw	r6,4(r16)
   21b48:	20800315 	stw	r2,12(r4)
   21b4c:	11000215 	stw	r4,8(r2)
   21b50:	8463883a 	add	r17,r16,r17
   21b54:	9c400515 	stw	r17,20(r19)
   21b58:	9c400415 	stw	r17,16(r19)
   21b5c:	28800054 	ori	r2,r5,1
   21b60:	88800115 	stw	r2,4(r17)
   21b64:	8a400315 	stw	r9,12(r17)
   21b68:	8a400215 	stw	r9,8(r17)
   21b6c:	80c7883a 	add	r3,r16,r3
   21b70:	19400015 	stw	r5,0(r3)
   21b74:	9009883a 	mov	r4,r18
   21b78:	0023c100 	call	23c10 <__malloc_unlock>
   21b7c:	80800204 	addi	r2,r16,8
   21b80:	003f4206 	br	2188c <_malloc_r+0x258>
   21b84:	880ed0fa 	srli	r7,r17,3
   21b88:	88800204 	addi	r2,r17,8
   21b8c:	003ebe06 	br	21688 <_malloc_r+0x54>
   21b90:	8085883a 	add	r2,r16,r2
   21b94:	10c00117 	ldw	r3,4(r2)
   21b98:	9009883a 	mov	r4,r18
   21b9c:	18c00054 	ori	r3,r3,1
   21ba0:	10c00115 	stw	r3,4(r2)
   21ba4:	0023c100 	call	23c10 <__malloc_unlock>
   21ba8:	80800204 	addi	r2,r16,8
   21bac:	003f3706 	br	2188c <_malloc_r+0x258>
   21bb0:	89000054 	ori	r4,r17,1
   21bb4:	81000115 	stw	r4,4(r16)
   21bb8:	8463883a 	add	r17,r16,r17
   21bbc:	9c400515 	stw	r17,20(r19)
   21bc0:	9c400415 	stw	r17,16(r19)
   21bc4:	19000054 	ori	r4,r3,1
   21bc8:	89000115 	stw	r4,4(r17)
   21bcc:	8085883a 	add	r2,r16,r2
   21bd0:	8a400315 	stw	r9,12(r17)
   21bd4:	8a400215 	stw	r9,8(r17)
   21bd8:	10c00015 	stw	r3,0(r2)
   21bdc:	9009883a 	mov	r4,r18
   21be0:	0023c100 	call	23c10 <__malloc_unlock>
   21be4:	80800204 	addi	r2,r16,8
   21be8:	003f2806 	br	2188c <_malloc_r+0x258>
   21bec:	1006d1ba 	srli	r3,r2,6
   21bf0:	19400e44 	addi	r5,r3,57
   21bf4:	280a90fa 	slli	r5,r5,3
   21bf8:	19000e04 	addi	r4,r3,56
   21bfc:	003fb006 	br	21ac0 <_malloc_r+0x48c>
   21c00:	84c04626 	beq	r16,r19,21d1c <_malloc_r+0x6e8>
   21c04:	9c000217 	ldw	r16,8(r19)
   21c08:	85400117 	ldw	r21,4(r16)
   21c0c:	00bfff04 	movi	r2,-4
   21c10:	a8aa703a 	and	r21,r21,r2
   21c14:	ac45c83a 	sub	r2,r21,r17
   21c18:	ac400236 	bltu	r21,r17,21c24 <_malloc_r+0x5f0>
   21c1c:	10c00408 	cmpgei	r3,r2,16
   21c20:	183f931e 	bne	r3,zero,21a70 <_malloc_r+0x43c>
   21c24:	9009883a 	mov	r4,r18
   21c28:	0023c100 	call	23c10 <__malloc_unlock>
   21c2c:	0005883a 	mov	r2,zero
   21c30:	003f1606 	br	2188c <_malloc_r+0x258>
   21c34:	11c01704 	addi	r7,r2,92
   21c38:	380890fa 	slli	r4,r7,3
   21c3c:	120016c4 	addi	r8,r2,91
   21c40:	003eb506 	br	21718 <_malloc_r+0xe4>
   21c44:	58800217 	ldw	r2,8(r11)
   21c48:	39ffffc4 	addi	r7,r7,-1
   21c4c:	12c0701e 	bne	r2,r11,21e10 <_malloc_r+0x7dc>
   21c50:	388000cc 	andi	r2,r7,3
   21c54:	5afffe04 	addi	r11,r11,-8
   21c58:	103ffa1e 	bne	r2,zero,21c44 <_malloc_r+0x610>
   21c5c:	98c00117 	ldw	r3,4(r19)
   21c60:	0104303a 	nor	r2,zero,r4
   21c64:	10c4703a 	and	r2,r2,r3
   21c68:	98800115 	stw	r2,4(r19)
   21c6c:	2109883a 	add	r4,r4,r4
   21c70:	113f2236 	bltu	r2,r4,218fc <_malloc_r+0x2c8>
   21c74:	203f2126 	beq	r4,zero,218fc <_malloc_r+0x2c8>
   21c78:	2086703a 	and	r3,r4,r2
   21c7c:	1800041e 	bne	r3,zero,21c90 <_malloc_r+0x65c>
   21c80:	2109883a 	add	r4,r4,r4
   21c84:	2086703a 	and	r3,r4,r2
   21c88:	63000104 	addi	r12,r12,4
   21c8c:	183ffc26 	beq	r3,zero,21c80 <_malloc_r+0x64c>
   21c90:	600f883a 	mov	r7,r12
   21c94:	003ee106 	br	2181c <_malloc_r+0x1e8>
   21c98:	ad400404 	addi	r21,r21,16
   21c9c:	003f2a06 	br	21948 <_malloc_r+0x314>
   21ca0:	2009d0ba 	srai	r4,r4,2
   21ca4:	00800044 	movi	r2,1
   21ca8:	99800117 	ldw	r6,4(r19)
   21cac:	1104983a 	sll	r2,r2,r4
   21cb0:	1184b03a 	or	r2,r2,r6
   21cb4:	98800115 	stw	r2,4(r19)
   21cb8:	003f8d06 	br	21af0 <_malloc_r+0x4bc>
   21cbc:	bd69883a 	add	r20,r23,r21
   21cc0:	0529c83a 	sub	r20,zero,r20
   21cc4:	a503ffcc 	andi	r20,r20,4095
   21cc8:	a00b883a 	mov	r5,r20
   21ccc:	9009883a 	mov	r4,r18
   21cd0:	00226740 	call	22674 <_sbrk_r>
   21cd4:	10ffffe0 	cmpeqi	r3,r2,-1
   21cd8:	183f3e26 	beq	r3,zero,219d4 <_malloc_r+0x3a0>
   21cdc:	0029883a 	mov	r20,zero
   21ce0:	003f3e06 	br	219dc <_malloc_r+0x3a8>
   21ce4:	19001568 	cmpgeui	r4,r3,85
   21ce8:	2000201e 	bne	r4,zero,21d6c <_malloc_r+0x738>
   21cec:	1006d33a 	srli	r3,r2,12
   21cf0:	19401bc4 	addi	r5,r3,111
   21cf4:	280a90fa 	slli	r5,r5,3
   21cf8:	19001b84 	addi	r4,r3,110
   21cfc:	003f7006 	br	21ac0 <_malloc_r+0x48c>
   21d00:	10c05568 	cmpgeui	r3,r2,341
   21d04:	1800201e 	bne	r3,zero,21d88 <_malloc_r+0x754>
   21d08:	8804d3fa 	srli	r2,r17,15
   21d0c:	11c01e04 	addi	r7,r2,120
   21d10:	380890fa 	slli	r4,r7,3
   21d14:	12001dc4 	addi	r8,r2,119
   21d18:	003e7f06 	br	21718 <_malloc_r+0xe4>
   21d1c:	008000f4 	movhi	r2,3
   21d20:	10e4ad17 	ldw	r3,-27980(r2)
   21d24:	a8c7883a 	add	r3,r21,r3
   21d28:	10e4ad15 	stw	r3,-27980(r2)
   21d2c:	003f1306 	br	2197c <_malloc_r+0x348>
   21d30:	e083ffcc 	andi	r2,fp,4095
   21d34:	103f111e 	bne	r2,zero,2197c <_malloc_r+0x348>
   21d38:	9c000217 	ldw	r16,8(r19)
   21d3c:	b56b883a 	add	r21,r22,r21
   21d40:	ad400054 	ori	r21,r21,1
   21d44:	85400115 	stw	r21,4(r16)
   21d48:	003f3e06 	br	21a44 <_malloc_r+0x410>
   21d4c:	008000b4 	movhi	r2,2
   21d50:	15ddf815 	stw	r23,30688(r2)
   21d54:	003f1106 	br	2199c <_malloc_r+0x368>
   21d58:	b821883a 	mov	r16,r23
   21d5c:	003f3906 	br	21a44 <_malloc_r+0x410>
   21d60:	00800044 	movi	r2,1
   21d64:	b8800115 	stw	r2,4(r23)
   21d68:	003fae06 	br	21c24 <_malloc_r+0x5f0>
   21d6c:	19005568 	cmpgeui	r4,r3,341
   21d70:	2000191e 	bne	r4,zero,21dd8 <_malloc_r+0x7a4>
   21d74:	1006d3fa 	srli	r3,r2,15
   21d78:	19401e04 	addi	r5,r3,120
   21d7c:	280a90fa 	slli	r5,r5,3
   21d80:	19001dc4 	addi	r4,r3,119
   21d84:	003f4e06 	br	21ac0 <_malloc_r+0x48c>
   21d88:	10815568 	cmpgeui	r2,r2,1365
   21d8c:	1000191e 	bne	r2,zero,21df4 <_malloc_r+0x7c0>
   21d90:	8804d4ba 	srli	r2,r17,18
   21d94:	11c01f44 	addi	r7,r2,125
   21d98:	380890fa 	slli	r4,r7,3
   21d9c:	12001f04 	addi	r8,r2,124
   21da0:	003e5d06 	br	21718 <_malloc_r+0xe4>
   21da4:	e73ffe04 	addi	fp,fp,-8
   21da8:	af2b883a 	add	r21,r21,fp
   21dac:	adebc83a 	sub	r21,r21,r23
   21db0:	0029883a 	mov	r20,zero
   21db4:	003f0906 	br	219dc <_malloc_r+0x3a8>
   21db8:	81400204 	addi	r5,r16,8
   21dbc:	9009883a 	mov	r4,r18
   21dc0:	0022f5c0 	call	22f5c <_free_r>
   21dc4:	9c000217 	ldw	r16,8(r19)
   21dc8:	008000f4 	movhi	r2,3
   21dcc:	1524ad17 	ldw	r20,-27980(r2)
   21dd0:	85400117 	ldw	r21,4(r16)
   21dd4:	003f1b06 	br	21a44 <_malloc_r+0x410>
   21dd8:	18c15568 	cmpgeui	r3,r3,1365
   21ddc:	1800091e 	bne	r3,zero,21e04 <_malloc_r+0x7d0>
   21de0:	1006d4ba 	srli	r3,r2,18
   21de4:	19401f44 	addi	r5,r3,125
   21de8:	280a90fa 	slli	r5,r5,3
   21dec:	19001f04 	addi	r4,r3,124
   21df0:	003f3306 	br	21ac0 <_malloc_r+0x48c>
   21df4:	0100fe04 	movi	r4,1016
   21df8:	01c01fc4 	movi	r7,127
   21dfc:	02001f84 	movi	r8,126
   21e00:	003e4506 	br	21718 <_malloc_r+0xe4>
   21e04:	0140fe04 	movi	r5,1016
   21e08:	01001f84 	movi	r4,126
   21e0c:	003f2c06 	br	21ac0 <_malloc_r+0x48c>
   21e10:	98800117 	ldw	r2,4(r19)
   21e14:	003f9506 	br	21c6c <_malloc_r+0x638>

00021e18 <memchr>:
   21e18:	208000cc 	andi	r2,r4,3
   21e1c:	280f883a 	mov	r7,r5
   21e20:	10000e26 	beq	r2,zero,21e5c <memchr+0x44>
   21e24:	30bfffc4 	addi	r2,r6,-1
   21e28:	30001726 	beq	r6,zero,21e88 <memchr+0x70>
   21e2c:	29803fcc 	andi	r6,r5,255
   21e30:	00000606 	br	21e4c <memchr+0x34>
   21e34:	21000044 	addi	r4,r4,1
   21e38:	20c000cc 	andi	r3,r4,3
   21e3c:	18000826 	beq	r3,zero,21e60 <memchr+0x48>
   21e40:	10bfffc4 	addi	r2,r2,-1
   21e44:	10ffffe0 	cmpeqi	r3,r2,-1
   21e48:	18000f1e 	bne	r3,zero,21e88 <memchr+0x70>
   21e4c:	20c00003 	ldbu	r3,0(r4)
   21e50:	19bff81e 	bne	r3,r6,21e34 <memchr+0x1c>
   21e54:	2005883a 	mov	r2,r4
   21e58:	f800283a 	ret
   21e5c:	3005883a 	mov	r2,r6
   21e60:	10c00130 	cmpltui	r3,r2,4
   21e64:	18000a26 	beq	r3,zero,21e90 <memchr+0x78>
   21e68:	10000726 	beq	r2,zero,21e88 <memchr+0x70>
   21e6c:	2087883a 	add	r3,r4,r2
   21e70:	39803fcc 	andi	r6,r7,255
   21e74:	2005883a 	mov	r2,r4
   21e78:	11000003 	ldbu	r4,0(r2)
   21e7c:	21800326 	beq	r4,r6,21e8c <memchr+0x74>
   21e80:	10800044 	addi	r2,r2,1
   21e84:	18bffc1e 	bne	r3,r2,21e78 <memchr+0x60>
   21e88:	0005883a 	mov	r2,zero
   21e8c:	f800283a 	ret
   21e90:	29403fcc 	andi	r5,r5,255
   21e94:	2806923a 	slli	r3,r5,8
   21e98:	027fbff4 	movhi	r9,65279
   21e9c:	02202074 	movhi	r8,32897
   21ea0:	1946b03a 	or	r3,r3,r5
   21ea4:	180c943a 	slli	r6,r3,16
   21ea8:	4a7fbfc4 	addi	r9,r9,-257
   21eac:	42202004 	addi	r8,r8,-32640
   21eb0:	30ccb03a 	or	r6,r6,r3
   21eb4:	20c00017 	ldw	r3,0(r4)
   21eb8:	30c6f03a 	xor	r3,r6,r3
   21ebc:	1a4b883a 	add	r5,r3,r9
   21ec0:	00c6303a 	nor	r3,zero,r3
   21ec4:	28c6703a 	and	r3,r5,r3
   21ec8:	1a06703a 	and	r3,r3,r8
   21ecc:	183fe71e 	bne	r3,zero,21e6c <memchr+0x54>
   21ed0:	10bfff04 	addi	r2,r2,-4
   21ed4:	10c00128 	cmpgeui	r3,r2,4
   21ed8:	21000104 	addi	r4,r4,4
   21edc:	183ff51e 	bne	r3,zero,21eb4 <memchr+0x9c>
   21ee0:	003fe106 	br	21e68 <memchr+0x50>

00021ee4 <memmove>:
   21ee4:	2005883a 	mov	r2,r4
   21ee8:	29000a2e 	bgeu	r5,r4,21f14 <memmove+0x30>
   21eec:	2989883a 	add	r4,r5,r6
   21ef0:	1100082e 	bgeu	r2,r4,21f14 <memmove+0x30>
   21ef4:	1187883a 	add	r3,r2,r6
   21ef8:	30003e26 	beq	r6,zero,21ff4 <memmove+0x110>
   21efc:	217fffc3 	ldbu	r5,-1(r4)
   21f00:	18ffffc4 	addi	r3,r3,-1
   21f04:	213fffc4 	addi	r4,r4,-1
   21f08:	19400005 	stb	r5,0(r3)
   21f0c:	10fffb1e 	bne	r2,r3,21efc <memmove+0x18>
   21f10:	f800283a 	ret
   21f14:	30c00430 	cmpltui	r3,r6,16
   21f18:	18000b26 	beq	r3,zero,21f48 <memmove+0x64>
   21f1c:	1007883a 	mov	r3,r2
   21f20:	31ffffc4 	addi	r7,r6,-1
   21f24:	30003726 	beq	r6,zero,22004 <memmove+0x120>
   21f28:	39c00044 	addi	r7,r7,1
   21f2c:	29cf883a 	add	r7,r5,r7
   21f30:	29800003 	ldbu	r6,0(r5)
   21f34:	29400044 	addi	r5,r5,1
   21f38:	18c00044 	addi	r3,r3,1
   21f3c:	19bfffc5 	stb	r6,-1(r3)
   21f40:	29fffb1e 	bne	r5,r7,21f30 <memmove+0x4c>
   21f44:	f800283a 	ret
   21f48:	1146b03a 	or	r3,r2,r5
   21f4c:	18c000cc 	andi	r3,r3,3
   21f50:	1800291e 	bne	r3,zero,21ff8 <memmove+0x114>
   21f54:	327ffc04 	addi	r9,r6,-16
   21f58:	4812d13a 	srli	r9,r9,4
   21f5c:	280f883a 	mov	r7,r5
   21f60:	1007883a 	mov	r3,r2
   21f64:	4a400044 	addi	r9,r9,1
   21f68:	4812913a 	slli	r9,r9,4
   21f6c:	1251883a 	add	r8,r2,r9
   21f70:	39000017 	ldw	r4,0(r7)
   21f74:	39c00404 	addi	r7,r7,16
   21f78:	18c00404 	addi	r3,r3,16
   21f7c:	193ffc15 	stw	r4,-16(r3)
   21f80:	393ffd17 	ldw	r4,-12(r7)
   21f84:	193ffd15 	stw	r4,-12(r3)
   21f88:	393ffe17 	ldw	r4,-8(r7)
   21f8c:	193ffe15 	stw	r4,-8(r3)
   21f90:	393fff17 	ldw	r4,-4(r7)
   21f94:	193fff15 	stw	r4,-4(r3)
   21f98:	40fff51e 	bne	r8,r3,21f70 <memmove+0x8c>
   21f9c:	3100030c 	andi	r4,r6,12
   21fa0:	2a4b883a 	add	r5,r5,r9
   21fa4:	320003cc 	andi	r8,r6,15
   21fa8:	20001726 	beq	r4,zero,22008 <memmove+0x124>
   21fac:	2813883a 	mov	r9,r5
   21fb0:	180f883a 	mov	r7,r3
   21fb4:	4a800017 	ldw	r10,0(r9)
   21fb8:	39c00104 	addi	r7,r7,4
   21fbc:	41c9c83a 	sub	r4,r8,r7
   21fc0:	1909883a 	add	r4,r3,r4
   21fc4:	21000128 	cmpgeui	r4,r4,4
   21fc8:	3abfff15 	stw	r10,-4(r7)
   21fcc:	4a400104 	addi	r9,r9,4
   21fd0:	203ff81e 	bne	r4,zero,21fb4 <memmove+0xd0>
   21fd4:	413fff04 	addi	r4,r8,-4
   21fd8:	2008d0ba 	srli	r4,r4,2
   21fdc:	318000cc 	andi	r6,r6,3
   21fe0:	21000044 	addi	r4,r4,1
   21fe4:	200890ba 	slli	r4,r4,2
   21fe8:	1907883a 	add	r3,r3,r4
   21fec:	290b883a 	add	r5,r5,r4
   21ff0:	003fcb06 	br	21f20 <memmove+0x3c>
   21ff4:	f800283a 	ret
   21ff8:	31ffffc4 	addi	r7,r6,-1
   21ffc:	1007883a 	mov	r3,r2
   22000:	003fc906 	br	21f28 <memmove+0x44>
   22004:	f800283a 	ret
   22008:	400d883a 	mov	r6,r8
   2200c:	003fc406 	br	21f20 <memmove+0x3c>

00022010 <memset>:
   22010:	20c000cc 	andi	r3,r4,3
   22014:	2005883a 	mov	r2,r4
   22018:	18003726 	beq	r3,zero,220f8 <memset+0xe8>
   2201c:	31ffffc4 	addi	r7,r6,-1
   22020:	30003326 	beq	r6,zero,220f0 <memset+0xe0>
   22024:	2811883a 	mov	r8,r5
   22028:	2007883a 	mov	r3,r4
   2202c:	00000306 	br	2203c <memset+0x2c>
   22030:	39ffffc4 	addi	r7,r7,-1
   22034:	39bfffe0 	cmpeqi	r6,r7,-1
   22038:	30002d1e 	bne	r6,zero,220f0 <memset+0xe0>
   2203c:	18c00044 	addi	r3,r3,1
   22040:	198000cc 	andi	r6,r3,3
   22044:	1a3fffc5 	stb	r8,-1(r3)
   22048:	303ff91e 	bne	r6,zero,22030 <memset+0x20>
   2204c:	39000128 	cmpgeui	r4,r7,4
   22050:	20002226 	beq	r4,zero,220dc <memset+0xcc>
   22054:	29803fcc 	andi	r6,r5,255
   22058:	3008923a 	slli	r4,r6,8
   2205c:	3a000430 	cmpltui	r8,r7,16
   22060:	2188b03a 	or	r4,r4,r6
   22064:	200c943a 	slli	r6,r4,16
   22068:	310cb03a 	or	r6,r6,r4
   2206c:	40000e1e 	bne	r8,zero,220a8 <memset+0x98>
   22070:	393ffc04 	addi	r4,r7,-16
   22074:	2008d13a 	srli	r4,r4,4
   22078:	21000044 	addi	r4,r4,1
   2207c:	2008913a 	slli	r4,r4,4
   22080:	1909883a 	add	r4,r3,r4
   22084:	19800015 	stw	r6,0(r3)
   22088:	19800115 	stw	r6,4(r3)
   2208c:	19800215 	stw	r6,8(r3)
   22090:	19800315 	stw	r6,12(r3)
   22094:	18c00404 	addi	r3,r3,16
   22098:	20fffa1e 	bne	r4,r3,22084 <memset+0x74>
   2209c:	3900030c 	andi	r4,r7,12
   220a0:	39c003cc 	andi	r7,r7,15
   220a4:	20000d26 	beq	r4,zero,220dc <memset+0xcc>
   220a8:	1811883a 	mov	r8,r3
   220ac:	42000104 	addi	r8,r8,4
   220b0:	3a09c83a 	sub	r4,r7,r8
   220b4:	1909883a 	add	r4,r3,r4
   220b8:	21000128 	cmpgeui	r4,r4,4
   220bc:	41bfff15 	stw	r6,-4(r8)
   220c0:	203ffa1e 	bne	r4,zero,220ac <memset+0x9c>
   220c4:	393fff04 	addi	r4,r7,-4
   220c8:	2008d0ba 	srli	r4,r4,2
   220cc:	39c000cc 	andi	r7,r7,3
   220d0:	21000044 	addi	r4,r4,1
   220d4:	200890ba 	slli	r4,r4,2
   220d8:	1907883a 	add	r3,r3,r4
   220dc:	38000526 	beq	r7,zero,220f4 <memset+0xe4>
   220e0:	19cf883a 	add	r7,r3,r7
   220e4:	18c00044 	addi	r3,r3,1
   220e8:	197fffc5 	stb	r5,-1(r3)
   220ec:	38fffd1e 	bne	r7,r3,220e4 <memset+0xd4>
   220f0:	f800283a 	ret
   220f4:	f800283a 	ret
   220f8:	2007883a 	mov	r3,r4
   220fc:	300f883a 	mov	r7,r6
   22100:	003fd206 	br	2204c <memset+0x3c>

00022104 <_realloc_r>:
   22104:	defff504 	addi	sp,sp,-44
   22108:	dcc00415 	stw	r19,16(sp)
   2210c:	dfc00a15 	stw	ra,40(sp)
   22110:	df000915 	stw	fp,36(sp)
   22114:	ddc00815 	stw	r23,32(sp)
   22118:	dd800715 	stw	r22,28(sp)
   2211c:	dd400615 	stw	r21,24(sp)
   22120:	dd000515 	stw	r20,20(sp)
   22124:	dc800315 	stw	r18,12(sp)
   22128:	dc400215 	stw	r17,8(sp)
   2212c:	dc000115 	stw	r16,4(sp)
   22130:	3027883a 	mov	r19,r6
   22134:	28008b26 	beq	r5,zero,22364 <_realloc_r+0x260>
   22138:	2821883a 	mov	r16,r5
   2213c:	202b883a 	mov	r21,r4
   22140:	9c4002c4 	addi	r17,r19,11
   22144:	0023bec0 	call	23bec <__malloc_lock>
   22148:	888005f0 	cmpltui	r2,r17,23
   2214c:	84bfff17 	ldw	r18,-4(r16)
   22150:	1000511e 	bne	r2,zero,22298 <_realloc_r+0x194>
   22154:	00bffe04 	movi	r2,-8
   22158:	88a2703a 	and	r17,r17,r2
   2215c:	880b883a 	mov	r5,r17
   22160:	88005016 	blt	r17,zero,222a4 <_realloc_r+0x1a0>
   22164:	8cc04f36 	bltu	r17,r19,222a4 <_realloc_r+0x1a0>
   22168:	00ffff04 	movi	r3,-4
   2216c:	90e8703a 	and	r20,r18,r3
   22170:	85bffe04 	addi	r22,r16,-8
   22174:	a1403a0e 	bge	r20,r5,22260 <_realloc_r+0x15c>
   22178:	070000b4 	movhi	fp,2
   2217c:	e7187104 	addi	fp,fp,25028
   22180:	e2000217 	ldw	r8,8(fp)
   22184:	b50d883a 	add	r6,r22,r20
   22188:	30800117 	ldw	r2,4(r6)
   2218c:	41808e26 	beq	r8,r6,223c8 <_realloc_r+0x2c4>
   22190:	013fff84 	movi	r4,-2
   22194:	1108703a 	and	r4,r2,r4
   22198:	3109883a 	add	r4,r6,r4
   2219c:	21000117 	ldw	r4,4(r4)
   221a0:	2100004c 	andi	r4,r4,1
   221a4:	20004f1e 	bne	r4,zero,222e4 <_realloc_r+0x1e0>
   221a8:	10c4703a 	and	r2,r2,r3
   221ac:	a087883a 	add	r3,r20,r2
   221b0:	1940bd0e 	bge	r3,r5,224a8 <_realloc_r+0x3a4>
   221b4:	9480004c 	andi	r18,r18,1
   221b8:	90004c1e 	bne	r18,zero,222ec <_realloc_r+0x1e8>
   221bc:	81fffe17 	ldw	r7,-8(r16)
   221c0:	00ffff04 	movi	r3,-4
   221c4:	b1cfc83a 	sub	r7,r22,r7
   221c8:	3c800117 	ldw	r18,4(r7)
   221cc:	90c6703a 	and	r3,r18,r3
   221d0:	30000426 	beq	r6,zero,221e4 <_realloc_r+0xe0>
   221d4:	a0c9883a 	add	r4,r20,r3
   221d8:	20af883a 	add	r23,r4,r2
   221dc:	4180bc26 	beq	r8,r6,224d0 <_realloc_r+0x3cc>
   221e0:	b940930e 	bge	r23,r5,22430 <_realloc_r+0x32c>
   221e4:	38004126 	beq	r7,zero,222ec <_realloc_r+0x1e8>
   221e8:	a0ef883a 	add	r23,r20,r3
   221ec:	b9403f16 	blt	r23,r5,222ec <_realloc_r+0x1e8>
   221f0:	38800317 	ldw	r2,12(r7)
   221f4:	38c00217 	ldw	r3,8(r7)
   221f8:	a1bfff04 	addi	r6,r20,-4
   221fc:	31400968 	cmpgeui	r5,r6,37
   22200:	18800315 	stw	r2,12(r3)
   22204:	10c00215 	stw	r3,8(r2)
   22208:	39000204 	addi	r4,r7,8
   2220c:	2800e11e 	bne	r5,zero,22594 <_realloc_r+0x490>
   22210:	30800530 	cmpltui	r2,r6,20
   22214:	1000dd1e 	bne	r2,zero,2258c <_realloc_r+0x488>
   22218:	80c00017 	ldw	r3,0(r16)
   2221c:	30800728 	cmpgeui	r2,r6,28
   22220:	38c00215 	stw	r3,8(r7)
   22224:	80c00117 	ldw	r3,4(r16)
   22228:	38c00315 	stw	r3,12(r7)
   2222c:	1000e21e 	bne	r2,zero,225b8 <_realloc_r+0x4b4>
   22230:	84000204 	addi	r16,r16,8
   22234:	38800404 	addi	r2,r7,16
   22238:	80c00017 	ldw	r3,0(r16)
   2223c:	b829883a 	mov	r20,r23
   22240:	382d883a 	mov	r22,r7
   22244:	10c00015 	stw	r3,0(r2)
   22248:	80c00117 	ldw	r3,4(r16)
   2224c:	10c00115 	stw	r3,4(r2)
   22250:	80c00217 	ldw	r3,8(r16)
   22254:	2021883a 	mov	r16,r4
   22258:	10c00215 	stw	r3,8(r2)
   2225c:	3c800117 	ldw	r18,4(r7)
   22260:	a447c83a 	sub	r3,r20,r17
   22264:	19000430 	cmpltui	r4,r3,16
   22268:	9480004c 	andi	r18,r18,1
   2226c:	b505883a 	add	r2,r22,r20
   22270:	20004926 	beq	r4,zero,22398 <_realloc_r+0x294>
   22274:	a4a4b03a 	or	r18,r20,r18
   22278:	b4800115 	stw	r18,4(r22)
   2227c:	10c00117 	ldw	r3,4(r2)
   22280:	18c00054 	ori	r3,r3,1
   22284:	10c00115 	stw	r3,4(r2)
   22288:	a809883a 	mov	r4,r21
   2228c:	0023c100 	call	23c10 <__malloc_unlock>
   22290:	8027883a 	mov	r19,r16
   22294:	00000606 	br	222b0 <_realloc_r+0x1ac>
   22298:	04400404 	movi	r17,16
   2229c:	01400404 	movi	r5,16
   222a0:	8cffb12e 	bgeu	r17,r19,22168 <_realloc_r+0x64>
   222a4:	00800304 	movi	r2,12
   222a8:	a8800015 	stw	r2,0(r21)
   222ac:	0027883a 	mov	r19,zero
   222b0:	9805883a 	mov	r2,r19
   222b4:	dfc00a17 	ldw	ra,40(sp)
   222b8:	df000917 	ldw	fp,36(sp)
   222bc:	ddc00817 	ldw	r23,32(sp)
   222c0:	dd800717 	ldw	r22,28(sp)
   222c4:	dd400617 	ldw	r21,24(sp)
   222c8:	dd000517 	ldw	r20,20(sp)
   222cc:	dcc00417 	ldw	r19,16(sp)
   222d0:	dc800317 	ldw	r18,12(sp)
   222d4:	dc400217 	ldw	r17,8(sp)
   222d8:	dc000117 	ldw	r16,4(sp)
   222dc:	dec00b04 	addi	sp,sp,44
   222e0:	f800283a 	ret
   222e4:	9480004c 	andi	r18,r18,1
   222e8:	90006a26 	beq	r18,zero,22494 <_realloc_r+0x390>
   222ec:	980b883a 	mov	r5,r19
   222f0:	a809883a 	mov	r4,r21
   222f4:	00216340 	call	21634 <_malloc_r>
   222f8:	1027883a 	mov	r19,r2
   222fc:	10001626 	beq	r2,zero,22358 <_realloc_r+0x254>
   22300:	84bfff17 	ldw	r18,-4(r16)
   22304:	10fffe04 	addi	r3,r2,-8
   22308:	00bfff84 	movi	r2,-2
   2230c:	9084703a 	and	r2,r18,r2
   22310:	b085883a 	add	r2,r22,r2
   22314:	10c05a26 	beq	r2,r3,22480 <_realloc_r+0x37c>
   22318:	a1bfff04 	addi	r6,r20,-4
   2231c:	30800968 	cmpgeui	r2,r6,37
   22320:	1000671e 	bne	r2,zero,224c0 <_realloc_r+0x3bc>
   22324:	30800530 	cmpltui	r2,r6,20
   22328:	10003826 	beq	r2,zero,2240c <_realloc_r+0x308>
   2232c:	9805883a 	mov	r2,r19
   22330:	8007883a 	mov	r3,r16
   22334:	19000017 	ldw	r4,0(r3)
   22338:	11000015 	stw	r4,0(r2)
   2233c:	19000117 	ldw	r4,4(r3)
   22340:	11000115 	stw	r4,4(r2)
   22344:	18c00217 	ldw	r3,8(r3)
   22348:	10c00215 	stw	r3,8(r2)
   2234c:	800b883a 	mov	r5,r16
   22350:	a809883a 	mov	r4,r21
   22354:	0022f5c0 	call	22f5c <_free_r>
   22358:	a809883a 	mov	r4,r21
   2235c:	0023c100 	call	23c10 <__malloc_unlock>
   22360:	003fd306 	br	222b0 <_realloc_r+0x1ac>
   22364:	300b883a 	mov	r5,r6
   22368:	dfc00a17 	ldw	ra,40(sp)
   2236c:	df000917 	ldw	fp,36(sp)
   22370:	ddc00817 	ldw	r23,32(sp)
   22374:	dd800717 	ldw	r22,28(sp)
   22378:	dd400617 	ldw	r21,24(sp)
   2237c:	dd000517 	ldw	r20,20(sp)
   22380:	dcc00417 	ldw	r19,16(sp)
   22384:	dc800317 	ldw	r18,12(sp)
   22388:	dc400217 	ldw	r17,8(sp)
   2238c:	dc000117 	ldw	r16,4(sp)
   22390:	dec00b04 	addi	sp,sp,44
   22394:	00216341 	jmpi	21634 <_malloc_r>
   22398:	9464b03a 	or	r18,r18,r17
   2239c:	b4800115 	stw	r18,4(r22)
   223a0:	b44b883a 	add	r5,r22,r17
   223a4:	18c00054 	ori	r3,r3,1
   223a8:	28c00115 	stw	r3,4(r5)
   223ac:	10c00117 	ldw	r3,4(r2)
   223b0:	29400204 	addi	r5,r5,8
   223b4:	a809883a 	mov	r4,r21
   223b8:	18c00054 	ori	r3,r3,1
   223bc:	10c00115 	stw	r3,4(r2)
   223c0:	0022f5c0 	call	22f5c <_free_r>
   223c4:	003fb006 	br	22288 <_realloc_r+0x184>
   223c8:	10c4703a 	and	r2,r2,r3
   223cc:	a087883a 	add	r3,r20,r2
   223d0:	89000404 	addi	r4,r17,16
   223d4:	193f7716 	blt	r3,r4,221b4 <_realloc_r+0xb0>
   223d8:	b46d883a 	add	r22,r22,r17
   223dc:	1c45c83a 	sub	r2,r3,r17
   223e0:	e5800215 	stw	r22,8(fp)
   223e4:	10800054 	ori	r2,r2,1
   223e8:	b0800115 	stw	r2,4(r22)
   223ec:	80bfff17 	ldw	r2,-4(r16)
   223f0:	a809883a 	mov	r4,r21
   223f4:	8027883a 	mov	r19,r16
   223f8:	1080004c 	andi	r2,r2,1
   223fc:	1444b03a 	or	r2,r2,r17
   22400:	80bfff15 	stw	r2,-4(r16)
   22404:	0023c100 	call	23c10 <__malloc_unlock>
   22408:	003fa906 	br	222b0 <_realloc_r+0x1ac>
   2240c:	80c00017 	ldw	r3,0(r16)
   22410:	30800728 	cmpgeui	r2,r6,28
   22414:	98c00015 	stw	r3,0(r19)
   22418:	80c00117 	ldw	r3,4(r16)
   2241c:	98c00115 	stw	r3,4(r19)
   22420:	1000511e 	bne	r2,zero,22568 <_realloc_r+0x464>
   22424:	80c00204 	addi	r3,r16,8
   22428:	98800204 	addi	r2,r19,8
   2242c:	003fc106 	br	22334 <_realloc_r+0x230>
   22430:	30800317 	ldw	r2,12(r6)
   22434:	30c00217 	ldw	r3,8(r6)
   22438:	a1bfff04 	addi	r6,r20,-4
   2243c:	31400968 	cmpgeui	r5,r6,37
   22440:	18800315 	stw	r2,12(r3)
   22444:	10c00215 	stw	r3,8(r2)
   22448:	38c00217 	ldw	r3,8(r7)
   2244c:	38800317 	ldw	r2,12(r7)
   22450:	39000204 	addi	r4,r7,8
   22454:	18800315 	stw	r2,12(r3)
   22458:	10c00215 	stw	r3,8(r2)
   2245c:	283f6c26 	beq	r5,zero,22210 <_realloc_r+0x10c>
   22460:	800b883a 	mov	r5,r16
   22464:	d9c00015 	stw	r7,0(sp)
   22468:	0021ee40 	call	21ee4 <memmove>
   2246c:	d9c00017 	ldw	r7,0(sp)
   22470:	1021883a 	mov	r16,r2
   22474:	b829883a 	mov	r20,r23
   22478:	382d883a 	mov	r22,r7
   2247c:	003f7806 	br	22260 <_realloc_r+0x15c>
   22480:	98bfff17 	ldw	r2,-4(r19)
   22484:	00ffff04 	movi	r3,-4
   22488:	10c4703a 	and	r2,r2,r3
   2248c:	a0a9883a 	add	r20,r20,r2
   22490:	003f7306 	br	22260 <_realloc_r+0x15c>
   22494:	81fffe17 	ldw	r7,-8(r16)
   22498:	b1cfc83a 	sub	r7,r22,r7
   2249c:	38800117 	ldw	r2,4(r7)
   224a0:	10c6703a 	and	r3,r2,r3
   224a4:	003f4f06 	br	221e4 <_realloc_r+0xe0>
   224a8:	30800317 	ldw	r2,12(r6)
   224ac:	31000217 	ldw	r4,8(r6)
   224b0:	1829883a 	mov	r20,r3
   224b4:	20800315 	stw	r2,12(r4)
   224b8:	11000215 	stw	r4,8(r2)
   224bc:	003f6806 	br	22260 <_realloc_r+0x15c>
   224c0:	800b883a 	mov	r5,r16
   224c4:	9809883a 	mov	r4,r19
   224c8:	0021ee40 	call	21ee4 <memmove>
   224cc:	003f9f06 	br	2234c <_realloc_r+0x248>
   224d0:	88800404 	addi	r2,r17,16
   224d4:	b8bf4316 	blt	r23,r2,221e4 <_realloc_r+0xe0>
   224d8:	38800317 	ldw	r2,12(r7)
   224dc:	38c00217 	ldw	r3,8(r7)
   224e0:	a1bfff04 	addi	r6,r20,-4
   224e4:	31000968 	cmpgeui	r4,r6,37
   224e8:	18800315 	stw	r2,12(r3)
   224ec:	10c00215 	stw	r3,8(r2)
   224f0:	3cc00204 	addi	r19,r7,8
   224f4:	2000421e 	bne	r4,zero,22600 <_realloc_r+0x4fc>
   224f8:	30800530 	cmpltui	r2,r6,20
   224fc:	10003e1e 	bne	r2,zero,225f8 <_realloc_r+0x4f4>
   22500:	80c00017 	ldw	r3,0(r16)
   22504:	30800728 	cmpgeui	r2,r6,28
   22508:	38c00215 	stw	r3,8(r7)
   2250c:	80c00117 	ldw	r3,4(r16)
   22510:	38c00315 	stw	r3,12(r7)
   22514:	1000471e 	bne	r2,zero,22634 <_realloc_r+0x530>
   22518:	84000204 	addi	r16,r16,8
   2251c:	38800404 	addi	r2,r7,16
   22520:	80c00017 	ldw	r3,0(r16)
   22524:	10c00015 	stw	r3,0(r2)
   22528:	80c00117 	ldw	r3,4(r16)
   2252c:	10c00115 	stw	r3,4(r2)
   22530:	80c00217 	ldw	r3,8(r16)
   22534:	10c00215 	stw	r3,8(r2)
   22538:	3c47883a 	add	r3,r7,r17
   2253c:	bc45c83a 	sub	r2,r23,r17
   22540:	e0c00215 	stw	r3,8(fp)
   22544:	10800054 	ori	r2,r2,1
   22548:	18800115 	stw	r2,4(r3)
   2254c:	38800117 	ldw	r2,4(r7)
   22550:	a809883a 	mov	r4,r21
   22554:	1080004c 	andi	r2,r2,1
   22558:	1444b03a 	or	r2,r2,r17
   2255c:	38800115 	stw	r2,4(r7)
   22560:	0023c100 	call	23c10 <__malloc_unlock>
   22564:	003f5206 	br	222b0 <_realloc_r+0x1ac>
   22568:	80800217 	ldw	r2,8(r16)
   2256c:	31800920 	cmpeqi	r6,r6,36
   22570:	98800215 	stw	r2,8(r19)
   22574:	80800317 	ldw	r2,12(r16)
   22578:	98800315 	stw	r2,12(r19)
   2257c:	3000171e 	bne	r6,zero,225dc <_realloc_r+0x4d8>
   22580:	80c00404 	addi	r3,r16,16
   22584:	98800404 	addi	r2,r19,16
   22588:	003f6a06 	br	22334 <_realloc_r+0x230>
   2258c:	2005883a 	mov	r2,r4
   22590:	003f2906 	br	22238 <_realloc_r+0x134>
   22594:	800b883a 	mov	r5,r16
   22598:	d9c00015 	stw	r7,0(sp)
   2259c:	0021ee40 	call	21ee4 <memmove>
   225a0:	d9c00017 	ldw	r7,0(sp)
   225a4:	1021883a 	mov	r16,r2
   225a8:	b829883a 	mov	r20,r23
   225ac:	3c800117 	ldw	r18,4(r7)
   225b0:	382d883a 	mov	r22,r7
   225b4:	003f2a06 	br	22260 <_realloc_r+0x15c>
   225b8:	80800217 	ldw	r2,8(r16)
   225bc:	31800920 	cmpeqi	r6,r6,36
   225c0:	38800415 	stw	r2,16(r7)
   225c4:	80800317 	ldw	r2,12(r16)
   225c8:	38800515 	stw	r2,20(r7)
   225cc:	3000121e 	bne	r6,zero,22618 <_realloc_r+0x514>
   225d0:	84000404 	addi	r16,r16,16
   225d4:	38800604 	addi	r2,r7,24
   225d8:	003f1706 	br	22238 <_realloc_r+0x134>
   225dc:	81000417 	ldw	r4,16(r16)
   225e0:	80c00604 	addi	r3,r16,24
   225e4:	98800604 	addi	r2,r19,24
   225e8:	99000415 	stw	r4,16(r19)
   225ec:	81000517 	ldw	r4,20(r16)
   225f0:	99000515 	stw	r4,20(r19)
   225f4:	003f4f06 	br	22334 <_realloc_r+0x230>
   225f8:	9805883a 	mov	r2,r19
   225fc:	003fc806 	br	22520 <_realloc_r+0x41c>
   22600:	800b883a 	mov	r5,r16
   22604:	9809883a 	mov	r4,r19
   22608:	d9c00015 	stw	r7,0(sp)
   2260c:	0021ee40 	call	21ee4 <memmove>
   22610:	d9c00017 	ldw	r7,0(sp)
   22614:	003fc806 	br	22538 <_realloc_r+0x434>
   22618:	80c00417 	ldw	r3,16(r16)
   2261c:	84000604 	addi	r16,r16,24
   22620:	38800804 	addi	r2,r7,32
   22624:	38c00615 	stw	r3,24(r7)
   22628:	80ffff17 	ldw	r3,-4(r16)
   2262c:	38c00715 	stw	r3,28(r7)
   22630:	003f0106 	br	22238 <_realloc_r+0x134>
   22634:	80800217 	ldw	r2,8(r16)
   22638:	31800920 	cmpeqi	r6,r6,36
   2263c:	38800415 	stw	r2,16(r7)
   22640:	80800317 	ldw	r2,12(r16)
   22644:	38800515 	stw	r2,20(r7)
   22648:	3000031e 	bne	r6,zero,22658 <_realloc_r+0x554>
   2264c:	84000404 	addi	r16,r16,16
   22650:	38800604 	addi	r2,r7,24
   22654:	003fb206 	br	22520 <_realloc_r+0x41c>
   22658:	80c00417 	ldw	r3,16(r16)
   2265c:	84000604 	addi	r16,r16,24
   22660:	38800804 	addi	r2,r7,32
   22664:	38c00615 	stw	r3,24(r7)
   22668:	80ffff17 	ldw	r3,-4(r16)
   2266c:	38c00715 	stw	r3,28(r7)
   22670:	003fab06 	br	22520 <_realloc_r+0x41c>

00022674 <_sbrk_r>:
   22674:	defffe04 	addi	sp,sp,-8
   22678:	dc000015 	stw	r16,0(sp)
   2267c:	008000f4 	movhi	r2,3
   22680:	2021883a 	mov	r16,r4
   22684:	2809883a 	mov	r4,r5
   22688:	dfc00115 	stw	ra,4(sp)
   2268c:	1024a415 	stw	zero,-28016(r2)
   22690:	0023de80 	call	23de8 <sbrk>
   22694:	10ffffd8 	cmpnei	r3,r2,-1
   22698:	18000426 	beq	r3,zero,226ac <_sbrk_r+0x38>
   2269c:	dfc00117 	ldw	ra,4(sp)
   226a0:	dc000017 	ldw	r16,0(sp)
   226a4:	dec00204 	addi	sp,sp,8
   226a8:	f800283a 	ret
   226ac:	00c000f4 	movhi	r3,3
   226b0:	18e4a417 	ldw	r3,-28016(r3)
   226b4:	183ff926 	beq	r3,zero,2269c <_sbrk_r+0x28>
   226b8:	80c00015 	stw	r3,0(r16)
   226bc:	dfc00117 	ldw	ra,4(sp)
   226c0:	dc000017 	ldw	r16,0(sp)
   226c4:	dec00204 	addi	sp,sp,8
   226c8:	f800283a 	ret

000226cc <__sread>:
   226cc:	defffe04 	addi	sp,sp,-8
   226d0:	dc000015 	stw	r16,0(sp)
   226d4:	2821883a 	mov	r16,r5
   226d8:	2940038f 	ldh	r5,14(r5)
   226dc:	dfc00115 	stw	ra,4(sp)
   226e0:	00234fc0 	call	234fc <_read_r>
   226e4:	10000716 	blt	r2,zero,22704 <__sread+0x38>
   226e8:	80c01417 	ldw	r3,80(r16)
   226ec:	1887883a 	add	r3,r3,r2
   226f0:	80c01415 	stw	r3,80(r16)
   226f4:	dfc00117 	ldw	ra,4(sp)
   226f8:	dc000017 	ldw	r16,0(sp)
   226fc:	dec00204 	addi	sp,sp,8
   22700:	f800283a 	ret
   22704:	80c0030b 	ldhu	r3,12(r16)
   22708:	18fbffcc 	andi	r3,r3,61439
   2270c:	80c0030d 	sth	r3,12(r16)
   22710:	dfc00117 	ldw	ra,4(sp)
   22714:	dc000017 	ldw	r16,0(sp)
   22718:	dec00204 	addi	sp,sp,8
   2271c:	f800283a 	ret

00022720 <__seofread>:
   22720:	0005883a 	mov	r2,zero
   22724:	f800283a 	ret

00022728 <__swrite>:
   22728:	2880030b 	ldhu	r2,12(r5)
   2272c:	defffb04 	addi	sp,sp,-20
   22730:	dcc00315 	stw	r19,12(sp)
   22734:	dc800215 	stw	r18,8(sp)
   22738:	dc400115 	stw	r17,4(sp)
   2273c:	dc000015 	stw	r16,0(sp)
   22740:	dfc00415 	stw	ra,16(sp)
   22744:	10c0400c 	andi	r3,r2,256
   22748:	2821883a 	mov	r16,r5
   2274c:	2023883a 	mov	r17,r4
   22750:	3025883a 	mov	r18,r6
   22754:	3827883a 	mov	r19,r7
   22758:	18000d1e 	bne	r3,zero,22790 <__swrite+0x68>
   2275c:	8140038f 	ldh	r5,14(r16)
   22760:	10bbffcc 	andi	r2,r2,61439
   22764:	980f883a 	mov	r7,r19
   22768:	900d883a 	mov	r6,r18
   2276c:	8809883a 	mov	r4,r17
   22770:	8080030d 	sth	r2,12(r16)
   22774:	dfc00417 	ldw	ra,16(sp)
   22778:	dcc00317 	ldw	r19,12(sp)
   2277c:	dc800217 	ldw	r18,8(sp)
   22780:	dc400117 	ldw	r17,4(sp)
   22784:	dc000017 	ldw	r16,0(sp)
   22788:	dec00504 	addi	sp,sp,20
   2278c:	002280c1 	jmpi	2280c <_write_r>
   22790:	2940038f 	ldh	r5,14(r5)
   22794:	01c00084 	movi	r7,2
   22798:	000d883a 	mov	r6,zero
   2279c:	00232580 	call	23258 <_lseek_r>
   227a0:	8080030b 	ldhu	r2,12(r16)
   227a4:	003fed06 	br	2275c <__swrite+0x34>

000227a8 <__sseek>:
   227a8:	defffe04 	addi	sp,sp,-8
   227ac:	dc000015 	stw	r16,0(sp)
   227b0:	2821883a 	mov	r16,r5
   227b4:	2940038f 	ldh	r5,14(r5)
   227b8:	dfc00115 	stw	ra,4(sp)
   227bc:	00232580 	call	23258 <_lseek_r>
   227c0:	10ffffd8 	cmpnei	r3,r2,-1
   227c4:	18000826 	beq	r3,zero,227e8 <__sseek+0x40>
   227c8:	80c0030b 	ldhu	r3,12(r16)
   227cc:	80801415 	stw	r2,80(r16)
   227d0:	18c40014 	ori	r3,r3,4096
   227d4:	80c0030d 	sth	r3,12(r16)
   227d8:	dfc00117 	ldw	ra,4(sp)
   227dc:	dc000017 	ldw	r16,0(sp)
   227e0:	dec00204 	addi	sp,sp,8
   227e4:	f800283a 	ret
   227e8:	80c0030b 	ldhu	r3,12(r16)
   227ec:	18fbffcc 	andi	r3,r3,61439
   227f0:	80c0030d 	sth	r3,12(r16)
   227f4:	dfc00117 	ldw	ra,4(sp)
   227f8:	dc000017 	ldw	r16,0(sp)
   227fc:	dec00204 	addi	sp,sp,8
   22800:	f800283a 	ret

00022804 <__sclose>:
   22804:	2940038f 	ldh	r5,14(r5)
   22808:	00229d41 	jmpi	229d4 <_close_r>

0002280c <_write_r>:
   2280c:	2807883a 	mov	r3,r5
   22810:	defffe04 	addi	sp,sp,-8
   22814:	dc000015 	stw	r16,0(sp)
   22818:	300b883a 	mov	r5,r6
   2281c:	008000f4 	movhi	r2,3
   22820:	380d883a 	mov	r6,r7
   22824:	2021883a 	mov	r16,r4
   22828:	1809883a 	mov	r4,r3
   2282c:	dfc00115 	stw	ra,4(sp)
   22830:	1024a415 	stw	zero,-28016(r2)
   22834:	0023edc0 	call	23edc <write>
   22838:	10ffffd8 	cmpnei	r3,r2,-1
   2283c:	18000426 	beq	r3,zero,22850 <_write_r+0x44>
   22840:	dfc00117 	ldw	ra,4(sp)
   22844:	dc000017 	ldw	r16,0(sp)
   22848:	dec00204 	addi	sp,sp,8
   2284c:	f800283a 	ret
   22850:	00c000f4 	movhi	r3,3
   22854:	18e4a417 	ldw	r3,-28016(r3)
   22858:	183ff926 	beq	r3,zero,22840 <_write_r+0x34>
   2285c:	80c00015 	stw	r3,0(r16)
   22860:	dfc00117 	ldw	ra,4(sp)
   22864:	dc000017 	ldw	r16,0(sp)
   22868:	dec00204 	addi	sp,sp,8
   2286c:	f800283a 	ret

00022870 <__swsetup_r>:
   22870:	008000b4 	movhi	r2,2
   22874:	109df717 	ldw	r2,30684(r2)
   22878:	defffd04 	addi	sp,sp,-12
   2287c:	dc400115 	stw	r17,4(sp)
   22880:	dc000015 	stw	r16,0(sp)
   22884:	dfc00215 	stw	ra,8(sp)
   22888:	2023883a 	mov	r17,r4
   2288c:	2821883a 	mov	r16,r5
   22890:	10000226 	beq	r2,zero,2289c <__swsetup_r+0x2c>
   22894:	10c00e17 	ldw	r3,56(r2)
   22898:	18001f26 	beq	r3,zero,22918 <__swsetup_r+0xa8>
   2289c:	8180030b 	ldhu	r6,12(r16)
   228a0:	30c0020c 	andi	r3,r6,8
   228a4:	3005883a 	mov	r2,r6
   228a8:	18002126 	beq	r3,zero,22930 <__swsetup_r+0xc0>
   228ac:	80c00417 	ldw	r3,16(r16)
   228b0:	18002826 	beq	r3,zero,22954 <__swsetup_r+0xe4>
   228b4:	1100004c 	andi	r4,r2,1
   228b8:	20000b1e 	bne	r4,zero,228e8 <__swsetup_r+0x78>
   228bc:	1100008c 	andi	r4,r2,2
   228c0:	20002e1e 	bne	r4,zero,2297c <__swsetup_r+0x10c>
   228c4:	81000517 	ldw	r4,20(r16)
   228c8:	81000215 	stw	r4,8(r16)
   228cc:	18000b26 	beq	r3,zero,228fc <__swsetup_r+0x8c>
   228d0:	0005883a 	mov	r2,zero
   228d4:	dfc00217 	ldw	ra,8(sp)
   228d8:	dc400117 	ldw	r17,4(sp)
   228dc:	dc000017 	ldw	r16,0(sp)
   228e0:	dec00304 	addi	sp,sp,12
   228e4:	f800283a 	ret
   228e8:	81000517 	ldw	r4,20(r16)
   228ec:	80000215 	stw	zero,8(r16)
   228f0:	0109c83a 	sub	r4,zero,r4
   228f4:	81000615 	stw	r4,24(r16)
   228f8:	183ff51e 	bne	r3,zero,228d0 <__swsetup_r+0x60>
   228fc:	10c0200c 	andi	r3,r2,128
   22900:	0005883a 	mov	r2,zero
   22904:	183ff326 	beq	r3,zero,228d4 <__swsetup_r+0x64>
   22908:	31801014 	ori	r6,r6,64
   2290c:	8180030d 	sth	r6,12(r16)
   22910:	00bfffc4 	movi	r2,-1
   22914:	003fef06 	br	228d4 <__swsetup_r+0x64>
   22918:	1009883a 	mov	r4,r2
   2291c:	0020fe00 	call	20fe0 <__sinit>
   22920:	8180030b 	ldhu	r6,12(r16)
   22924:	30c0020c 	andi	r3,r6,8
   22928:	3005883a 	mov	r2,r6
   2292c:	183fdf1e 	bne	r3,zero,228ac <__swsetup_r+0x3c>
   22930:	3080040c 	andi	r2,r6,16
   22934:	10002126 	beq	r2,zero,229bc <__swsetup_r+0x14c>
   22938:	3080010c 	andi	r2,r6,4
   2293c:	1000111e 	bne	r2,zero,22984 <__swsetup_r+0x114>
   22940:	80c00417 	ldw	r3,16(r16)
   22944:	30800214 	ori	r2,r6,8
   22948:	8080030d 	sth	r2,12(r16)
   2294c:	100d883a 	mov	r6,r2
   22950:	183fd81e 	bne	r3,zero,228b4 <__swsetup_r+0x44>
   22954:	1100a00c 	andi	r4,r2,640
   22958:	21008020 	cmpeqi	r4,r4,512
   2295c:	203fd51e 	bne	r4,zero,228b4 <__swsetup_r+0x44>
   22960:	800b883a 	mov	r5,r16
   22964:	8809883a 	mov	r4,r17
   22968:	00232bc0 	call	232bc <__smakebuf_r>
   2296c:	8180030b 	ldhu	r6,12(r16)
   22970:	80c00417 	ldw	r3,16(r16)
   22974:	3005883a 	mov	r2,r6
   22978:	003fce06 	br	228b4 <__swsetup_r+0x44>
   2297c:	0009883a 	mov	r4,zero
   22980:	003fd106 	br	228c8 <__swsetup_r+0x58>
   22984:	81400c17 	ldw	r5,48(r16)
   22988:	28000626 	beq	r5,zero,229a4 <__swsetup_r+0x134>
   2298c:	80801004 	addi	r2,r16,64
   22990:	28800326 	beq	r5,r2,229a0 <__swsetup_r+0x130>
   22994:	8809883a 	mov	r4,r17
   22998:	0022f5c0 	call	22f5c <_free_r>
   2299c:	8180030b 	ldhu	r6,12(r16)
   229a0:	80000c15 	stw	zero,48(r16)
   229a4:	80c00417 	ldw	r3,16(r16)
   229a8:	00bff6c4 	movi	r2,-37
   229ac:	118c703a 	and	r6,r2,r6
   229b0:	80000115 	stw	zero,4(r16)
   229b4:	80c00015 	stw	r3,0(r16)
   229b8:	003fe206 	br	22944 <__swsetup_r+0xd4>
   229bc:	00800244 	movi	r2,9
   229c0:	88800015 	stw	r2,0(r17)
   229c4:	31801014 	ori	r6,r6,64
   229c8:	8180030d 	sth	r6,12(r16)
   229cc:	00bfffc4 	movi	r2,-1
   229d0:	003fc006 	br	228d4 <__swsetup_r+0x64>

000229d4 <_close_r>:
   229d4:	defffe04 	addi	sp,sp,-8
   229d8:	dc000015 	stw	r16,0(sp)
   229dc:	008000f4 	movhi	r2,3
   229e0:	2021883a 	mov	r16,r4
   229e4:	2809883a 	mov	r4,r5
   229e8:	dfc00115 	stw	ra,4(sp)
   229ec:	1024a415 	stw	zero,-28016(r2)
   229f0:	002367c0 	call	2367c <close>
   229f4:	10ffffd8 	cmpnei	r3,r2,-1
   229f8:	18000426 	beq	r3,zero,22a0c <_close_r+0x38>
   229fc:	dfc00117 	ldw	ra,4(sp)
   22a00:	dc000017 	ldw	r16,0(sp)
   22a04:	dec00204 	addi	sp,sp,8
   22a08:	f800283a 	ret
   22a0c:	00c000f4 	movhi	r3,3
   22a10:	18e4a417 	ldw	r3,-28016(r3)
   22a14:	183ff926 	beq	r3,zero,229fc <_close_r+0x28>
   22a18:	80c00015 	stw	r3,0(r16)
   22a1c:	dfc00117 	ldw	ra,4(sp)
   22a20:	dc000017 	ldw	r16,0(sp)
   22a24:	dec00204 	addi	sp,sp,8
   22a28:	f800283a 	ret

00022a2c <_fclose_r>:
   22a2c:	defffc04 	addi	sp,sp,-16
   22a30:	dfc00315 	stw	ra,12(sp)
   22a34:	dc800215 	stw	r18,8(sp)
   22a38:	dc400115 	stw	r17,4(sp)
   22a3c:	dc000015 	stw	r16,0(sp)
   22a40:	28000726 	beq	r5,zero,22a60 <_fclose_r+0x34>
   22a44:	2821883a 	mov	r16,r5
   22a48:	2023883a 	mov	r17,r4
   22a4c:	20000226 	beq	r4,zero,22a58 <_fclose_r+0x2c>
   22a50:	20800e17 	ldw	r2,56(r4)
   22a54:	10002726 	beq	r2,zero,22af4 <_fclose_r+0xc8>
   22a58:	8080030f 	ldh	r2,12(r16)
   22a5c:	1000081e 	bne	r2,zero,22a80 <_fclose_r+0x54>
   22a60:	0025883a 	mov	r18,zero
   22a64:	9005883a 	mov	r2,r18
   22a68:	dfc00317 	ldw	ra,12(sp)
   22a6c:	dc800217 	ldw	r18,8(sp)
   22a70:	dc400117 	ldw	r17,4(sp)
   22a74:	dc000017 	ldw	r16,0(sp)
   22a78:	dec00404 	addi	sp,sp,16
   22a7c:	f800283a 	ret
   22a80:	800b883a 	mov	r5,r16
   22a84:	8809883a 	mov	r4,r17
   22a88:	0022b340 	call	22b34 <__sflush_r>
   22a8c:	80c00b17 	ldw	r3,44(r16)
   22a90:	1025883a 	mov	r18,r2
   22a94:	18000426 	beq	r3,zero,22aa8 <_fclose_r+0x7c>
   22a98:	81400717 	ldw	r5,28(r16)
   22a9c:	8809883a 	mov	r4,r17
   22aa0:	183ee83a 	callr	r3
   22aa4:	10001716 	blt	r2,zero,22b04 <_fclose_r+0xd8>
   22aa8:	8080030b 	ldhu	r2,12(r16)
   22aac:	1080200c 	andi	r2,r2,128
   22ab0:	1000181e 	bne	r2,zero,22b14 <_fclose_r+0xe8>
   22ab4:	81400c17 	ldw	r5,48(r16)
   22ab8:	28000526 	beq	r5,zero,22ad0 <_fclose_r+0xa4>
   22abc:	80801004 	addi	r2,r16,64
   22ac0:	28800226 	beq	r5,r2,22acc <_fclose_r+0xa0>
   22ac4:	8809883a 	mov	r4,r17
   22ac8:	0022f5c0 	call	22f5c <_free_r>
   22acc:	80000c15 	stw	zero,48(r16)
   22ad0:	81401117 	ldw	r5,68(r16)
   22ad4:	28000326 	beq	r5,zero,22ae4 <_fclose_r+0xb8>
   22ad8:	8809883a 	mov	r4,r17
   22adc:	0022f5c0 	call	22f5c <_free_r>
   22ae0:	80001115 	stw	zero,68(r16)
   22ae4:	0020ff00 	call	20ff0 <__sfp_lock_acquire>
   22ae8:	8000030d 	sth	zero,12(r16)
   22aec:	0020ff40 	call	20ff4 <__sfp_lock_release>
   22af0:	003fdc06 	br	22a64 <_fclose_r+0x38>
   22af4:	0020fe00 	call	20fe0 <__sinit>
   22af8:	8080030f 	ldh	r2,12(r16)
   22afc:	103fd826 	beq	r2,zero,22a60 <_fclose_r+0x34>
   22b00:	003fdf06 	br	22a80 <_fclose_r+0x54>
   22b04:	8080030b 	ldhu	r2,12(r16)
   22b08:	04bfffc4 	movi	r18,-1
   22b0c:	1080200c 	andi	r2,r2,128
   22b10:	103fe826 	beq	r2,zero,22ab4 <_fclose_r+0x88>
   22b14:	81400417 	ldw	r5,16(r16)
   22b18:	8809883a 	mov	r4,r17
   22b1c:	0022f5c0 	call	22f5c <_free_r>
   22b20:	003fe406 	br	22ab4 <_fclose_r+0x88>

00022b24 <fclose>:
   22b24:	008000b4 	movhi	r2,2
   22b28:	200b883a 	mov	r5,r4
   22b2c:	111df717 	ldw	r4,30684(r2)
   22b30:	0022a2c1 	jmpi	22a2c <_fclose_r>

00022b34 <__sflush_r>:
   22b34:	2880030b 	ldhu	r2,12(r5)
   22b38:	defffb04 	addi	sp,sp,-20
   22b3c:	dcc00315 	stw	r19,12(sp)
   22b40:	dc000015 	stw	r16,0(sp)
   22b44:	dfc00415 	stw	ra,16(sp)
   22b48:	dc800215 	stw	r18,8(sp)
   22b4c:	dc400115 	stw	r17,4(sp)
   22b50:	10c0020c 	andi	r3,r2,8
   22b54:	2821883a 	mov	r16,r5
   22b58:	2027883a 	mov	r19,r4
   22b5c:	18003f1e 	bne	r3,zero,22c5c <__sflush_r+0x128>
   22b60:	28c00117 	ldw	r3,4(r5)
   22b64:	10820014 	ori	r2,r2,2048
   22b68:	2880030d 	sth	r2,12(r5)
   22b6c:	00c0550e 	bge	zero,r3,22cc4 <__sflush_r+0x190>
   22b70:	82000a17 	ldw	r8,40(r16)
   22b74:	40003126 	beq	r8,zero,22c3c <__sflush_r+0x108>
   22b78:	9c400017 	ldw	r17,0(r19)
   22b7c:	1104000c 	andi	r4,r2,4096
   22b80:	98000015 	stw	zero,0(r19)
   22b84:	81400717 	ldw	r5,28(r16)
   22b88:	1007883a 	mov	r3,r2
   22b8c:	2000521e 	bne	r4,zero,22cd8 <__sflush_r+0x1a4>
   22b90:	01c00044 	movi	r7,1
   22b94:	000d883a 	mov	r6,zero
   22b98:	9809883a 	mov	r4,r19
   22b9c:	403ee83a 	callr	r8
   22ba0:	10ffffd8 	cmpnei	r3,r2,-1
   22ba4:	18005826 	beq	r3,zero,22d08 <__sflush_r+0x1d4>
   22ba8:	80c0030b 	ldhu	r3,12(r16)
   22bac:	82000a17 	ldw	r8,40(r16)
   22bb0:	18c0010c 	andi	r3,r3,4
   22bb4:	18000626 	beq	r3,zero,22bd0 <__sflush_r+0x9c>
   22bb8:	81000117 	ldw	r4,4(r16)
   22bbc:	80c00c17 	ldw	r3,48(r16)
   22bc0:	1105c83a 	sub	r2,r2,r4
   22bc4:	18000226 	beq	r3,zero,22bd0 <__sflush_r+0x9c>
   22bc8:	80c00f17 	ldw	r3,60(r16)
   22bcc:	10c5c83a 	sub	r2,r2,r3
   22bd0:	81400717 	ldw	r5,28(r16)
   22bd4:	100d883a 	mov	r6,r2
   22bd8:	000f883a 	mov	r7,zero
   22bdc:	9809883a 	mov	r4,r19
   22be0:	403ee83a 	callr	r8
   22be4:	10ffffd8 	cmpnei	r3,r2,-1
   22be8:	18003d1e 	bne	r3,zero,22ce0 <__sflush_r+0x1ac>
   22bec:	99000017 	ldw	r4,0(r19)
   22bf0:	80c0030b 	ldhu	r3,12(r16)
   22bf4:	20004e26 	beq	r4,zero,22d30 <__sflush_r+0x1fc>
   22bf8:	21400760 	cmpeqi	r5,r4,29
   22bfc:	2800021e 	bne	r5,zero,22c08 <__sflush_r+0xd4>
   22c00:	210005a0 	cmpeqi	r4,r4,22
   22c04:	20002c26 	beq	r4,zero,22cb8 <__sflush_r+0x184>
   22c08:	80800417 	ldw	r2,16(r16)
   22c0c:	18fdffcc 	andi	r3,r3,63487
   22c10:	80c0030d 	sth	r3,12(r16)
   22c14:	80000115 	stw	zero,4(r16)
   22c18:	80800015 	stw	r2,0(r16)
   22c1c:	81400c17 	ldw	r5,48(r16)
   22c20:	9c400015 	stw	r17,0(r19)
   22c24:	28000526 	beq	r5,zero,22c3c <__sflush_r+0x108>
   22c28:	80801004 	addi	r2,r16,64
   22c2c:	28800226 	beq	r5,r2,22c38 <__sflush_r+0x104>
   22c30:	9809883a 	mov	r4,r19
   22c34:	0022f5c0 	call	22f5c <_free_r>
   22c38:	80000c15 	stw	zero,48(r16)
   22c3c:	0005883a 	mov	r2,zero
   22c40:	dfc00417 	ldw	ra,16(sp)
   22c44:	dcc00317 	ldw	r19,12(sp)
   22c48:	dc800217 	ldw	r18,8(sp)
   22c4c:	dc400117 	ldw	r17,4(sp)
   22c50:	dc000017 	ldw	r16,0(sp)
   22c54:	dec00504 	addi	sp,sp,20
   22c58:	f800283a 	ret
   22c5c:	2c800417 	ldw	r18,16(r5)
   22c60:	903ff626 	beq	r18,zero,22c3c <__sflush_r+0x108>
   22c64:	2c400017 	ldw	r17,0(r5)
   22c68:	108000cc 	andi	r2,r2,3
   22c6c:	2c800015 	stw	r18,0(r5)
   22c70:	8ca3c83a 	sub	r17,r17,r18
   22c74:	1000161e 	bne	r2,zero,22cd0 <__sflush_r+0x19c>
   22c78:	28800517 	ldw	r2,20(r5)
   22c7c:	80800215 	stw	r2,8(r16)
   22c80:	04400316 	blt	zero,r17,22c90 <__sflush_r+0x15c>
   22c84:	003fed06 	br	22c3c <__sflush_r+0x108>
   22c88:	90a5883a 	add	r18,r18,r2
   22c8c:	047feb0e 	bge	zero,r17,22c3c <__sflush_r+0x108>
   22c90:	80800917 	ldw	r2,36(r16)
   22c94:	81400717 	ldw	r5,28(r16)
   22c98:	880f883a 	mov	r7,r17
   22c9c:	900d883a 	mov	r6,r18
   22ca0:	9809883a 	mov	r4,r19
   22ca4:	103ee83a 	callr	r2
   22ca8:	88a3c83a 	sub	r17,r17,r2
   22cac:	00bff616 	blt	zero,r2,22c88 <__sflush_r+0x154>
   22cb0:	80c0030b 	ldhu	r3,12(r16)
   22cb4:	00bfffc4 	movi	r2,-1
   22cb8:	18c01014 	ori	r3,r3,64
   22cbc:	80c0030d 	sth	r3,12(r16)
   22cc0:	003fdf06 	br	22c40 <__sflush_r+0x10c>
   22cc4:	28c00f17 	ldw	r3,60(r5)
   22cc8:	00ffa916 	blt	zero,r3,22b70 <__sflush_r+0x3c>
   22ccc:	003fdb06 	br	22c3c <__sflush_r+0x108>
   22cd0:	0005883a 	mov	r2,zero
   22cd4:	003fe906 	br	22c7c <__sflush_r+0x148>
   22cd8:	80801417 	ldw	r2,80(r16)
   22cdc:	003fb406 	br	22bb0 <__sflush_r+0x7c>
   22ce0:	80c0030b 	ldhu	r3,12(r16)
   22ce4:	81000417 	ldw	r4,16(r16)
   22ce8:	80000115 	stw	zero,4(r16)
   22cec:	197dffcc 	andi	r5,r3,63487
   22cf0:	8140030d 	sth	r5,12(r16)
   22cf4:	81000015 	stw	r4,0(r16)
   22cf8:	18c4000c 	andi	r3,r3,4096
   22cfc:	183fc726 	beq	r3,zero,22c1c <__sflush_r+0xe8>
   22d00:	80801415 	stw	r2,80(r16)
   22d04:	003fc506 	br	22c1c <__sflush_r+0xe8>
   22d08:	98c00017 	ldw	r3,0(r19)
   22d0c:	183fa626 	beq	r3,zero,22ba8 <__sflush_r+0x74>
   22d10:	19000760 	cmpeqi	r4,r3,29
   22d14:	20000e1e 	bne	r4,zero,22d50 <__sflush_r+0x21c>
   22d18:	18c00598 	cmpnei	r3,r3,22
   22d1c:	18000c26 	beq	r3,zero,22d50 <__sflush_r+0x21c>
   22d20:	80c0030b 	ldhu	r3,12(r16)
   22d24:	18c01014 	ori	r3,r3,64
   22d28:	80c0030d 	sth	r3,12(r16)
   22d2c:	003fc406 	br	22c40 <__sflush_r+0x10c>
   22d30:	81000417 	ldw	r4,16(r16)
   22d34:	197dffcc 	andi	r5,r3,63487
   22d38:	8140030d 	sth	r5,12(r16)
   22d3c:	80000115 	stw	zero,4(r16)
   22d40:	81000015 	stw	r4,0(r16)
   22d44:	18c4000c 	andi	r3,r3,4096
   22d48:	183fb426 	beq	r3,zero,22c1c <__sflush_r+0xe8>
   22d4c:	003fec06 	br	22d00 <__sflush_r+0x1cc>
   22d50:	9c400015 	stw	r17,0(r19)
   22d54:	0005883a 	mov	r2,zero
   22d58:	003fb906 	br	22c40 <__sflush_r+0x10c>

00022d5c <_fflush_r>:
   22d5c:	defffd04 	addi	sp,sp,-12
   22d60:	dc000115 	stw	r16,4(sp)
   22d64:	dfc00215 	stw	ra,8(sp)
   22d68:	2021883a 	mov	r16,r4
   22d6c:	20000226 	beq	r4,zero,22d78 <_fflush_r+0x1c>
   22d70:	20800e17 	ldw	r2,56(r4)
   22d74:	10000726 	beq	r2,zero,22d94 <_fflush_r+0x38>
   22d78:	2880030f 	ldh	r2,12(r5)
   22d7c:	10000a1e 	bne	r2,zero,22da8 <_fflush_r+0x4c>
   22d80:	0005883a 	mov	r2,zero
   22d84:	dfc00217 	ldw	ra,8(sp)
   22d88:	dc000117 	ldw	r16,4(sp)
   22d8c:	dec00304 	addi	sp,sp,12
   22d90:	f800283a 	ret
   22d94:	d9400015 	stw	r5,0(sp)
   22d98:	0020fe00 	call	20fe0 <__sinit>
   22d9c:	d9400017 	ldw	r5,0(sp)
   22da0:	2880030f 	ldh	r2,12(r5)
   22da4:	103ff626 	beq	r2,zero,22d80 <_fflush_r+0x24>
   22da8:	8009883a 	mov	r4,r16
   22dac:	dfc00217 	ldw	ra,8(sp)
   22db0:	dc000117 	ldw	r16,4(sp)
   22db4:	dec00304 	addi	sp,sp,12
   22db8:	0022b341 	jmpi	22b34 <__sflush_r>

00022dbc <fflush>:
   22dbc:	20001726 	beq	r4,zero,22e1c <fflush+0x60>
   22dc0:	008000b4 	movhi	r2,2
   22dc4:	200b883a 	mov	r5,r4
   22dc8:	111df717 	ldw	r4,30684(r2)
   22dcc:	20000226 	beq	r4,zero,22dd8 <fflush+0x1c>
   22dd0:	20800e17 	ldw	r2,56(r4)
   22dd4:	10000526 	beq	r2,zero,22dec <fflush+0x30>
   22dd8:	2880030f 	ldh	r2,12(r5)
   22ddc:	1000021e 	bne	r2,zero,22de8 <fflush+0x2c>
   22de0:	0005883a 	mov	r2,zero
   22de4:	f800283a 	ret
   22de8:	0022b341 	jmpi	22b34 <__sflush_r>
   22dec:	defffd04 	addi	sp,sp,-12
   22df0:	d9400115 	stw	r5,4(sp)
   22df4:	d9000015 	stw	r4,0(sp)
   22df8:	dfc00215 	stw	ra,8(sp)
   22dfc:	0020fe00 	call	20fe0 <__sinit>
   22e00:	d9400117 	ldw	r5,4(sp)
   22e04:	d9000017 	ldw	r4,0(sp)
   22e08:	2880030f 	ldh	r2,12(r5)
   22e0c:	10000826 	beq	r2,zero,22e30 <fflush+0x74>
   22e10:	dfc00217 	ldw	ra,8(sp)
   22e14:	dec00304 	addi	sp,sp,12
   22e18:	0022b341 	jmpi	22b34 <__sflush_r>
   22e1c:	008000b4 	movhi	r2,2
   22e20:	111df617 	ldw	r4,30680(r2)
   22e24:	014000b4 	movhi	r5,2
   22e28:	294b5704 	addi	r5,r5,11612
   22e2c:	002158c1 	jmpi	2158c <_fwalk_reent>
   22e30:	0005883a 	mov	r2,zero
   22e34:	dfc00217 	ldw	ra,8(sp)
   22e38:	dec00304 	addi	sp,sp,12
   22e3c:	f800283a 	ret

00022e40 <_malloc_trim_r>:
   22e40:	defffb04 	addi	sp,sp,-20
   22e44:	dcc00315 	stw	r19,12(sp)
   22e48:	04c000b4 	movhi	r19,2
   22e4c:	dc800215 	stw	r18,8(sp)
   22e50:	dc400115 	stw	r17,4(sp)
   22e54:	dc000015 	stw	r16,0(sp)
   22e58:	dfc00415 	stw	ra,16(sp)
   22e5c:	2821883a 	mov	r16,r5
   22e60:	9cd87104 	addi	r19,r19,25028
   22e64:	2025883a 	mov	r18,r4
   22e68:	0023bec0 	call	23bec <__malloc_lock>
   22e6c:	98800217 	ldw	r2,8(r19)
   22e70:	14400117 	ldw	r17,4(r2)
   22e74:	00bfff04 	movi	r2,-4
   22e78:	88a2703a 	and	r17,r17,r2
   22e7c:	8c21c83a 	sub	r16,r17,r16
   22e80:	8403fbc4 	addi	r16,r16,4079
   22e84:	8020d33a 	srli	r16,r16,12
   22e88:	843fffc4 	addi	r16,r16,-1
   22e8c:	8020933a 	slli	r16,r16,12
   22e90:	80840008 	cmpgei	r2,r16,4096
   22e94:	10000626 	beq	r2,zero,22eb0 <_malloc_trim_r+0x70>
   22e98:	000b883a 	mov	r5,zero
   22e9c:	9009883a 	mov	r4,r18
   22ea0:	00226740 	call	22674 <_sbrk_r>
   22ea4:	98c00217 	ldw	r3,8(r19)
   22ea8:	1c47883a 	add	r3,r3,r17
   22eac:	10c00a26 	beq	r2,r3,22ed8 <_malloc_trim_r+0x98>
   22eb0:	9009883a 	mov	r4,r18
   22eb4:	0023c100 	call	23c10 <__malloc_unlock>
   22eb8:	0005883a 	mov	r2,zero
   22ebc:	dfc00417 	ldw	ra,16(sp)
   22ec0:	dcc00317 	ldw	r19,12(sp)
   22ec4:	dc800217 	ldw	r18,8(sp)
   22ec8:	dc400117 	ldw	r17,4(sp)
   22ecc:	dc000017 	ldw	r16,0(sp)
   22ed0:	dec00504 	addi	sp,sp,20
   22ed4:	f800283a 	ret
   22ed8:	040bc83a 	sub	r5,zero,r16
   22edc:	9009883a 	mov	r4,r18
   22ee0:	00226740 	call	22674 <_sbrk_r>
   22ee4:	10bfffd8 	cmpnei	r2,r2,-1
   22ee8:	10000d26 	beq	r2,zero,22f20 <_malloc_trim_r+0xe0>
   22eec:	008000f4 	movhi	r2,3
   22ef0:	10a4ad17 	ldw	r2,-27980(r2)
   22ef4:	98c00217 	ldw	r3,8(r19)
   22ef8:	8c23c83a 	sub	r17,r17,r16
   22efc:	8c400054 	ori	r17,r17,1
   22f00:	1405c83a 	sub	r2,r2,r16
   22f04:	1c400115 	stw	r17,4(r3)
   22f08:	9009883a 	mov	r4,r18
   22f0c:	00c000f4 	movhi	r3,3
   22f10:	18a4ad15 	stw	r2,-27980(r3)
   22f14:	0023c100 	call	23c10 <__malloc_unlock>
   22f18:	00800044 	movi	r2,1
   22f1c:	003fe706 	br	22ebc <_malloc_trim_r+0x7c>
   22f20:	000b883a 	mov	r5,zero
   22f24:	9009883a 	mov	r4,r18
   22f28:	00226740 	call	22674 <_sbrk_r>
   22f2c:	99000217 	ldw	r4,8(r19)
   22f30:	1107c83a 	sub	r3,r2,r4
   22f34:	19400410 	cmplti	r5,r3,16
   22f38:	283fdd1e 	bne	r5,zero,22eb0 <_malloc_trim_r+0x70>
   22f3c:	014000b4 	movhi	r5,2
   22f40:	295df817 	ldw	r5,30688(r5)
   22f44:	18c00054 	ori	r3,r3,1
   22f48:	20c00115 	stw	r3,4(r4)
   22f4c:	1145c83a 	sub	r2,r2,r5
   22f50:	014000f4 	movhi	r5,3
   22f54:	28a4ad15 	stw	r2,-27980(r5)
   22f58:	003fd506 	br	22eb0 <_malloc_trim_r+0x70>

00022f5c <_free_r>:
   22f5c:	28004f26 	beq	r5,zero,2309c <_free_r+0x140>
   22f60:	defffd04 	addi	sp,sp,-12
   22f64:	dc400115 	stw	r17,4(sp)
   22f68:	dc000015 	stw	r16,0(sp)
   22f6c:	2023883a 	mov	r17,r4
   22f70:	2821883a 	mov	r16,r5
   22f74:	dfc00215 	stw	ra,8(sp)
   22f78:	0023bec0 	call	23bec <__malloc_lock>
   22f7c:	81ffff17 	ldw	r7,-4(r16)
   22f80:	00bfff84 	movi	r2,-2
   22f84:	80fffe04 	addi	r3,r16,-8
   22f88:	3884703a 	and	r2,r7,r2
   22f8c:	010000b4 	movhi	r4,2
   22f90:	188d883a 	add	r6,r3,r2
   22f94:	21187104 	addi	r4,r4,25028
   22f98:	31400117 	ldw	r5,4(r6)
   22f9c:	22000217 	ldw	r8,8(r4)
   22fa0:	027fff04 	movi	r9,-4
   22fa4:	2a4a703a 	and	r5,r5,r9
   22fa8:	41806426 	beq	r8,r6,2313c <_free_r+0x1e0>
   22fac:	31400115 	stw	r5,4(r6)
   22fb0:	39c0004c 	andi	r7,r7,1
   22fb4:	3151883a 	add	r8,r6,r5
   22fb8:	3800281e 	bne	r7,zero,2305c <_free_r+0x100>
   22fbc:	82bffe17 	ldw	r10,-8(r16)
   22fc0:	42000117 	ldw	r8,4(r8)
   22fc4:	01c000b4 	movhi	r7,2
   22fc8:	1a87c83a 	sub	r3,r3,r10
   22fcc:	1a400217 	ldw	r9,8(r3)
   22fd0:	39d87304 	addi	r7,r7,25036
   22fd4:	1285883a 	add	r2,r2,r10
   22fd8:	4200004c 	andi	r8,r8,1
   22fdc:	49c04c26 	beq	r9,r7,23110 <_free_r+0x1b4>
   22fe0:	1a800317 	ldw	r10,12(r3)
   22fe4:	4a800315 	stw	r10,12(r9)
   22fe8:	52400215 	stw	r9,8(r10)
   22fec:	40007126 	beq	r8,zero,231b4 <_free_r+0x258>
   22ff0:	11400054 	ori	r5,r2,1
   22ff4:	19400115 	stw	r5,4(r3)
   22ff8:	30800015 	stw	r2,0(r6)
   22ffc:	11408028 	cmpgeui	r5,r2,512
   23000:	28002c1e 	bne	r5,zero,230b4 <_free_r+0x158>
   23004:	100ad0fa 	srli	r5,r2,3
   23008:	100cd17a 	srli	r6,r2,5
   2300c:	21c00117 	ldw	r7,4(r4)
   23010:	28800044 	addi	r2,r5,1
   23014:	100490fa 	slli	r2,r2,3
   23018:	01400044 	movi	r5,1
   2301c:	298a983a 	sll	r5,r5,r6
   23020:	2085883a 	add	r2,r4,r2
   23024:	11800017 	ldw	r6,0(r2)
   23028:	29cab03a 	or	r5,r5,r7
   2302c:	11fffe04 	addi	r7,r2,-8
   23030:	19c00315 	stw	r7,12(r3)
   23034:	19800215 	stw	r6,8(r3)
   23038:	21400115 	stw	r5,4(r4)
   2303c:	10c00015 	stw	r3,0(r2)
   23040:	30c00315 	stw	r3,12(r6)
   23044:	8809883a 	mov	r4,r17
   23048:	dfc00217 	ldw	ra,8(sp)
   2304c:	dc400117 	ldw	r17,4(sp)
   23050:	dc000017 	ldw	r16,0(sp)
   23054:	dec00304 	addi	sp,sp,12
   23058:	0023c101 	jmpi	23c10 <__malloc_unlock>
   2305c:	41c00117 	ldw	r7,4(r8)
   23060:	39c0004c 	andi	r7,r7,1
   23064:	38000e1e 	bne	r7,zero,230a0 <_free_r+0x144>
   23068:	01c000b4 	movhi	r7,2
   2306c:	1145883a 	add	r2,r2,r5
   23070:	39d87304 	addi	r7,r7,25036
   23074:	31400217 	ldw	r5,8(r6)
   23078:	12400054 	ori	r9,r2,1
   2307c:	1891883a 	add	r8,r3,r2
   23080:	29c05226 	beq	r5,r7,231cc <_free_r+0x270>
   23084:	31800317 	ldw	r6,12(r6)
   23088:	29800315 	stw	r6,12(r5)
   2308c:	31400215 	stw	r5,8(r6)
   23090:	1a400115 	stw	r9,4(r3)
   23094:	40800015 	stw	r2,0(r8)
   23098:	003fd806 	br	22ffc <_free_r+0xa0>
   2309c:	f800283a 	ret
   230a0:	11400054 	ori	r5,r2,1
   230a4:	817fff15 	stw	r5,-4(r16)
   230a8:	30800015 	stw	r2,0(r6)
   230ac:	11408028 	cmpgeui	r5,r2,512
   230b0:	283fd426 	beq	r5,zero,23004 <_free_r+0xa8>
   230b4:	100ad27a 	srli	r5,r2,9
   230b8:	29800168 	cmpgeui	r6,r5,5
   230bc:	3000341e 	bne	r6,zero,23190 <_free_r+0x234>
   230c0:	100ad1ba 	srli	r5,r2,6
   230c4:	29800e44 	addi	r6,r5,57
   230c8:	300c90fa 	slli	r6,r6,3
   230cc:	29c00e04 	addi	r7,r5,56
   230d0:	218d883a 	add	r6,r4,r6
   230d4:	31400017 	ldw	r5,0(r6)
   230d8:	31bffe04 	addi	r6,r6,-8
   230dc:	31404226 	beq	r6,r5,231e8 <_free_r+0x28c>
   230e0:	01ffff04 	movi	r7,-4
   230e4:	29000117 	ldw	r4,4(r5)
   230e8:	21c8703a 	and	r4,r4,r7
   230ec:	1100022e 	bgeu	r2,r4,230f8 <_free_r+0x19c>
   230f0:	29400217 	ldw	r5,8(r5)
   230f4:	317ffb1e 	bne	r6,r5,230e4 <_free_r+0x188>
   230f8:	29800317 	ldw	r6,12(r5)
   230fc:	19800315 	stw	r6,12(r3)
   23100:	19400215 	stw	r5,8(r3)
   23104:	30c00215 	stw	r3,8(r6)
   23108:	28c00315 	stw	r3,12(r5)
   2310c:	003fcd06 	br	23044 <_free_r+0xe8>
   23110:	40004d1e 	bne	r8,zero,23248 <_free_r+0x2ec>
   23114:	31000317 	ldw	r4,12(r6)
   23118:	31800217 	ldw	r6,8(r6)
   2311c:	288b883a 	add	r5,r5,r2
   23120:	28800054 	ori	r2,r5,1
   23124:	31000315 	stw	r4,12(r6)
   23128:	21800215 	stw	r6,8(r4)
   2312c:	18800115 	stw	r2,4(r3)
   23130:	1947883a 	add	r3,r3,r5
   23134:	19400015 	stw	r5,0(r3)
   23138:	003fc206 	br	23044 <_free_r+0xe8>
   2313c:	39c0004c 	andi	r7,r7,1
   23140:	114b883a 	add	r5,r2,r5
   23144:	3800071e 	bne	r7,zero,23164 <_free_r+0x208>
   23148:	81fffe17 	ldw	r7,-8(r16)
   2314c:	19c7c83a 	sub	r3,r3,r7
   23150:	18800317 	ldw	r2,12(r3)
   23154:	19800217 	ldw	r6,8(r3)
   23158:	29cb883a 	add	r5,r5,r7
   2315c:	30800315 	stw	r2,12(r6)
   23160:	11800215 	stw	r6,8(r2)
   23164:	008000b4 	movhi	r2,2
   23168:	29800054 	ori	r6,r5,1
   2316c:	109df917 	ldw	r2,30692(r2)
   23170:	19800115 	stw	r6,4(r3)
   23174:	20c00215 	stw	r3,8(r4)
   23178:	28bfb236 	bltu	r5,r2,23044 <_free_r+0xe8>
   2317c:	008000f4 	movhi	r2,3
   23180:	1164a317 	ldw	r5,-28020(r2)
   23184:	8809883a 	mov	r4,r17
   23188:	0022e400 	call	22e40 <_malloc_trim_r>
   2318c:	003fad06 	br	23044 <_free_r+0xe8>
   23190:	29800568 	cmpgeui	r6,r5,21
   23194:	30000926 	beq	r6,zero,231bc <_free_r+0x260>
   23198:	29801568 	cmpgeui	r6,r5,85
   2319c:	3000191e 	bne	r6,zero,23204 <_free_r+0x2a8>
   231a0:	100ad33a 	srli	r5,r2,12
   231a4:	29801bc4 	addi	r6,r5,111
   231a8:	300c90fa 	slli	r6,r6,3
   231ac:	29c01b84 	addi	r7,r5,110
   231b0:	003fc706 	br	230d0 <_free_r+0x174>
   231b4:	1145883a 	add	r2,r2,r5
   231b8:	003fae06 	br	23074 <_free_r+0x118>
   231bc:	29801704 	addi	r6,r5,92
   231c0:	300c90fa 	slli	r6,r6,3
   231c4:	29c016c4 	addi	r7,r5,91
   231c8:	003fc106 	br	230d0 <_free_r+0x174>
   231cc:	20c00515 	stw	r3,20(r4)
   231d0:	20c00415 	stw	r3,16(r4)
   231d4:	19c00315 	stw	r7,12(r3)
   231d8:	19c00215 	stw	r7,8(r3)
   231dc:	1a400115 	stw	r9,4(r3)
   231e0:	40800015 	stw	r2,0(r8)
   231e4:	003f9706 	br	23044 <_free_r+0xe8>
   231e8:	380fd0ba 	srai	r7,r7,2
   231ec:	00800044 	movi	r2,1
   231f0:	22000117 	ldw	r8,4(r4)
   231f4:	11c4983a 	sll	r2,r2,r7
   231f8:	1204b03a 	or	r2,r2,r8
   231fc:	20800115 	stw	r2,4(r4)
   23200:	003fbe06 	br	230fc <_free_r+0x1a0>
   23204:	29805568 	cmpgeui	r6,r5,341
   23208:	3000051e 	bne	r6,zero,23220 <_free_r+0x2c4>
   2320c:	100ad3fa 	srli	r5,r2,15
   23210:	29801e04 	addi	r6,r5,120
   23214:	300c90fa 	slli	r6,r6,3
   23218:	29c01dc4 	addi	r7,r5,119
   2321c:	003fac06 	br	230d0 <_free_r+0x174>
   23220:	29415568 	cmpgeui	r5,r5,1365
   23224:	2800051e 	bne	r5,zero,2323c <_free_r+0x2e0>
   23228:	100ad4ba 	srli	r5,r2,18
   2322c:	29801f44 	addi	r6,r5,125
   23230:	300c90fa 	slli	r6,r6,3
   23234:	29c01f04 	addi	r7,r5,124
   23238:	003fa506 	br	230d0 <_free_r+0x174>
   2323c:	0180fe04 	movi	r6,1016
   23240:	01c01f84 	movi	r7,126
   23244:	003fa206 	br	230d0 <_free_r+0x174>
   23248:	11000054 	ori	r4,r2,1
   2324c:	19000115 	stw	r4,4(r3)
   23250:	30800015 	stw	r2,0(r6)
   23254:	003f7b06 	br	23044 <_free_r+0xe8>

00023258 <_lseek_r>:
   23258:	2807883a 	mov	r3,r5
   2325c:	defffe04 	addi	sp,sp,-8
   23260:	dc000015 	stw	r16,0(sp)
   23264:	300b883a 	mov	r5,r6
   23268:	008000f4 	movhi	r2,3
   2326c:	380d883a 	mov	r6,r7
   23270:	2021883a 	mov	r16,r4
   23274:	1809883a 	mov	r4,r3
   23278:	dfc00115 	stw	ra,4(sp)
   2327c:	1024a415 	stw	zero,-28016(r2)
   23280:	0023a900 	call	23a90 <lseek>
   23284:	10ffffd8 	cmpnei	r3,r2,-1
   23288:	18000426 	beq	r3,zero,2329c <_lseek_r+0x44>
   2328c:	dfc00117 	ldw	ra,4(sp)
   23290:	dc000017 	ldw	r16,0(sp)
   23294:	dec00204 	addi	sp,sp,8
   23298:	f800283a 	ret
   2329c:	00c000f4 	movhi	r3,3
   232a0:	18e4a417 	ldw	r3,-28016(r3)
   232a4:	183ff926 	beq	r3,zero,2328c <_lseek_r+0x34>
   232a8:	80c00015 	stw	r3,0(r16)
   232ac:	dfc00117 	ldw	ra,4(sp)
   232b0:	dc000017 	ldw	r16,0(sp)
   232b4:	dec00204 	addi	sp,sp,8
   232b8:	f800283a 	ret

000232bc <__smakebuf_r>:
   232bc:	2880030b 	ldhu	r2,12(r5)
   232c0:	deffe804 	addi	sp,sp,-96
   232c4:	dc001215 	stw	r16,72(sp)
   232c8:	dfc01715 	stw	ra,92(sp)
   232cc:	dd001615 	stw	r20,88(sp)
   232d0:	dcc01515 	stw	r19,84(sp)
   232d4:	dc801415 	stw	r18,80(sp)
   232d8:	dc401315 	stw	r17,76(sp)
   232dc:	10c0008c 	andi	r3,r2,2
   232e0:	2821883a 	mov	r16,r5
   232e4:	18000d26 	beq	r3,zero,2331c <__smakebuf_r+0x60>
   232e8:	288010c4 	addi	r2,r5,67
   232ec:	28800015 	stw	r2,0(r5)
   232f0:	28800415 	stw	r2,16(r5)
   232f4:	00800044 	movi	r2,1
   232f8:	28800515 	stw	r2,20(r5)
   232fc:	dfc01717 	ldw	ra,92(sp)
   23300:	dd001617 	ldw	r20,88(sp)
   23304:	dcc01517 	ldw	r19,84(sp)
   23308:	dc801417 	ldw	r18,80(sp)
   2330c:	dc401317 	ldw	r17,76(sp)
   23310:	dc001217 	ldw	r16,72(sp)
   23314:	dec01804 	addi	sp,sp,96
   23318:	f800283a 	ret
   2331c:	2940038f 	ldh	r5,14(r5)
   23320:	2023883a 	mov	r17,r4
   23324:	28002816 	blt	r5,zero,233c8 <__smakebuf_r+0x10c>
   23328:	d80d883a 	mov	r6,sp
   2332c:	00235600 	call	23560 <_fstat_r>
   23330:	10002416 	blt	r2,zero,233c4 <__smakebuf_r+0x108>
   23334:	d8800117 	ldw	r2,4(sp)
   23338:	10bc000c 	andi	r2,r2,61440
   2333c:	10880018 	cmpnei	r2,r2,8192
   23340:	1000461e 	bne	r2,zero,2345c <__smakebuf_r+0x1a0>
   23344:	8140038f 	ldh	r5,14(r16)
   23348:	8809883a 	mov	r4,r17
   2334c:	00235c00 	call	235c0 <_isatty_r>
   23350:	10003e26 	beq	r2,zero,2344c <__smakebuf_r+0x190>
   23354:	8080030b 	ldhu	r2,12(r16)
   23358:	80c010c4 	addi	r3,r16,67
   2335c:	80c00015 	stw	r3,0(r16)
   23360:	10800054 	ori	r2,r2,1
   23364:	8080030d 	sth	r2,12(r16)
   23368:	00800044 	movi	r2,1
   2336c:	80c00415 	stw	r3,16(r16)
   23370:	80800515 	stw	r2,20(r16)
   23374:	04c00044 	movi	r19,1
   23378:	05010004 	movi	r20,1024
   2337c:	04820004 	movi	r18,2048
   23380:	a00b883a 	mov	r5,r20
   23384:	8809883a 	mov	r4,r17
   23388:	00216340 	call	21634 <_malloc_r>
   2338c:	10001726 	beq	r2,zero,233ec <__smakebuf_r+0x130>
   23390:	80c0030b 	ldhu	r3,12(r16)
   23394:	010000b4 	movhi	r4,2
   23398:	21032704 	addi	r4,r4,3228
   2339c:	89000f15 	stw	r4,60(r17)
   233a0:	18c02014 	ori	r3,r3,128
   233a4:	80c0030d 	sth	r3,12(r16)
   233a8:	80800015 	stw	r2,0(r16)
   233ac:	80800415 	stw	r2,16(r16)
   233b0:	85000515 	stw	r20,20(r16)
   233b4:	98001d1e 	bne	r19,zero,2342c <__smakebuf_r+0x170>
   233b8:	90e4b03a 	or	r18,r18,r3
   233bc:	8480030d 	sth	r18,12(r16)
   233c0:	003fce06 	br	232fc <__smakebuf_r+0x40>
   233c4:	8080030b 	ldhu	r2,12(r16)
   233c8:	1080200c 	andi	r2,r2,128
   233cc:	0027883a 	mov	r19,zero
   233d0:	10001326 	beq	r2,zero,23420 <__smakebuf_r+0x164>
   233d4:	05001004 	movi	r20,64
   233d8:	a00b883a 	mov	r5,r20
   233dc:	8809883a 	mov	r4,r17
   233e0:	0025883a 	mov	r18,zero
   233e4:	00216340 	call	21634 <_malloc_r>
   233e8:	103fe91e 	bne	r2,zero,23390 <__smakebuf_r+0xd4>
   233ec:	8080030b 	ldhu	r2,12(r16)
   233f0:	10c0800c 	andi	r3,r2,512
   233f4:	183fc11e 	bne	r3,zero,232fc <__smakebuf_r+0x40>
   233f8:	00ffff04 	movi	r3,-4
   233fc:	10c4703a 	and	r2,r2,r3
   23400:	10800094 	ori	r2,r2,2
   23404:	80c010c4 	addi	r3,r16,67
   23408:	8080030d 	sth	r2,12(r16)
   2340c:	00800044 	movi	r2,1
   23410:	80c00015 	stw	r3,0(r16)
   23414:	80c00415 	stw	r3,16(r16)
   23418:	80800515 	stw	r2,20(r16)
   2341c:	003fb706 	br	232fc <__smakebuf_r+0x40>
   23420:	05010004 	movi	r20,1024
   23424:	0025883a 	mov	r18,zero
   23428:	003fd506 	br	23380 <__smakebuf_r+0xc4>
   2342c:	8140038f 	ldh	r5,14(r16)
   23430:	8809883a 	mov	r4,r17
   23434:	00235c00 	call	235c0 <_isatty_r>
   23438:	80c0030b 	ldhu	r3,12(r16)
   2343c:	103fde26 	beq	r2,zero,233b8 <__smakebuf_r+0xfc>
   23440:	18ffff0c 	andi	r3,r3,65532
   23444:	18c00054 	ori	r3,r3,1
   23448:	003fdb06 	br	233b8 <__smakebuf_r+0xfc>
   2344c:	04c00044 	movi	r19,1
   23450:	05010004 	movi	r20,1024
   23454:	04820004 	movi	r18,2048
   23458:	003fc906 	br	23380 <__smakebuf_r+0xc4>
   2345c:	0027883a 	mov	r19,zero
   23460:	05010004 	movi	r20,1024
   23464:	04820004 	movi	r18,2048
   23468:	003fc506 	br	23380 <__smakebuf_r+0xc4>

0002346c <__swhatbuf_r>:
   2346c:	deffea04 	addi	sp,sp,-88
   23470:	dc001215 	stw	r16,72(sp)
   23474:	2821883a 	mov	r16,r5
   23478:	2940038f 	ldh	r5,14(r5)
   2347c:	dc801415 	stw	r18,80(sp)
   23480:	dc401315 	stw	r17,76(sp)
   23484:	dfc01515 	stw	ra,84(sp)
   23488:	3023883a 	mov	r17,r6
   2348c:	3825883a 	mov	r18,r7
   23490:	28001016 	blt	r5,zero,234d4 <__swhatbuf_r+0x68>
   23494:	d80d883a 	mov	r6,sp
   23498:	00235600 	call	23560 <_fstat_r>
   2349c:	10000d16 	blt	r2,zero,234d4 <__swhatbuf_r+0x68>
   234a0:	d8c00117 	ldw	r3,4(sp)
   234a4:	01010004 	movi	r4,1024
   234a8:	00820004 	movi	r2,2048
   234ac:	18fc000c 	andi	r3,r3,61440
   234b0:	18c80020 	cmpeqi	r3,r3,8192
   234b4:	90c00015 	stw	r3,0(r18)
   234b8:	89000015 	stw	r4,0(r17)
   234bc:	dfc01517 	ldw	ra,84(sp)
   234c0:	dc801417 	ldw	r18,80(sp)
   234c4:	dc401317 	ldw	r17,76(sp)
   234c8:	dc001217 	ldw	r16,72(sp)
   234cc:	dec01604 	addi	sp,sp,88
   234d0:	f800283a 	ret
   234d4:	8080030b 	ldhu	r2,12(r16)
   234d8:	0007883a 	mov	r3,zero
   234dc:	1080200c 	andi	r2,r2,128
   234e0:	10000326 	beq	r2,zero,234f0 <__swhatbuf_r+0x84>
   234e4:	01001004 	movi	r4,64
   234e8:	0005883a 	mov	r2,zero
   234ec:	003ff106 	br	234b4 <__swhatbuf_r+0x48>
   234f0:	01010004 	movi	r4,1024
   234f4:	0005883a 	mov	r2,zero
   234f8:	003fee06 	br	234b4 <__swhatbuf_r+0x48>

000234fc <_read_r>:
   234fc:	2807883a 	mov	r3,r5
   23500:	defffe04 	addi	sp,sp,-8
   23504:	dc000015 	stw	r16,0(sp)
   23508:	300b883a 	mov	r5,r6
   2350c:	008000f4 	movhi	r2,3
   23510:	380d883a 	mov	r6,r7
   23514:	2021883a 	mov	r16,r4
   23518:	1809883a 	mov	r4,r3
   2351c:	dfc00115 	stw	ra,4(sp)
   23520:	1024a415 	stw	zero,-28016(r2)
   23524:	0023c700 	call	23c70 <read>
   23528:	10ffffd8 	cmpnei	r3,r2,-1
   2352c:	18000426 	beq	r3,zero,23540 <_read_r+0x44>
   23530:	dfc00117 	ldw	ra,4(sp)
   23534:	dc000017 	ldw	r16,0(sp)
   23538:	dec00204 	addi	sp,sp,8
   2353c:	f800283a 	ret
   23540:	00c000f4 	movhi	r3,3
   23544:	18e4a417 	ldw	r3,-28016(r3)
   23548:	183ff926 	beq	r3,zero,23530 <_read_r+0x34>
   2354c:	80c00015 	stw	r3,0(r16)
   23550:	dfc00117 	ldw	ra,4(sp)
   23554:	dc000017 	ldw	r16,0(sp)
   23558:	dec00204 	addi	sp,sp,8
   2355c:	f800283a 	ret

00023560 <_fstat_r>:
   23560:	2807883a 	mov	r3,r5
   23564:	defffe04 	addi	sp,sp,-8
   23568:	dc000015 	stw	r16,0(sp)
   2356c:	008000f4 	movhi	r2,3
   23570:	300b883a 	mov	r5,r6
   23574:	2021883a 	mov	r16,r4
   23578:	1809883a 	mov	r4,r3
   2357c:	dfc00115 	stw	ra,4(sp)
   23580:	1024a415 	stw	zero,-28016(r2)
   23584:	00237c00 	call	237c0 <fstat>
   23588:	10ffffd8 	cmpnei	r3,r2,-1
   2358c:	18000426 	beq	r3,zero,235a0 <_fstat_r+0x40>
   23590:	dfc00117 	ldw	ra,4(sp)
   23594:	dc000017 	ldw	r16,0(sp)
   23598:	dec00204 	addi	sp,sp,8
   2359c:	f800283a 	ret
   235a0:	00c000f4 	movhi	r3,3
   235a4:	18e4a417 	ldw	r3,-28016(r3)
   235a8:	183ff926 	beq	r3,zero,23590 <_fstat_r+0x30>
   235ac:	80c00015 	stw	r3,0(r16)
   235b0:	dfc00117 	ldw	ra,4(sp)
   235b4:	dc000017 	ldw	r16,0(sp)
   235b8:	dec00204 	addi	sp,sp,8
   235bc:	f800283a 	ret

000235c0 <_isatty_r>:
   235c0:	defffe04 	addi	sp,sp,-8
   235c4:	dc000015 	stw	r16,0(sp)
   235c8:	008000f4 	movhi	r2,3
   235cc:	2021883a 	mov	r16,r4
   235d0:	2809883a 	mov	r4,r5
   235d4:	dfc00115 	stw	ra,4(sp)
   235d8:	1024a415 	stw	zero,-28016(r2)
   235dc:	00238b80 	call	238b8 <isatty>
   235e0:	10ffffd8 	cmpnei	r3,r2,-1
   235e4:	18000426 	beq	r3,zero,235f8 <_isatty_r+0x38>
   235e8:	dfc00117 	ldw	ra,4(sp)
   235ec:	dc000017 	ldw	r16,0(sp)
   235f0:	dec00204 	addi	sp,sp,8
   235f4:	f800283a 	ret
   235f8:	00c000f4 	movhi	r3,3
   235fc:	18e4a417 	ldw	r3,-28016(r3)
   23600:	183ff926 	beq	r3,zero,235e8 <_isatty_r+0x28>
   23604:	80c00015 	stw	r3,0(r16)
   23608:	dfc00117 	ldw	ra,4(sp)
   2360c:	dc000017 	ldw	r16,0(sp)
   23610:	dec00204 	addi	sp,sp,8
   23614:	f800283a 	ret

00023618 <__mulsi3>:
   23618:	0005883a 	mov	r2,zero
   2361c:	20000726 	beq	r4,zero,2363c <__mulsi3+0x24>
   23620:	20c0004c 	andi	r3,r4,1
   23624:	2008d07a 	srli	r4,r4,1
   23628:	18000126 	beq	r3,zero,23630 <__mulsi3+0x18>
   2362c:	1145883a 	add	r2,r2,r5
   23630:	294b883a 	add	r5,r5,r5
   23634:	203ffa1e 	bne	r4,zero,23620 <__mulsi3+0x8>
   23638:	f800283a 	ret
   2363c:	f800283a 	ret

00023640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23640:	defffe04 	addi	sp,sp,-8
   23644:	dfc00115 	stw	ra,4(sp)
   23648:	df000015 	stw	fp,0(sp)
   2364c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23650:	d0a00a17 	ldw	r2,-32728(gp)
   23654:	10000326 	beq	r2,zero,23664 <alt_get_errno+0x24>
   23658:	d0a00a17 	ldw	r2,-32728(gp)
   2365c:	103ee83a 	callr	r2
   23660:	00000106 	br	23668 <alt_get_errno+0x28>
   23664:	d0a6af04 	addi	r2,gp,-25924
}
   23668:	e037883a 	mov	sp,fp
   2366c:	dfc00117 	ldw	ra,4(sp)
   23670:	df000017 	ldw	fp,0(sp)
   23674:	dec00204 	addi	sp,sp,8
   23678:	f800283a 	ret

0002367c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2367c:	defffb04 	addi	sp,sp,-20
   23680:	dfc00415 	stw	ra,16(sp)
   23684:	df000315 	stw	fp,12(sp)
   23688:	df000304 	addi	fp,sp,12
   2368c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23690:	e0bffd17 	ldw	r2,-12(fp)
   23694:	10000916 	blt	r2,zero,236bc <close+0x40>
   23698:	e0fffd17 	ldw	r3,-12(fp)
   2369c:	1805883a 	mov	r2,r3
   236a0:	1085883a 	add	r2,r2,r2
   236a4:	10c5883a 	add	r2,r2,r3
   236a8:	100490ba 	slli	r2,r2,2
   236ac:	00c000b4 	movhi	r3,2
   236b0:	18d97d04 	addi	r3,r3,26100
   236b4:	10c5883a 	add	r2,r2,r3
   236b8:	00000106 	br	236c0 <close+0x44>
   236bc:	0005883a 	mov	r2,zero
   236c0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   236c4:	e0bfff17 	ldw	r2,-4(fp)
   236c8:	10001926 	beq	r2,zero,23730 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   236cc:	e0bfff17 	ldw	r2,-4(fp)
   236d0:	10800017 	ldw	r2,0(r2)
   236d4:	10800417 	ldw	r2,16(r2)
   236d8:	10000626 	beq	r2,zero,236f4 <close+0x78>
   236dc:	e0bfff17 	ldw	r2,-4(fp)
   236e0:	10800017 	ldw	r2,0(r2)
   236e4:	10800417 	ldw	r2,16(r2)
   236e8:	e13fff17 	ldw	r4,-4(fp)
   236ec:	103ee83a 	callr	r2
   236f0:	00000106 	br	236f8 <close+0x7c>
   236f4:	0005883a 	mov	r2,zero
   236f8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   236fc:	e13ffd17 	ldw	r4,-12(fp)
   23700:	0023d780 	call	23d78 <alt_release_fd>
    if (rval < 0)
   23704:	e0bffe17 	ldw	r2,-8(fp)
   23708:	1000070e 	bge	r2,zero,23728 <close+0xac>
    {
      ALT_ERRNO = -rval;
   2370c:	00236400 	call	23640 <alt_get_errno>
   23710:	1007883a 	mov	r3,r2
   23714:	e0bffe17 	ldw	r2,-8(fp)
   23718:	0085c83a 	sub	r2,zero,r2
   2371c:	18800015 	stw	r2,0(r3)
      return -1;
   23720:	00bfffc4 	movi	r2,-1
   23724:	00000706 	br	23744 <close+0xc8>
    }
    return 0;
   23728:	0005883a 	mov	r2,zero
   2372c:	00000506 	br	23744 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23730:	00236400 	call	23640 <alt_get_errno>
   23734:	1007883a 	mov	r3,r2
   23738:	00801444 	movi	r2,81
   2373c:	18800015 	stw	r2,0(r3)
    return -1;
   23740:	00bfffc4 	movi	r2,-1
  }
}
   23744:	e037883a 	mov	sp,fp
   23748:	dfc00117 	ldw	ra,4(sp)
   2374c:	df000017 	ldw	fp,0(sp)
   23750:	dec00204 	addi	sp,sp,8
   23754:	f800283a 	ret

00023758 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23758:	defffc04 	addi	sp,sp,-16
   2375c:	df000315 	stw	fp,12(sp)
   23760:	df000304 	addi	fp,sp,12
   23764:	e13fff15 	stw	r4,-4(fp)
   23768:	e17ffe15 	stw	r5,-8(fp)
   2376c:	e1bffd15 	stw	r6,-12(fp)
  return len;
   23770:	e0bffd17 	ldw	r2,-12(fp)
}
   23774:	e037883a 	mov	sp,fp
   23778:	df000017 	ldw	fp,0(sp)
   2377c:	dec00104 	addi	sp,sp,4
   23780:	f800283a 	ret

00023784 <alt_get_errno>:
{
   23784:	defffe04 	addi	sp,sp,-8
   23788:	dfc00115 	stw	ra,4(sp)
   2378c:	df000015 	stw	fp,0(sp)
   23790:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23794:	d0a00a17 	ldw	r2,-32728(gp)
   23798:	10000326 	beq	r2,zero,237a8 <alt_get_errno+0x24>
   2379c:	d0a00a17 	ldw	r2,-32728(gp)
   237a0:	103ee83a 	callr	r2
   237a4:	00000106 	br	237ac <alt_get_errno+0x28>
   237a8:	d0a6af04 	addi	r2,gp,-25924
}
   237ac:	e037883a 	mov	sp,fp
   237b0:	dfc00117 	ldw	ra,4(sp)
   237b4:	df000017 	ldw	fp,0(sp)
   237b8:	dec00204 	addi	sp,sp,8
   237bc:	f800283a 	ret

000237c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   237c0:	defffb04 	addi	sp,sp,-20
   237c4:	dfc00415 	stw	ra,16(sp)
   237c8:	df000315 	stw	fp,12(sp)
   237cc:	df000304 	addi	fp,sp,12
   237d0:	e13ffe15 	stw	r4,-8(fp)
   237d4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   237d8:	e0bffe17 	ldw	r2,-8(fp)
   237dc:	10000916 	blt	r2,zero,23804 <fstat+0x44>
   237e0:	e0fffe17 	ldw	r3,-8(fp)
   237e4:	1805883a 	mov	r2,r3
   237e8:	1085883a 	add	r2,r2,r2
   237ec:	10c5883a 	add	r2,r2,r3
   237f0:	100490ba 	slli	r2,r2,2
   237f4:	00c000b4 	movhi	r3,2
   237f8:	18d97d04 	addi	r3,r3,26100
   237fc:	10c5883a 	add	r2,r2,r3
   23800:	00000106 	br	23808 <fstat+0x48>
   23804:	0005883a 	mov	r2,zero
   23808:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   2380c:	e0bfff17 	ldw	r2,-4(fp)
   23810:	10001026 	beq	r2,zero,23854 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23814:	e0bfff17 	ldw	r2,-4(fp)
   23818:	10800017 	ldw	r2,0(r2)
   2381c:	10800817 	ldw	r2,32(r2)
   23820:	10000726 	beq	r2,zero,23840 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   23824:	e0bfff17 	ldw	r2,-4(fp)
   23828:	10800017 	ldw	r2,0(r2)
   2382c:	10800817 	ldw	r2,32(r2)
   23830:	e17ffd17 	ldw	r5,-12(fp)
   23834:	e13fff17 	ldw	r4,-4(fp)
   23838:	103ee83a 	callr	r2
   2383c:	00000a06 	br	23868 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23840:	e0bffd17 	ldw	r2,-12(fp)
   23844:	00c80004 	movi	r3,8192
   23848:	10c00115 	stw	r3,4(r2)
      return 0;
   2384c:	0005883a 	mov	r2,zero
   23850:	00000506 	br	23868 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23854:	00237840 	call	23784 <alt_get_errno>
   23858:	1007883a 	mov	r3,r2
   2385c:	00801444 	movi	r2,81
   23860:	18800015 	stw	r2,0(r3)
    return -1;
   23864:	00bfffc4 	movi	r2,-1
  }
}
   23868:	e037883a 	mov	sp,fp
   2386c:	dfc00117 	ldw	ra,4(sp)
   23870:	df000017 	ldw	fp,0(sp)
   23874:	dec00204 	addi	sp,sp,8
   23878:	f800283a 	ret

0002387c <alt_get_errno>:
{
   2387c:	defffe04 	addi	sp,sp,-8
   23880:	dfc00115 	stw	ra,4(sp)
   23884:	df000015 	stw	fp,0(sp)
   23888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2388c:	d0a00a17 	ldw	r2,-32728(gp)
   23890:	10000326 	beq	r2,zero,238a0 <alt_get_errno+0x24>
   23894:	d0a00a17 	ldw	r2,-32728(gp)
   23898:	103ee83a 	callr	r2
   2389c:	00000106 	br	238a4 <alt_get_errno+0x28>
   238a0:	d0a6af04 	addi	r2,gp,-25924
}
   238a4:	e037883a 	mov	sp,fp
   238a8:	dfc00117 	ldw	ra,4(sp)
   238ac:	df000017 	ldw	fp,0(sp)
   238b0:	dec00204 	addi	sp,sp,8
   238b4:	f800283a 	ret

000238b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   238b8:	deffea04 	addi	sp,sp,-88
   238bc:	dfc01515 	stw	ra,84(sp)
   238c0:	df001415 	stw	fp,80(sp)
   238c4:	df001404 	addi	fp,sp,80
   238c8:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   238cc:	e0bfec17 	ldw	r2,-80(fp)
   238d0:	10000916 	blt	r2,zero,238f8 <isatty+0x40>
   238d4:	e0ffec17 	ldw	r3,-80(fp)
   238d8:	1805883a 	mov	r2,r3
   238dc:	1085883a 	add	r2,r2,r2
   238e0:	10c5883a 	add	r2,r2,r3
   238e4:	100490ba 	slli	r2,r2,2
   238e8:	00c000b4 	movhi	r3,2
   238ec:	18d97d04 	addi	r3,r3,26100
   238f0:	10c5883a 	add	r2,r2,r3
   238f4:	00000106 	br	238fc <isatty+0x44>
   238f8:	0005883a 	mov	r2,zero
   238fc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23900:	e0bfff17 	ldw	r2,-4(fp)
   23904:	10000e26 	beq	r2,zero,23940 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23908:	e0bfff17 	ldw	r2,-4(fp)
   2390c:	10800017 	ldw	r2,0(r2)
   23910:	10800817 	ldw	r2,32(r2)
   23914:	1000021e 	bne	r2,zero,23920 <isatty+0x68>
    {
      return 1;
   23918:	00800044 	movi	r2,1
   2391c:	00000d06 	br	23954 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23920:	e0bfed04 	addi	r2,fp,-76
   23924:	100b883a 	mov	r5,r2
   23928:	e13fec17 	ldw	r4,-80(fp)
   2392c:	00237c00 	call	237c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23930:	e0bfee17 	ldw	r2,-72(fp)
   23934:	10880020 	cmpeqi	r2,r2,8192
   23938:	10803fcc 	andi	r2,r2,255
   2393c:	00000506 	br	23954 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23940:	002387c0 	call	2387c <alt_get_errno>
   23944:	1007883a 	mov	r3,r2
   23948:	00801444 	movi	r2,81
   2394c:	18800015 	stw	r2,0(r3)
    return 0;
   23950:	0005883a 	mov	r2,zero
  }
}
   23954:	e037883a 	mov	sp,fp
   23958:	dfc00117 	ldw	ra,4(sp)
   2395c:	df000017 	ldw	fp,0(sp)
   23960:	dec00204 	addi	sp,sp,8
   23964:	f800283a 	ret

00023968 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23968:	defffc04 	addi	sp,sp,-16
   2396c:	df000315 	stw	fp,12(sp)
   23970:	df000304 	addi	fp,sp,12
   23974:	e13fff15 	stw	r4,-4(fp)
   23978:	e17ffe15 	stw	r5,-8(fp)
   2397c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   23980:	e0fffe17 	ldw	r3,-8(fp)
   23984:	e0bfff17 	ldw	r2,-4(fp)
   23988:	18800c26 	beq	r3,r2,239bc <alt_load_section+0x54>
  {
    while( to != end )
   2398c:	00000806 	br	239b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23990:	e0ffff17 	ldw	r3,-4(fp)
   23994:	18800104 	addi	r2,r3,4
   23998:	e0bfff15 	stw	r2,-4(fp)
   2399c:	e0bffe17 	ldw	r2,-8(fp)
   239a0:	11000104 	addi	r4,r2,4
   239a4:	e13ffe15 	stw	r4,-8(fp)
   239a8:	18c00017 	ldw	r3,0(r3)
   239ac:	10c00015 	stw	r3,0(r2)
    while( to != end )
   239b0:	e0fffe17 	ldw	r3,-8(fp)
   239b4:	e0bffd17 	ldw	r2,-12(fp)
   239b8:	18bff51e 	bne	r3,r2,23990 <alt_load_section+0x28>
    }
  }
}
   239bc:	0001883a 	nop
   239c0:	e037883a 	mov	sp,fp
   239c4:	df000017 	ldw	fp,0(sp)
   239c8:	dec00104 	addi	sp,sp,4
   239cc:	f800283a 	ret

000239d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   239d0:	defffe04 	addi	sp,sp,-8
   239d4:	dfc00115 	stw	ra,4(sp)
   239d8:	df000015 	stw	fp,0(sp)
   239dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   239e0:	018000b4 	movhi	r6,2
   239e4:	319e0404 	addi	r6,r6,30736
   239e8:	014000b4 	movhi	r5,2
   239ec:	29576804 	addi	r5,r5,23968
   239f0:	010000b4 	movhi	r4,2
   239f4:	211e0404 	addi	r4,r4,30736
   239f8:	00239680 	call	23968 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   239fc:	018000b4 	movhi	r6,2
   23a00:	31808904 	addi	r6,r6,548
   23a04:	014000b4 	movhi	r5,2
   23a08:	29400804 	addi	r5,r5,32
   23a0c:	010000b4 	movhi	r4,2
   23a10:	21000804 	addi	r4,r4,32
   23a14:	00239680 	call	23968 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23a18:	018000b4 	movhi	r6,2
   23a1c:	31976804 	addi	r6,r6,23968
   23a20:	014000b4 	movhi	r5,2
   23a24:	29574d04 	addi	r5,r5,23860
   23a28:	010000b4 	movhi	r4,2
   23a2c:	21174d04 	addi	r4,r4,23860
   23a30:	00239680 	call	23968 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23a34:	0024d880 	call	24d88 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23a38:	0024f540 	call	24f54 <alt_icache_flush_all>
}
   23a3c:	0001883a 	nop
   23a40:	e037883a 	mov	sp,fp
   23a44:	dfc00117 	ldw	ra,4(sp)
   23a48:	df000017 	ldw	fp,0(sp)
   23a4c:	dec00204 	addi	sp,sp,8
   23a50:	f800283a 	ret

00023a54 <alt_get_errno>:
{
   23a54:	defffe04 	addi	sp,sp,-8
   23a58:	dfc00115 	stw	ra,4(sp)
   23a5c:	df000015 	stw	fp,0(sp)
   23a60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23a64:	d0a00a17 	ldw	r2,-32728(gp)
   23a68:	10000326 	beq	r2,zero,23a78 <alt_get_errno+0x24>
   23a6c:	d0a00a17 	ldw	r2,-32728(gp)
   23a70:	103ee83a 	callr	r2
   23a74:	00000106 	br	23a7c <alt_get_errno+0x28>
   23a78:	d0a6af04 	addi	r2,gp,-25924
}
   23a7c:	e037883a 	mov	sp,fp
   23a80:	dfc00117 	ldw	ra,4(sp)
   23a84:	df000017 	ldw	fp,0(sp)
   23a88:	dec00204 	addi	sp,sp,8
   23a8c:	f800283a 	ret

00023a90 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23a90:	defff904 	addi	sp,sp,-28
   23a94:	dfc00615 	stw	ra,24(sp)
   23a98:	df000515 	stw	fp,20(sp)
   23a9c:	df000504 	addi	fp,sp,20
   23aa0:	e13ffd15 	stw	r4,-12(fp)
   23aa4:	e17ffc15 	stw	r5,-16(fp)
   23aa8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23aac:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23ab0:	e0bffd17 	ldw	r2,-12(fp)
   23ab4:	10000916 	blt	r2,zero,23adc <lseek+0x4c>
   23ab8:	e0fffd17 	ldw	r3,-12(fp)
   23abc:	1805883a 	mov	r2,r3
   23ac0:	1085883a 	add	r2,r2,r2
   23ac4:	10c5883a 	add	r2,r2,r3
   23ac8:	100490ba 	slli	r2,r2,2
   23acc:	00c000b4 	movhi	r3,2
   23ad0:	18d97d04 	addi	r3,r3,26100
   23ad4:	10c5883a 	add	r2,r2,r3
   23ad8:	00000106 	br	23ae0 <lseek+0x50>
   23adc:	0005883a 	mov	r2,zero
   23ae0:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   23ae4:	e0bffe17 	ldw	r2,-8(fp)
   23ae8:	10001026 	beq	r2,zero,23b2c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23aec:	e0bffe17 	ldw	r2,-8(fp)
   23af0:	10800017 	ldw	r2,0(r2)
   23af4:	10800717 	ldw	r2,28(r2)
   23af8:	10000926 	beq	r2,zero,23b20 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23afc:	e0bffe17 	ldw	r2,-8(fp)
   23b00:	10800017 	ldw	r2,0(r2)
   23b04:	10800717 	ldw	r2,28(r2)
   23b08:	e1bffb17 	ldw	r6,-20(fp)
   23b0c:	e17ffc17 	ldw	r5,-16(fp)
   23b10:	e13ffe17 	ldw	r4,-8(fp)
   23b14:	103ee83a 	callr	r2
   23b18:	e0bfff15 	stw	r2,-4(fp)
   23b1c:	00000506 	br	23b34 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23b20:	00bfde84 	movi	r2,-134
   23b24:	e0bfff15 	stw	r2,-4(fp)
   23b28:	00000206 	br	23b34 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   23b2c:	00bfebc4 	movi	r2,-81
   23b30:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   23b34:	e0bfff17 	ldw	r2,-4(fp)
   23b38:	1000070e 	bge	r2,zero,23b58 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   23b3c:	0023a540 	call	23a54 <alt_get_errno>
   23b40:	1007883a 	mov	r3,r2
   23b44:	e0bfff17 	ldw	r2,-4(fp)
   23b48:	0085c83a 	sub	r2,zero,r2
   23b4c:	18800015 	stw	r2,0(r3)
    rc = -1;
   23b50:	00bfffc4 	movi	r2,-1
   23b54:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   23b58:	e0bfff17 	ldw	r2,-4(fp)
}
   23b5c:	e037883a 	mov	sp,fp
   23b60:	dfc00117 	ldw	ra,4(sp)
   23b64:	df000017 	ldw	fp,0(sp)
   23b68:	dec00204 	addi	sp,sp,8
   23b6c:	f800283a 	ret

00023b70 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23b70:	defffd04 	addi	sp,sp,-12
   23b74:	dfc00215 	stw	ra,8(sp)
   23b78:	df000115 	stw	fp,4(sp)
   23b7c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23b80:	0009883a 	mov	r4,zero
   23b84:	00240140 	call	24014 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23b88:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23b8c:	00240500 	call	24050 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23b90:	018000b4 	movhi	r6,2
   23b94:	31976004 	addi	r6,r6,23936
   23b98:	014000b4 	movhi	r5,2
   23b9c:	29576004 	addi	r5,r5,23936
   23ba0:	010000b4 	movhi	r4,2
   23ba4:	21176004 	addi	r4,r4,23936
   23ba8:	00252e00 	call	252e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23bac:	0024e8c0 	call	24e8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23bb0:	010000b4 	movhi	r4,2
   23bb4:	2113bc04 	addi	r4,r4,20208
   23bb8:	0025a8c0 	call	25a8c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23bbc:	d0a6b017 	ldw	r2,-25920(gp)
   23bc0:	d0e6b117 	ldw	r3,-25916(gp)
   23bc4:	d126b217 	ldw	r4,-25912(gp)
   23bc8:	200d883a 	mov	r6,r4
   23bcc:	180b883a 	mov	r5,r3
   23bd0:	1009883a 	mov	r4,r2
   23bd4:	00204380 	call	20438 <main>
   23bd8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23bdc:	01000044 	movi	r4,1
   23be0:	002367c0 	call	2367c <close>
  exit (result);
   23be4:	e13fff17 	ldw	r4,-4(fp)
   23be8:	0025aa00 	call	25aa0 <exit>

00023bec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23bec:	defffe04 	addi	sp,sp,-8
   23bf0:	df000115 	stw	fp,4(sp)
   23bf4:	df000104 	addi	fp,sp,4
   23bf8:	e13fff15 	stw	r4,-4(fp)
}
   23bfc:	0001883a 	nop
   23c00:	e037883a 	mov	sp,fp
   23c04:	df000017 	ldw	fp,0(sp)
   23c08:	dec00104 	addi	sp,sp,4
   23c0c:	f800283a 	ret

00023c10 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23c10:	defffe04 	addi	sp,sp,-8
   23c14:	df000115 	stw	fp,4(sp)
   23c18:	df000104 	addi	fp,sp,4
   23c1c:	e13fff15 	stw	r4,-4(fp)
}
   23c20:	0001883a 	nop
   23c24:	e037883a 	mov	sp,fp
   23c28:	df000017 	ldw	fp,0(sp)
   23c2c:	dec00104 	addi	sp,sp,4
   23c30:	f800283a 	ret

00023c34 <alt_get_errno>:
{
   23c34:	defffe04 	addi	sp,sp,-8
   23c38:	dfc00115 	stw	ra,4(sp)
   23c3c:	df000015 	stw	fp,0(sp)
   23c40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23c44:	d0a00a17 	ldw	r2,-32728(gp)
   23c48:	10000326 	beq	r2,zero,23c58 <alt_get_errno+0x24>
   23c4c:	d0a00a17 	ldw	r2,-32728(gp)
   23c50:	103ee83a 	callr	r2
   23c54:	00000106 	br	23c5c <alt_get_errno+0x28>
   23c58:	d0a6af04 	addi	r2,gp,-25924
}
   23c5c:	e037883a 	mov	sp,fp
   23c60:	dfc00117 	ldw	ra,4(sp)
   23c64:	df000017 	ldw	fp,0(sp)
   23c68:	dec00204 	addi	sp,sp,8
   23c6c:	f800283a 	ret

00023c70 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23c70:	defff904 	addi	sp,sp,-28
   23c74:	dfc00615 	stw	ra,24(sp)
   23c78:	df000515 	stw	fp,20(sp)
   23c7c:	df000504 	addi	fp,sp,20
   23c80:	e13ffd15 	stw	r4,-12(fp)
   23c84:	e17ffc15 	stw	r5,-16(fp)
   23c88:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23c8c:	e0bffd17 	ldw	r2,-12(fp)
   23c90:	10000916 	blt	r2,zero,23cb8 <read+0x48>
   23c94:	e0fffd17 	ldw	r3,-12(fp)
   23c98:	1805883a 	mov	r2,r3
   23c9c:	1085883a 	add	r2,r2,r2
   23ca0:	10c5883a 	add	r2,r2,r3
   23ca4:	100490ba 	slli	r2,r2,2
   23ca8:	00c000b4 	movhi	r3,2
   23cac:	18d97d04 	addi	r3,r3,26100
   23cb0:	10c5883a 	add	r2,r2,r3
   23cb4:	00000106 	br	23cbc <read+0x4c>
   23cb8:	0005883a 	mov	r2,zero
   23cbc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23cc0:	e0bfff17 	ldw	r2,-4(fp)
   23cc4:	10002226 	beq	r2,zero,23d50 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23cc8:	e0bfff17 	ldw	r2,-4(fp)
   23ccc:	10800217 	ldw	r2,8(r2)
   23cd0:	108000cc 	andi	r2,r2,3
   23cd4:	10800060 	cmpeqi	r2,r2,1
   23cd8:	1000181e 	bne	r2,zero,23d3c <read+0xcc>
        (fd->dev->read))
   23cdc:	e0bfff17 	ldw	r2,-4(fp)
   23ce0:	10800017 	ldw	r2,0(r2)
   23ce4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23ce8:	10001426 	beq	r2,zero,23d3c <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23cec:	e0bfff17 	ldw	r2,-4(fp)
   23cf0:	10800017 	ldw	r2,0(r2)
   23cf4:	10800517 	ldw	r2,20(r2)
   23cf8:	e0fffb17 	ldw	r3,-20(fp)
   23cfc:	180d883a 	mov	r6,r3
   23d00:	e17ffc17 	ldw	r5,-16(fp)
   23d04:	e13fff17 	ldw	r4,-4(fp)
   23d08:	103ee83a 	callr	r2
   23d0c:	e0bffe15 	stw	r2,-8(fp)
   23d10:	e0bffe17 	ldw	r2,-8(fp)
   23d14:	1000070e 	bge	r2,zero,23d34 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   23d18:	0023c340 	call	23c34 <alt_get_errno>
   23d1c:	1007883a 	mov	r3,r2
   23d20:	e0bffe17 	ldw	r2,-8(fp)
   23d24:	0085c83a 	sub	r2,zero,r2
   23d28:	18800015 	stw	r2,0(r3)
          return -1;
   23d2c:	00bfffc4 	movi	r2,-1
   23d30:	00000c06 	br	23d64 <read+0xf4>
        }
        return rval;
   23d34:	e0bffe17 	ldw	r2,-8(fp)
   23d38:	00000a06 	br	23d64 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23d3c:	0023c340 	call	23c34 <alt_get_errno>
   23d40:	1007883a 	mov	r3,r2
   23d44:	00800344 	movi	r2,13
   23d48:	18800015 	stw	r2,0(r3)
   23d4c:	00000406 	br	23d60 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23d50:	0023c340 	call	23c34 <alt_get_errno>
   23d54:	1007883a 	mov	r3,r2
   23d58:	00801444 	movi	r2,81
   23d5c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23d60:	00bfffc4 	movi	r2,-1
}
   23d64:	e037883a 	mov	sp,fp
   23d68:	dfc00117 	ldw	ra,4(sp)
   23d6c:	df000017 	ldw	fp,0(sp)
   23d70:	dec00204 	addi	sp,sp,8
   23d74:	f800283a 	ret

00023d78 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23d78:	defffe04 	addi	sp,sp,-8
   23d7c:	df000115 	stw	fp,4(sp)
   23d80:	df000104 	addi	fp,sp,4
   23d84:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   23d88:	e0bfff17 	ldw	r2,-4(fp)
   23d8c:	108000d0 	cmplti	r2,r2,3
   23d90:	1000101e 	bne	r2,zero,23dd4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   23d94:	e0ffff17 	ldw	r3,-4(fp)
   23d98:	1805883a 	mov	r2,r3
   23d9c:	1085883a 	add	r2,r2,r2
   23da0:	10c5883a 	add	r2,r2,r3
   23da4:	100490ba 	slli	r2,r2,2
   23da8:	00c000b4 	movhi	r3,2
   23dac:	10c7883a 	add	r3,r2,r3
   23db0:	18197f15 	stw	zero,26108(r3)
    alt_fd_list[fd].dev      = 0;
   23db4:	e0ffff17 	ldw	r3,-4(fp)
   23db8:	1805883a 	mov	r2,r3
   23dbc:	1085883a 	add	r2,r2,r2
   23dc0:	10c5883a 	add	r2,r2,r3
   23dc4:	100490ba 	slli	r2,r2,2
   23dc8:	00c000b4 	movhi	r3,2
   23dcc:	10c7883a 	add	r3,r2,r3
   23dd0:	18197d15 	stw	zero,26100(r3)
  }
}
   23dd4:	0001883a 	nop
   23dd8:	e037883a 	mov	sp,fp
   23ddc:	df000017 	ldw	fp,0(sp)
   23de0:	dec00104 	addi	sp,sp,4
   23de4:	f800283a 	ret

00023de8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23de8:	defff904 	addi	sp,sp,-28
   23dec:	df000615 	stw	fp,24(sp)
   23df0:	df000604 	addi	fp,sp,24
   23df4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   23df8:	0005303a 	rdctl	r2,status
   23dfc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23e00:	e0fffd17 	ldw	r3,-12(fp)
   23e04:	00bfff84 	movi	r2,-2
   23e08:	1884703a 	and	r2,r3,r2
   23e0c:	1001703a 	wrctl	status,r2
  return context;
   23e10:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23e14:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23e18:	d0a00b17 	ldw	r2,-32724(gp)
   23e1c:	10c000c4 	addi	r3,r2,3
   23e20:	00bfff04 	movi	r2,-4
   23e24:	1884703a 	and	r2,r3,r2
   23e28:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23e2c:	d0e00b17 	ldw	r3,-32724(gp)
   23e30:	e0bffa17 	ldw	r2,-24(fp)
   23e34:	1887883a 	add	r3,r3,r2
   23e38:	00800134 	movhi	r2,4
   23e3c:	10800004 	addi	r2,r2,0
   23e40:	10c0072e 	bgeu	r2,r3,23e60 <sbrk+0x78>
   23e44:	e0bfff17 	ldw	r2,-4(fp)
   23e48:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   23e4c:	e0bffc17 	ldw	r2,-16(fp)
   23e50:	1001703a 	wrctl	status,r2
}
   23e54:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23e58:	00bfffc4 	movi	r2,-1
   23e5c:	00000c06 	br	23e90 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   23e60:	d0a00b17 	ldw	r2,-32724(gp)
   23e64:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   23e68:	d0e00b17 	ldw	r3,-32724(gp)
   23e6c:	e0bffa17 	ldw	r2,-24(fp)
   23e70:	1885883a 	add	r2,r3,r2
   23e74:	d0a00b15 	stw	r2,-32724(gp)
   23e78:	e0bfff17 	ldw	r2,-4(fp)
   23e7c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   23e80:	e0bffb17 	ldw	r2,-20(fp)
   23e84:	1001703a 	wrctl	status,r2
}
   23e88:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23e8c:	e0bffe17 	ldw	r2,-8(fp)
} 
   23e90:	e037883a 	mov	sp,fp
   23e94:	df000017 	ldw	fp,0(sp)
   23e98:	dec00104 	addi	sp,sp,4
   23e9c:	f800283a 	ret

00023ea0 <alt_get_errno>:
{
   23ea0:	defffe04 	addi	sp,sp,-8
   23ea4:	dfc00115 	stw	ra,4(sp)
   23ea8:	df000015 	stw	fp,0(sp)
   23eac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23eb0:	d0a00a17 	ldw	r2,-32728(gp)
   23eb4:	10000326 	beq	r2,zero,23ec4 <alt_get_errno+0x24>
   23eb8:	d0a00a17 	ldw	r2,-32728(gp)
   23ebc:	103ee83a 	callr	r2
   23ec0:	00000106 	br	23ec8 <alt_get_errno+0x28>
   23ec4:	d0a6af04 	addi	r2,gp,-25924
}
   23ec8:	e037883a 	mov	sp,fp
   23ecc:	dfc00117 	ldw	ra,4(sp)
   23ed0:	df000017 	ldw	fp,0(sp)
   23ed4:	dec00204 	addi	sp,sp,8
   23ed8:	f800283a 	ret

00023edc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23edc:	defff904 	addi	sp,sp,-28
   23ee0:	dfc00615 	stw	ra,24(sp)
   23ee4:	df000515 	stw	fp,20(sp)
   23ee8:	df000504 	addi	fp,sp,20
   23eec:	e13ffd15 	stw	r4,-12(fp)
   23ef0:	e17ffc15 	stw	r5,-16(fp)
   23ef4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23ef8:	e0bffd17 	ldw	r2,-12(fp)
   23efc:	10000916 	blt	r2,zero,23f24 <write+0x48>
   23f00:	e0fffd17 	ldw	r3,-12(fp)
   23f04:	1805883a 	mov	r2,r3
   23f08:	1085883a 	add	r2,r2,r2
   23f0c:	10c5883a 	add	r2,r2,r3
   23f10:	100490ba 	slli	r2,r2,2
   23f14:	00c000b4 	movhi	r3,2
   23f18:	18d97d04 	addi	r3,r3,26100
   23f1c:	10c5883a 	add	r2,r2,r3
   23f20:	00000106 	br	23f28 <write+0x4c>
   23f24:	0005883a 	mov	r2,zero
   23f28:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23f2c:	e0bfff17 	ldw	r2,-4(fp)
   23f30:	10002126 	beq	r2,zero,23fb8 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23f34:	e0bfff17 	ldw	r2,-4(fp)
   23f38:	10800217 	ldw	r2,8(r2)
   23f3c:	108000cc 	andi	r2,r2,3
   23f40:	10001826 	beq	r2,zero,23fa4 <write+0xc8>
   23f44:	e0bfff17 	ldw	r2,-4(fp)
   23f48:	10800017 	ldw	r2,0(r2)
   23f4c:	10800617 	ldw	r2,24(r2)
   23f50:	10001426 	beq	r2,zero,23fa4 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23f54:	e0bfff17 	ldw	r2,-4(fp)
   23f58:	10800017 	ldw	r2,0(r2)
   23f5c:	10800617 	ldw	r2,24(r2)
   23f60:	e0fffb17 	ldw	r3,-20(fp)
   23f64:	180d883a 	mov	r6,r3
   23f68:	e17ffc17 	ldw	r5,-16(fp)
   23f6c:	e13fff17 	ldw	r4,-4(fp)
   23f70:	103ee83a 	callr	r2
   23f74:	e0bffe15 	stw	r2,-8(fp)
   23f78:	e0bffe17 	ldw	r2,-8(fp)
   23f7c:	1000070e 	bge	r2,zero,23f9c <write+0xc0>
      {
        ALT_ERRNO = -rval;
   23f80:	0023ea00 	call	23ea0 <alt_get_errno>
   23f84:	1007883a 	mov	r3,r2
   23f88:	e0bffe17 	ldw	r2,-8(fp)
   23f8c:	0085c83a 	sub	r2,zero,r2
   23f90:	18800015 	stw	r2,0(r3)
        return -1;
   23f94:	00bfffc4 	movi	r2,-1
   23f98:	00000c06 	br	23fcc <write+0xf0>
      }
      return rval;
   23f9c:	e0bffe17 	ldw	r2,-8(fp)
   23fa0:	00000a06 	br	23fcc <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23fa4:	0023ea00 	call	23ea0 <alt_get_errno>
   23fa8:	1007883a 	mov	r3,r2
   23fac:	00800344 	movi	r2,13
   23fb0:	18800015 	stw	r2,0(r3)
   23fb4:	00000406 	br	23fc8 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23fb8:	0023ea00 	call	23ea0 <alt_get_errno>
   23fbc:	1007883a 	mov	r3,r2
   23fc0:	00801444 	movi	r2,81
   23fc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23fc8:	00bfffc4 	movi	r2,-1
}
   23fcc:	e037883a 	mov	sp,fp
   23fd0:	dfc00117 	ldw	ra,4(sp)
   23fd4:	df000017 	ldw	fp,0(sp)
   23fd8:	dec00204 	addi	sp,sp,8
   23fdc:	f800283a 	ret

00023fe0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23fe0:	defffd04 	addi	sp,sp,-12
   23fe4:	dfc00215 	stw	ra,8(sp)
   23fe8:	df000115 	stw	fp,4(sp)
   23fec:	df000104 	addi	fp,sp,4
   23ff0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23ff4:	d1600704 	addi	r5,gp,-32740
   23ff8:	e13fff17 	ldw	r4,-4(fp)
   23ffc:	0024de40 	call	24de4 <alt_dev_llist_insert>
}
   24000:	e037883a 	mov	sp,fp
   24004:	dfc00117 	ldw	ra,4(sp)
   24008:	df000017 	ldw	fp,0(sp)
   2400c:	dec00204 	addi	sp,sp,8
   24010:	f800283a 	ret

00024014 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   24014:	defffd04 	addi	sp,sp,-12
   24018:	dfc00215 	stw	ra,8(sp)
   2401c:	df000115 	stw	fp,4(sp)
   24020:	df000104 	addi	fp,sp,4
   24024:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   24028:	00257a40 	call	257a4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2402c:	00800044 	movi	r2,1
   24030:	1001703a 	wrctl	status,r2
}
   24034:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   24038:	0001883a 	nop
   2403c:	e037883a 	mov	sp,fp
   24040:	dfc00117 	ldw	ra,4(sp)
   24044:	df000017 	ldw	fp,0(sp)
   24048:	dec00204 	addi	sp,sp,8
   2404c:	f800283a 	ret

00024050 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   24050:	defffe04 	addi	sp,sp,-8
   24054:	dfc00115 	stw	ra,4(sp)
   24058:	df000015 	stw	fp,0(sp)
   2405c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
   24060:	01c0fa04 	movi	r7,1000
   24064:	000d883a 	mov	r6,zero
   24068:	000b883a 	mov	r5,zero
   2406c:	01000134 	movhi	r4,4
   24070:	21041804 	addi	r4,r4,4192
   24074:	0024ba40 	call	24ba4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( USR_TIMER, usr_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   24078:	01800084 	movi	r6,2
   2407c:	000b883a 	mov	r5,zero
   24080:	010000b4 	movhi	r4,2
   24084:	2119e704 	addi	r4,r4,26524
   24088:	00242180 	call	24218 <altera_avalon_jtag_uart_init>
   2408c:	010000b4 	movhi	r4,2
   24090:	2119dd04 	addi	r4,r4,26484
   24094:	0023fe00 	call	23fe0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   24098:	0001883a 	nop
}
   2409c:	0001883a 	nop
   240a0:	e037883a 	mov	sp,fp
   240a4:	dfc00117 	ldw	ra,4(sp)
   240a8:	df000017 	ldw	fp,0(sp)
   240ac:	dec00204 	addi	sp,sp,8
   240b0:	f800283a 	ret

000240b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   240b4:	defffa04 	addi	sp,sp,-24
   240b8:	dfc00515 	stw	ra,20(sp)
   240bc:	df000415 	stw	fp,16(sp)
   240c0:	df000404 	addi	fp,sp,16
   240c4:	e13ffe15 	stw	r4,-8(fp)
   240c8:	e17ffd15 	stw	r5,-12(fp)
   240cc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   240d0:	e0bffe17 	ldw	r2,-8(fp)
   240d4:	10800017 	ldw	r2,0(r2)
   240d8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   240dc:	e0bfff17 	ldw	r2,-4(fp)
   240e0:	10c00a04 	addi	r3,r2,40
   240e4:	e0bffe17 	ldw	r2,-8(fp)
   240e8:	10800217 	ldw	r2,8(r2)
   240ec:	100f883a 	mov	r7,r2
   240f0:	e1bffc17 	ldw	r6,-16(fp)
   240f4:	e17ffd17 	ldw	r5,-12(fp)
   240f8:	1809883a 	mov	r4,r3
   240fc:	00246e00 	call	246e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   24100:	e037883a 	mov	sp,fp
   24104:	dfc00117 	ldw	ra,4(sp)
   24108:	df000017 	ldw	fp,0(sp)
   2410c:	dec00204 	addi	sp,sp,8
   24110:	f800283a 	ret

00024114 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   24114:	defffa04 	addi	sp,sp,-24
   24118:	dfc00515 	stw	ra,20(sp)
   2411c:	df000415 	stw	fp,16(sp)
   24120:	df000404 	addi	fp,sp,16
   24124:	e13ffe15 	stw	r4,-8(fp)
   24128:	e17ffd15 	stw	r5,-12(fp)
   2412c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24130:	e0bffe17 	ldw	r2,-8(fp)
   24134:	10800017 	ldw	r2,0(r2)
   24138:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2413c:	e0bfff17 	ldw	r2,-4(fp)
   24140:	10c00a04 	addi	r3,r2,40
   24144:	e0bffe17 	ldw	r2,-8(fp)
   24148:	10800217 	ldw	r2,8(r2)
   2414c:	100f883a 	mov	r7,r2
   24150:	e1bffc17 	ldw	r6,-16(fp)
   24154:	e17ffd17 	ldw	r5,-12(fp)
   24158:	1809883a 	mov	r4,r3
   2415c:	00249000 	call	24900 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   24160:	e037883a 	mov	sp,fp
   24164:	dfc00117 	ldw	ra,4(sp)
   24168:	df000017 	ldw	fp,0(sp)
   2416c:	dec00204 	addi	sp,sp,8
   24170:	f800283a 	ret

00024174 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   24174:	defffc04 	addi	sp,sp,-16
   24178:	dfc00315 	stw	ra,12(sp)
   2417c:	df000215 	stw	fp,8(sp)
   24180:	df000204 	addi	fp,sp,8
   24184:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24188:	e0bffe17 	ldw	r2,-8(fp)
   2418c:	10800017 	ldw	r2,0(r2)
   24190:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   24194:	e0bfff17 	ldw	r2,-4(fp)
   24198:	10c00a04 	addi	r3,r2,40
   2419c:	e0bffe17 	ldw	r2,-8(fp)
   241a0:	10800217 	ldw	r2,8(r2)
   241a4:	100b883a 	mov	r5,r2
   241a8:	1809883a 	mov	r4,r3
   241ac:	00245840 	call	24584 <altera_avalon_jtag_uart_close>
}
   241b0:	e037883a 	mov	sp,fp
   241b4:	dfc00117 	ldw	ra,4(sp)
   241b8:	df000017 	ldw	fp,0(sp)
   241bc:	dec00204 	addi	sp,sp,8
   241c0:	f800283a 	ret

000241c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   241c4:	defffa04 	addi	sp,sp,-24
   241c8:	dfc00515 	stw	ra,20(sp)
   241cc:	df000415 	stw	fp,16(sp)
   241d0:	df000404 	addi	fp,sp,16
   241d4:	e13ffe15 	stw	r4,-8(fp)
   241d8:	e17ffd15 	stw	r5,-12(fp)
   241dc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   241e0:	e0bffe17 	ldw	r2,-8(fp)
   241e4:	10800017 	ldw	r2,0(r2)
   241e8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   241ec:	e0bfff17 	ldw	r2,-4(fp)
   241f0:	10800a04 	addi	r2,r2,40
   241f4:	e1bffc17 	ldw	r6,-16(fp)
   241f8:	e17ffd17 	ldw	r5,-12(fp)
   241fc:	1009883a 	mov	r4,r2
   24200:	00245ec0 	call	245ec <altera_avalon_jtag_uart_ioctl>
}
   24204:	e037883a 	mov	sp,fp
   24208:	dfc00117 	ldw	ra,4(sp)
   2420c:	df000017 	ldw	fp,0(sp)
   24210:	dec00204 	addi	sp,sp,8
   24214:	f800283a 	ret

00024218 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   24218:	defffa04 	addi	sp,sp,-24
   2421c:	dfc00515 	stw	ra,20(sp)
   24220:	df000415 	stw	fp,16(sp)
   24224:	df000404 	addi	fp,sp,16
   24228:	e13fff15 	stw	r4,-4(fp)
   2422c:	e17ffe15 	stw	r5,-8(fp)
   24230:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24234:	e0bfff17 	ldw	r2,-4(fp)
   24238:	00c00044 	movi	r3,1
   2423c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   24240:	e0bfff17 	ldw	r2,-4(fp)
   24244:	10800017 	ldw	r2,0(r2)
   24248:	10800104 	addi	r2,r2,4
   2424c:	1007883a 	mov	r3,r2
   24250:	e0bfff17 	ldw	r2,-4(fp)
   24254:	10800817 	ldw	r2,32(r2)
   24258:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2425c:	e0bffe17 	ldw	r2,-8(fp)
   24260:	e0fffd17 	ldw	r3,-12(fp)
   24264:	d8000015 	stw	zero,0(sp)
   24268:	e1ffff17 	ldw	r7,-4(fp)
   2426c:	018000b4 	movhi	r6,2
   24270:	3190b604 	addi	r6,r6,17112
   24274:	180b883a 	mov	r5,r3
   24278:	1009883a 	mov	r4,r2
   2427c:	0024f740 	call	24f74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   24280:	e0bfff17 	ldw	r2,-4(fp)
   24284:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   24288:	e0bfff17 	ldw	r2,-4(fp)
   2428c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   24290:	d0e6b417 	ldw	r3,-25904(gp)
   24294:	e1ffff17 	ldw	r7,-4(fp)
   24298:	018000b4 	movhi	r6,2
   2429c:	31913904 	addi	r6,r6,17636
   242a0:	180b883a 	mov	r5,r3
   242a4:	1009883a 	mov	r4,r2
   242a8:	0024c280 	call	24c28 <alt_alarm_start>
   242ac:	1000040e 	bge	r2,zero,242c0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   242b0:	e0ffff17 	ldw	r3,-4(fp)
   242b4:	00a00034 	movhi	r2,32768
   242b8:	10bfffc4 	addi	r2,r2,-1
   242bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   242c0:	0001883a 	nop
   242c4:	e037883a 	mov	sp,fp
   242c8:	dfc00117 	ldw	ra,4(sp)
   242cc:	df000017 	ldw	fp,0(sp)
   242d0:	dec00204 	addi	sp,sp,8
   242d4:	f800283a 	ret

000242d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   242d8:	defff804 	addi	sp,sp,-32
   242dc:	df000715 	stw	fp,28(sp)
   242e0:	df000704 	addi	fp,sp,28
   242e4:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   242e8:	e0bff917 	ldw	r2,-28(fp)
   242ec:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   242f0:	e0bffd17 	ldw	r2,-12(fp)
   242f4:	10800017 	ldw	r2,0(r2)
   242f8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   242fc:	e0bffc17 	ldw	r2,-16(fp)
   24300:	10800104 	addi	r2,r2,4
   24304:	10800037 	ldwio	r2,0(r2)
   24308:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2430c:	e0bffb17 	ldw	r2,-20(fp)
   24310:	1080c00c 	andi	r2,r2,768
   24314:	10006d26 	beq	r2,zero,244cc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   24318:	e0bffb17 	ldw	r2,-20(fp)
   2431c:	1080400c 	andi	r2,r2,256
   24320:	10003526 	beq	r2,zero,243f8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   24324:	00800074 	movhi	r2,1
   24328:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2432c:	e0bffd17 	ldw	r2,-12(fp)
   24330:	10800a17 	ldw	r2,40(r2)
   24334:	10800044 	addi	r2,r2,1
   24338:	1081ffcc 	andi	r2,r2,2047
   2433c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   24340:	e0bffd17 	ldw	r2,-12(fp)
   24344:	10800b17 	ldw	r2,44(r2)
   24348:	e0fffa17 	ldw	r3,-24(fp)
   2434c:	18801526 	beq	r3,r2,243a4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   24350:	e0bffc17 	ldw	r2,-16(fp)
   24354:	10800037 	ldwio	r2,0(r2)
   24358:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2435c:	e0bfff17 	ldw	r2,-4(fp)
   24360:	10a0000c 	andi	r2,r2,32768
   24364:	10001126 	beq	r2,zero,243ac <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24368:	e0bffd17 	ldw	r2,-12(fp)
   2436c:	10800a17 	ldw	r2,40(r2)
   24370:	e0ffff17 	ldw	r3,-4(fp)
   24374:	1809883a 	mov	r4,r3
   24378:	e0fffd17 	ldw	r3,-12(fp)
   2437c:	1885883a 	add	r2,r3,r2
   24380:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24384:	e0bffd17 	ldw	r2,-12(fp)
   24388:	10800a17 	ldw	r2,40(r2)
   2438c:	10800044 	addi	r2,r2,1
   24390:	10c1ffcc 	andi	r3,r2,2047
   24394:	e0bffd17 	ldw	r2,-12(fp)
   24398:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2439c:	0001883a 	nop
      {
   243a0:	003fe206 	br	2432c <altera_avalon_jtag_uart_irq+0x54>
          break;
   243a4:	0001883a 	nop
   243a8:	00000106 	br	243b0 <altera_avalon_jtag_uart_irq+0xd8>
          break;
   243ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   243b0:	e0bfff17 	ldw	r2,-4(fp)
   243b4:	10bfffec 	andhi	r2,r2,65535
   243b8:	10000f26 	beq	r2,zero,243f8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   243bc:	e0bffd17 	ldw	r2,-12(fp)
   243c0:	10c00817 	ldw	r3,32(r2)
   243c4:	00bfff84 	movi	r2,-2
   243c8:	1886703a 	and	r3,r3,r2
   243cc:	e0bffd17 	ldw	r2,-12(fp)
   243d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   243d4:	e0bffc17 	ldw	r2,-16(fp)
   243d8:	10800104 	addi	r2,r2,4
   243dc:	1007883a 	mov	r3,r2
   243e0:	e0bffd17 	ldw	r2,-12(fp)
   243e4:	10800817 	ldw	r2,32(r2)
   243e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   243ec:	e0bffc17 	ldw	r2,-16(fp)
   243f0:	10800104 	addi	r2,r2,4
   243f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   243f8:	e0bffb17 	ldw	r2,-20(fp)
   243fc:	1080800c 	andi	r2,r2,512
   24400:	103fbe26 	beq	r2,zero,242fc <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   24404:	e0bffb17 	ldw	r2,-20(fp)
   24408:	1004d43a 	srli	r2,r2,16
   2440c:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   24410:	00001406 	br	24464 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   24414:	e0bffc17 	ldw	r2,-16(fp)
   24418:	e0fffd17 	ldw	r3,-12(fp)
   2441c:	18c00d17 	ldw	r3,52(r3)
   24420:	e13ffd17 	ldw	r4,-12(fp)
   24424:	20c7883a 	add	r3,r4,r3
   24428:	18c20e03 	ldbu	r3,2104(r3)
   2442c:	18c03fcc 	andi	r3,r3,255
   24430:	18c0201c 	xori	r3,r3,128
   24434:	18ffe004 	addi	r3,r3,-128
   24438:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2443c:	e0bffd17 	ldw	r2,-12(fp)
   24440:	10800d17 	ldw	r2,52(r2)
   24444:	10800044 	addi	r2,r2,1
   24448:	10c1ffcc 	andi	r3,r2,2047
   2444c:	e0bffd17 	ldw	r2,-12(fp)
   24450:	10c00d15 	stw	r3,52(r2)
   24454:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   24458:	e0bffe17 	ldw	r2,-8(fp)
   2445c:	10bfffc4 	addi	r2,r2,-1
   24460:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   24464:	e0bffe17 	ldw	r2,-8(fp)
   24468:	10000526 	beq	r2,zero,24480 <altera_avalon_jtag_uart_irq+0x1a8>
   2446c:	e0bffd17 	ldw	r2,-12(fp)
   24470:	10c00d17 	ldw	r3,52(r2)
   24474:	e0bffd17 	ldw	r2,-12(fp)
   24478:	10800c17 	ldw	r2,48(r2)
   2447c:	18bfe51e 	bne	r3,r2,24414 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
   24480:	e0bffe17 	ldw	r2,-8(fp)
   24484:	103f9d26 	beq	r2,zero,242fc <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24488:	e0bffd17 	ldw	r2,-12(fp)
   2448c:	10c00817 	ldw	r3,32(r2)
   24490:	00bfff44 	movi	r2,-3
   24494:	1886703a 	and	r3,r3,r2
   24498:	e0bffd17 	ldw	r2,-12(fp)
   2449c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   244a0:	e0bffd17 	ldw	r2,-12(fp)
   244a4:	10800017 	ldw	r2,0(r2)
   244a8:	10800104 	addi	r2,r2,4
   244ac:	1007883a 	mov	r3,r2
   244b0:	e0bffd17 	ldw	r2,-12(fp)
   244b4:	10800817 	ldw	r2,32(r2)
   244b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   244bc:	e0bffc17 	ldw	r2,-16(fp)
   244c0:	10800104 	addi	r2,r2,4
   244c4:	10800037 	ldwio	r2,0(r2)
  {
   244c8:	003f8c06 	br	242fc <altera_avalon_jtag_uart_irq+0x24>
      break;
   244cc:	0001883a 	nop
      }
    }
  }
}
   244d0:	0001883a 	nop
   244d4:	e037883a 	mov	sp,fp
   244d8:	df000017 	ldw	fp,0(sp)
   244dc:	dec00104 	addi	sp,sp,4
   244e0:	f800283a 	ret

000244e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   244e4:	defffc04 	addi	sp,sp,-16
   244e8:	df000315 	stw	fp,12(sp)
   244ec:	df000304 	addi	fp,sp,12
   244f0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   244f4:	e0bffd17 	ldw	r2,-12(fp)
   244f8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   244fc:	e0bfff17 	ldw	r2,-4(fp)
   24500:	10800017 	ldw	r2,0(r2)
   24504:	10800104 	addi	r2,r2,4
   24508:	10800037 	ldwio	r2,0(r2)
   2450c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   24510:	e0bffe17 	ldw	r2,-8(fp)
   24514:	1081000c 	andi	r2,r2,1024
   24518:	10000b26 	beq	r2,zero,24548 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2451c:	e0bfff17 	ldw	r2,-4(fp)
   24520:	10800017 	ldw	r2,0(r2)
   24524:	10800104 	addi	r2,r2,4
   24528:	1007883a 	mov	r3,r2
   2452c:	e0bfff17 	ldw	r2,-4(fp)
   24530:	10800817 	ldw	r2,32(r2)
   24534:	10810014 	ori	r2,r2,1024
   24538:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2453c:	e0bfff17 	ldw	r2,-4(fp)
   24540:	10000915 	stw	zero,36(r2)
   24544:	00000a06 	br	24570 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   24548:	e0bfff17 	ldw	r2,-4(fp)
   2454c:	10c00917 	ldw	r3,36(r2)
   24550:	00a00034 	movhi	r2,32768
   24554:	10bfff04 	addi	r2,r2,-4
   24558:	10c00536 	bltu	r2,r3,24570 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2455c:	e0bfff17 	ldw	r2,-4(fp)
   24560:	10800917 	ldw	r2,36(r2)
   24564:	10c00044 	addi	r3,r2,1
   24568:	e0bfff17 	ldw	r2,-4(fp)
   2456c:	10c00915 	stw	r3,36(r2)
   24570:	d0a6b417 	ldw	r2,-25904(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   24574:	e037883a 	mov	sp,fp
   24578:	df000017 	ldw	fp,0(sp)
   2457c:	dec00104 	addi	sp,sp,4
   24580:	f800283a 	ret

00024584 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   24584:	defffd04 	addi	sp,sp,-12
   24588:	df000215 	stw	fp,8(sp)
   2458c:	df000204 	addi	fp,sp,8
   24590:	e13fff15 	stw	r4,-4(fp)
   24594:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24598:	00000506 	br	245b0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2459c:	e0bffe17 	ldw	r2,-8(fp)
   245a0:	1090000c 	andi	r2,r2,16384
   245a4:	10000226 	beq	r2,zero,245b0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   245a8:	00bffd44 	movi	r2,-11
   245ac:	00000b06 	br	245dc <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   245b0:	e0bfff17 	ldw	r2,-4(fp)
   245b4:	10c00d17 	ldw	r3,52(r2)
   245b8:	e0bfff17 	ldw	r2,-4(fp)
   245bc:	10800c17 	ldw	r2,48(r2)
   245c0:	18800526 	beq	r3,r2,245d8 <altera_avalon_jtag_uart_close+0x54>
   245c4:	e0bfff17 	ldw	r2,-4(fp)
   245c8:	10c00917 	ldw	r3,36(r2)
   245cc:	e0bfff17 	ldw	r2,-4(fp)
   245d0:	10800117 	ldw	r2,4(r2)
   245d4:	18bff136 	bltu	r3,r2,2459c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   245d8:	0005883a 	mov	r2,zero
}
   245dc:	e037883a 	mov	sp,fp
   245e0:	df000017 	ldw	fp,0(sp)
   245e4:	dec00104 	addi	sp,sp,4
   245e8:	f800283a 	ret

000245ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   245ec:	defffa04 	addi	sp,sp,-24
   245f0:	df000515 	stw	fp,20(sp)
   245f4:	df000504 	addi	fp,sp,20
   245f8:	e13ffd15 	stw	r4,-12(fp)
   245fc:	e17ffc15 	stw	r5,-16(fp)
   24600:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   24604:	00bff9c4 	movi	r2,-25
   24608:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   2460c:	e0bffc17 	ldw	r2,-16(fp)
   24610:	109a8060 	cmpeqi	r2,r2,27137
   24614:	1000041e 	bne	r2,zero,24628 <altera_avalon_jtag_uart_ioctl+0x3c>
   24618:	e0bffc17 	ldw	r2,-16(fp)
   2461c:	109a80a0 	cmpeqi	r2,r2,27138
   24620:	1000181e 	bne	r2,zero,24684 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   24624:	00002906 	br	246cc <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   24628:	e0bffd17 	ldw	r2,-12(fp)
   2462c:	10c00117 	ldw	r3,4(r2)
   24630:	00a00034 	movhi	r2,32768
   24634:	10bfffc4 	addi	r2,r2,-1
   24638:	18802126 	beq	r3,r2,246c0 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   2463c:	e0bffb17 	ldw	r2,-20(fp)
   24640:	10800017 	ldw	r2,0(r2)
   24644:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   24648:	e0bffe17 	ldw	r2,-8(fp)
   2464c:	10800090 	cmplti	r2,r2,2
   24650:	1000061e 	bne	r2,zero,2466c <altera_avalon_jtag_uart_ioctl+0x80>
   24654:	e0fffe17 	ldw	r3,-8(fp)
   24658:	00a00034 	movhi	r2,32768
   2465c:	10bfffc4 	addi	r2,r2,-1
   24660:	18800226 	beq	r3,r2,2466c <altera_avalon_jtag_uart_ioctl+0x80>
   24664:	e0bffe17 	ldw	r2,-8(fp)
   24668:	00000206 	br	24674 <altera_avalon_jtag_uart_ioctl+0x88>
   2466c:	00a00034 	movhi	r2,32768
   24670:	10bfff84 	addi	r2,r2,-2
   24674:	e0fffd17 	ldw	r3,-12(fp)
   24678:	18800115 	stw	r2,4(r3)
      rc = 0;
   2467c:	e03fff15 	stw	zero,-4(fp)
    break;
   24680:	00000f06 	br	246c0 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   24684:	e0bffd17 	ldw	r2,-12(fp)
   24688:	10c00117 	ldw	r3,4(r2)
   2468c:	00a00034 	movhi	r2,32768
   24690:	10bfffc4 	addi	r2,r2,-1
   24694:	18800c26 	beq	r3,r2,246c8 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24698:	e0bffd17 	ldw	r2,-12(fp)
   2469c:	10c00917 	ldw	r3,36(r2)
   246a0:	e0bffd17 	ldw	r2,-12(fp)
   246a4:	10800117 	ldw	r2,4(r2)
   246a8:	1885803a 	cmpltu	r2,r3,r2
   246ac:	10c03fcc 	andi	r3,r2,255
   246b0:	e0bffb17 	ldw	r2,-20(fp)
   246b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   246b8:	e03fff15 	stw	zero,-4(fp)
    break;
   246bc:	00000206 	br	246c8 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   246c0:	0001883a 	nop
   246c4:	00000106 	br	246cc <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   246c8:	0001883a 	nop
  }

  return rc;
   246cc:	e0bfff17 	ldw	r2,-4(fp)
}
   246d0:	e037883a 	mov	sp,fp
   246d4:	df000017 	ldw	fp,0(sp)
   246d8:	dec00104 	addi	sp,sp,4
   246dc:	f800283a 	ret

000246e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   246e0:	defff304 	addi	sp,sp,-52
   246e4:	dfc00c15 	stw	ra,48(sp)
   246e8:	df000b15 	stw	fp,44(sp)
   246ec:	df000b04 	addi	fp,sp,44
   246f0:	e13ff815 	stw	r4,-32(fp)
   246f4:	e17ff715 	stw	r5,-36(fp)
   246f8:	e1bff615 	stw	r6,-40(fp)
   246fc:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   24700:	e0bff717 	ldw	r2,-36(fp)
   24704:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24708:	00004706 	br	24828 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2470c:	e0bff817 	ldw	r2,-32(fp)
   24710:	10800a17 	ldw	r2,40(r2)
   24714:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   24718:	e0bff817 	ldw	r2,-32(fp)
   2471c:	10800b17 	ldw	r2,44(r2)
   24720:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   24724:	e0fffd17 	ldw	r3,-12(fp)
   24728:	e0bffc17 	ldw	r2,-16(fp)
   2472c:	18800536 	bltu	r3,r2,24744 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24730:	e0fffd17 	ldw	r3,-12(fp)
   24734:	e0bffc17 	ldw	r2,-16(fp)
   24738:	1885c83a 	sub	r2,r3,r2
   2473c:	e0bffe15 	stw	r2,-8(fp)
   24740:	00000406 	br	24754 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24744:	00c20004 	movi	r3,2048
   24748:	e0bffc17 	ldw	r2,-16(fp)
   2474c:	1885c83a 	sub	r2,r3,r2
   24750:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   24754:	e0bffe17 	ldw	r2,-8(fp)
   24758:	10001e26 	beq	r2,zero,247d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2475c:	e0fff617 	ldw	r3,-40(fp)
   24760:	e0bffe17 	ldw	r2,-8(fp)
   24764:	1880022e 	bgeu	r3,r2,24770 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   24768:	e0bff617 	ldw	r2,-40(fp)
   2476c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24770:	e0bff817 	ldw	r2,-32(fp)
   24774:	10c00e04 	addi	r3,r2,56
   24778:	e0bffc17 	ldw	r2,-16(fp)
   2477c:	1885883a 	add	r2,r3,r2
   24780:	e1bffe17 	ldw	r6,-8(fp)
   24784:	100b883a 	mov	r5,r2
   24788:	e13fff17 	ldw	r4,-4(fp)
   2478c:	0020a200 	call	20a20 <memcpy>
      ptr   += n;
   24790:	e0ffff17 	ldw	r3,-4(fp)
   24794:	e0bffe17 	ldw	r2,-8(fp)
   24798:	1885883a 	add	r2,r3,r2
   2479c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   247a0:	e0fff617 	ldw	r3,-40(fp)
   247a4:	e0bffe17 	ldw	r2,-8(fp)
   247a8:	1885c83a 	sub	r2,r3,r2
   247ac:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   247b0:	e0fffc17 	ldw	r3,-16(fp)
   247b4:	e0bffe17 	ldw	r2,-8(fp)
   247b8:	1885883a 	add	r2,r3,r2
   247bc:	10c1ffcc 	andi	r3,r2,2047
   247c0:	e0bff817 	ldw	r2,-32(fp)
   247c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   247c8:	e0bff617 	ldw	r2,-40(fp)
   247cc:	00bfcf16 	blt	zero,r2,2470c <altera_avalon_jtag_uart_read+0x2c>
   247d0:	00000106 	br	247d8 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   247d4:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   247d8:	e0ffff17 	ldw	r3,-4(fp)
   247dc:	e0bff717 	ldw	r2,-36(fp)
   247e0:	1880141e 	bne	r3,r2,24834 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   247e4:	e0bff517 	ldw	r2,-44(fp)
   247e8:	1090000c 	andi	r2,r2,16384
   247ec:	1000131e 	bne	r2,zero,2483c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   247f0:	0001883a 	nop
   247f4:	e0bff817 	ldw	r2,-32(fp)
   247f8:	10800a17 	ldw	r2,40(r2)
   247fc:	e0fffd17 	ldw	r3,-12(fp)
   24800:	1880051e 	bne	r3,r2,24818 <altera_avalon_jtag_uart_read+0x138>
   24804:	e0bff817 	ldw	r2,-32(fp)
   24808:	10c00917 	ldw	r3,36(r2)
   2480c:	e0bff817 	ldw	r2,-32(fp)
   24810:	10800117 	ldw	r2,4(r2)
   24814:	18bff736 	bltu	r3,r2,247f4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24818:	e0bff817 	ldw	r2,-32(fp)
   2481c:	10800a17 	ldw	r2,40(r2)
   24820:	e0fffd17 	ldw	r3,-12(fp)
   24824:	18800726 	beq	r3,r2,24844 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   24828:	e0bff617 	ldw	r2,-40(fp)
   2482c:	00bfb716 	blt	zero,r2,2470c <altera_avalon_jtag_uart_read+0x2c>
   24830:	00000506 	br	24848 <altera_avalon_jtag_uart_read+0x168>
      break;
   24834:	0001883a 	nop
   24838:	00000306 	br	24848 <altera_avalon_jtag_uart_read+0x168>
      break;
   2483c:	0001883a 	nop
   24840:	00000106 	br	24848 <altera_avalon_jtag_uart_read+0x168>
      break;
   24844:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24848:	e0ffff17 	ldw	r3,-4(fp)
   2484c:	e0bff717 	ldw	r2,-36(fp)
   24850:	18801926 	beq	r3,r2,248b8 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   24854:	0005303a 	rdctl	r2,status
   24858:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2485c:	e0fff917 	ldw	r3,-28(fp)
   24860:	00bfff84 	movi	r2,-2
   24864:	1884703a 	and	r2,r3,r2
   24868:	1001703a 	wrctl	status,r2
  return context;
   2486c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24870:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24874:	e0bff817 	ldw	r2,-32(fp)
   24878:	10800817 	ldw	r2,32(r2)
   2487c:	10c00054 	ori	r3,r2,1
   24880:	e0bff817 	ldw	r2,-32(fp)
   24884:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24888:	e0bff817 	ldw	r2,-32(fp)
   2488c:	10800017 	ldw	r2,0(r2)
   24890:	10800104 	addi	r2,r2,4
   24894:	1007883a 	mov	r3,r2
   24898:	e0bff817 	ldw	r2,-32(fp)
   2489c:	10800817 	ldw	r2,32(r2)
   248a0:	18800035 	stwio	r2,0(r3)
   248a4:	e0bffb17 	ldw	r2,-20(fp)
   248a8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   248ac:	e0bffa17 	ldw	r2,-24(fp)
   248b0:	1001703a 	wrctl	status,r2
}
   248b4:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   248b8:	e0ffff17 	ldw	r3,-4(fp)
   248bc:	e0bff717 	ldw	r2,-36(fp)
   248c0:	18800426 	beq	r3,r2,248d4 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   248c4:	e0ffff17 	ldw	r3,-4(fp)
   248c8:	e0bff717 	ldw	r2,-36(fp)
   248cc:	1885c83a 	sub	r2,r3,r2
   248d0:	00000606 	br	248ec <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   248d4:	e0bff517 	ldw	r2,-44(fp)
   248d8:	1090000c 	andi	r2,r2,16384
   248dc:	10000226 	beq	r2,zero,248e8 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   248e0:	00bffd44 	movi	r2,-11
   248e4:	00000106 	br	248ec <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   248e8:	00bffec4 	movi	r2,-5
}
   248ec:	e037883a 	mov	sp,fp
   248f0:	dfc00117 	ldw	ra,4(sp)
   248f4:	df000017 	ldw	fp,0(sp)
   248f8:	dec00204 	addi	sp,sp,8
   248fc:	f800283a 	ret

00024900 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24900:	defff304 	addi	sp,sp,-52
   24904:	dfc00c15 	stw	ra,48(sp)
   24908:	df000b15 	stw	fp,44(sp)
   2490c:	df000b04 	addi	fp,sp,44
   24910:	e13ff815 	stw	r4,-32(fp)
   24914:	e17ff715 	stw	r5,-36(fp)
   24918:	e1bff615 	stw	r6,-40(fp)
   2491c:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24920:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24924:	e0bff717 	ldw	r2,-36(fp)
   24928:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2492c:	00003706 	br	24a0c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24930:	e0bff817 	ldw	r2,-32(fp)
   24934:	10800c17 	ldw	r2,48(r2)
   24938:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   2493c:	e0bff817 	ldw	r2,-32(fp)
   24940:	10800d17 	ldw	r2,52(r2)
   24944:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   24948:	e0fffc17 	ldw	r3,-16(fp)
   2494c:	e0bfff17 	ldw	r2,-4(fp)
   24950:	1880062e 	bgeu	r3,r2,2496c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24954:	e0ffff17 	ldw	r3,-4(fp)
   24958:	e0bffc17 	ldw	r2,-16(fp)
   2495c:	1885c83a 	sub	r2,r3,r2
   24960:	10bfffc4 	addi	r2,r2,-1
   24964:	e0bffe15 	stw	r2,-8(fp)
   24968:	00000b06 	br	24998 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2496c:	e0bfff17 	ldw	r2,-4(fp)
   24970:	10000526 	beq	r2,zero,24988 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24974:	00c20004 	movi	r3,2048
   24978:	e0bffc17 	ldw	r2,-16(fp)
   2497c:	1885c83a 	sub	r2,r3,r2
   24980:	e0bffe15 	stw	r2,-8(fp)
   24984:	00000406 	br	24998 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24988:	00c1ffc4 	movi	r3,2047
   2498c:	e0bffc17 	ldw	r2,-16(fp)
   24990:	1885c83a 	sub	r2,r3,r2
   24994:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   24998:	e0bffe17 	ldw	r2,-8(fp)
   2499c:	10001e26 	beq	r2,zero,24a18 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   249a0:	e0fff617 	ldw	r3,-40(fp)
   249a4:	e0bffe17 	ldw	r2,-8(fp)
   249a8:	1880022e 	bgeu	r3,r2,249b4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   249ac:	e0bff617 	ldw	r2,-40(fp)
   249b0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   249b4:	e0bff817 	ldw	r2,-32(fp)
   249b8:	10c20e04 	addi	r3,r2,2104
   249bc:	e0bffc17 	ldw	r2,-16(fp)
   249c0:	1885883a 	add	r2,r3,r2
   249c4:	e1bffe17 	ldw	r6,-8(fp)
   249c8:	e17ff717 	ldw	r5,-36(fp)
   249cc:	1009883a 	mov	r4,r2
   249d0:	0020a200 	call	20a20 <memcpy>
      ptr   += n;
   249d4:	e0fff717 	ldw	r3,-36(fp)
   249d8:	e0bffe17 	ldw	r2,-8(fp)
   249dc:	1885883a 	add	r2,r3,r2
   249e0:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   249e4:	e0fff617 	ldw	r3,-40(fp)
   249e8:	e0bffe17 	ldw	r2,-8(fp)
   249ec:	1885c83a 	sub	r2,r3,r2
   249f0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   249f4:	e0fffc17 	ldw	r3,-16(fp)
   249f8:	e0bffe17 	ldw	r2,-8(fp)
   249fc:	1885883a 	add	r2,r3,r2
   24a00:	10c1ffcc 	andi	r3,r2,2047
   24a04:	e0bff817 	ldw	r2,-32(fp)
   24a08:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   24a0c:	e0bff617 	ldw	r2,-40(fp)
   24a10:	00bfc716 	blt	zero,r2,24930 <altera_avalon_jtag_uart_write+0x30>
   24a14:	00000106 	br	24a1c <altera_avalon_jtag_uart_write+0x11c>
        break;
   24a18:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   24a1c:	0005303a 	rdctl	r2,status
   24a20:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24a24:	e0fff917 	ldw	r3,-28(fp)
   24a28:	00bfff84 	movi	r2,-2
   24a2c:	1884703a 	and	r2,r3,r2
   24a30:	1001703a 	wrctl	status,r2
  return context;
   24a34:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24a38:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24a3c:	e0bff817 	ldw	r2,-32(fp)
   24a40:	10800817 	ldw	r2,32(r2)
   24a44:	10c00094 	ori	r3,r2,2
   24a48:	e0bff817 	ldw	r2,-32(fp)
   24a4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24a50:	e0bff817 	ldw	r2,-32(fp)
   24a54:	10800017 	ldw	r2,0(r2)
   24a58:	10800104 	addi	r2,r2,4
   24a5c:	1007883a 	mov	r3,r2
   24a60:	e0bff817 	ldw	r2,-32(fp)
   24a64:	10800817 	ldw	r2,32(r2)
   24a68:	18800035 	stwio	r2,0(r3)
   24a6c:	e0bffb17 	ldw	r2,-20(fp)
   24a70:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   24a74:	e0bffa17 	ldw	r2,-24(fp)
   24a78:	1001703a 	wrctl	status,r2
}
   24a7c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24a80:	e0bff617 	ldw	r2,-40(fp)
   24a84:	0080100e 	bge	zero,r2,24ac8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   24a88:	e0bff517 	ldw	r2,-44(fp)
   24a8c:	1090000c 	andi	r2,r2,16384
   24a90:	1000101e 	bne	r2,zero,24ad4 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24a94:	0001883a 	nop
   24a98:	e0bff817 	ldw	r2,-32(fp)
   24a9c:	10800d17 	ldw	r2,52(r2)
   24aa0:	e0ffff17 	ldw	r3,-4(fp)
   24aa4:	1880051e 	bne	r3,r2,24abc <altera_avalon_jtag_uart_write+0x1bc>
   24aa8:	e0bff817 	ldw	r2,-32(fp)
   24aac:	10c00917 	ldw	r3,36(r2)
   24ab0:	e0bff817 	ldw	r2,-32(fp)
   24ab4:	10800117 	ldw	r2,4(r2)
   24ab8:	18bff736 	bltu	r3,r2,24a98 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24abc:	e0bff817 	ldw	r2,-32(fp)
   24ac0:	10800917 	ldw	r2,36(r2)
   24ac4:	1000051e 	bne	r2,zero,24adc <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   24ac8:	e0bff617 	ldw	r2,-40(fp)
   24acc:	00bfcf16 	blt	zero,r2,24a0c <altera_avalon_jtag_uart_write+0x10c>
   24ad0:	00000306 	br	24ae0 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   24ad4:	0001883a 	nop
   24ad8:	00000106 	br	24ae0 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   24adc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   24ae0:	e0fff717 	ldw	r3,-36(fp)
   24ae4:	e0bffd17 	ldw	r2,-12(fp)
   24ae8:	18800426 	beq	r3,r2,24afc <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   24aec:	e0fff717 	ldw	r3,-36(fp)
   24af0:	e0bffd17 	ldw	r2,-12(fp)
   24af4:	1885c83a 	sub	r2,r3,r2
   24af8:	00000606 	br	24b14 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   24afc:	e0bff517 	ldw	r2,-44(fp)
   24b00:	1090000c 	andi	r2,r2,16384
   24b04:	10000226 	beq	r2,zero,24b10 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   24b08:	00bffd44 	movi	r2,-11
   24b0c:	00000106 	br	24b14 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24b10:	00bffec4 	movi	r2,-5
}
   24b14:	e037883a 	mov	sp,fp
   24b18:	dfc00117 	ldw	ra,4(sp)
   24b1c:	df000017 	ldw	fp,0(sp)
   24b20:	dec00204 	addi	sp,sp,8
   24b24:	f800283a 	ret

00024b28 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   24b28:	defffa04 	addi	sp,sp,-24
   24b2c:	dfc00515 	stw	ra,20(sp)
   24b30:	df000415 	stw	fp,16(sp)
   24b34:	df000404 	addi	fp,sp,16
   24b38:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   24b3c:	0007883a 	mov	r3,zero
   24b40:	e0bffc17 	ldw	r2,-16(fp)
   24b44:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   24b48:	e0bffc17 	ldw	r2,-16(fp)
   24b4c:	10800104 	addi	r2,r2,4
   24b50:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   24b54:	0005303a 	rdctl	r2,status
   24b58:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24b5c:	e0fffd17 	ldw	r3,-12(fp)
   24b60:	00bfff84 	movi	r2,-2
   24b64:	1884703a 	and	r2,r3,r2
   24b68:	1001703a 	wrctl	status,r2
  return context;
   24b6c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   24b70:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   24b74:	00256780 	call	25678 <alt_tick>
   24b78:	e0bfff17 	ldw	r2,-4(fp)
   24b7c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   24b80:	e0bffe17 	ldw	r2,-8(fp)
   24b84:	1001703a 	wrctl	status,r2
}
   24b88:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   24b8c:	0001883a 	nop
   24b90:	e037883a 	mov	sp,fp
   24b94:	dfc00117 	ldw	ra,4(sp)
   24b98:	df000017 	ldw	fp,0(sp)
   24b9c:	dec00204 	addi	sp,sp,8
   24ba0:	f800283a 	ret

00024ba4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   24ba4:	defff804 	addi	sp,sp,-32
   24ba8:	dfc00715 	stw	ra,28(sp)
   24bac:	df000615 	stw	fp,24(sp)
   24bb0:	df000604 	addi	fp,sp,24
   24bb4:	e13ffe15 	stw	r4,-8(fp)
   24bb8:	e17ffd15 	stw	r5,-12(fp)
   24bbc:	e1bffc15 	stw	r6,-16(fp)
   24bc0:	e1fffb15 	stw	r7,-20(fp)
   24bc4:	e0bffb17 	ldw	r2,-20(fp)
   24bc8:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   24bcc:	d0a6b417 	ldw	r2,-25904(gp)
   24bd0:	1000031e 	bne	r2,zero,24be0 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   24bd4:	e0bfff17 	ldw	r2,-4(fp)
   24bd8:	d0a6b415 	stw	r2,-25904(gp)
    return 0;
   24bdc:	00000106 	br	24be4 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   24be0:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   24be4:	e0bffe17 	ldw	r2,-8(fp)
   24be8:	10800104 	addi	r2,r2,4
   24bec:	00c001c4 	movi	r3,7
   24bf0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   24bf4:	d8000015 	stw	zero,0(sp)
   24bf8:	e1fffe17 	ldw	r7,-8(fp)
   24bfc:	018000b4 	movhi	r6,2
   24c00:	3192ca04 	addi	r6,r6,19240
   24c04:	e17ffc17 	ldw	r5,-16(fp)
   24c08:	e13ffd17 	ldw	r4,-12(fp)
   24c0c:	0024f740 	call	24f74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   24c10:	0001883a 	nop
   24c14:	e037883a 	mov	sp,fp
   24c18:	dfc00117 	ldw	ra,4(sp)
   24c1c:	df000017 	ldw	fp,0(sp)
   24c20:	dec00204 	addi	sp,sp,8
   24c24:	f800283a 	ret

00024c28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24c28:	defff404 	addi	sp,sp,-48
   24c2c:	df000b15 	stw	fp,44(sp)
   24c30:	df000b04 	addi	fp,sp,44
   24c34:	e13ff815 	stw	r4,-32(fp)
   24c38:	e17ff715 	stw	r5,-36(fp)
   24c3c:	e1bff615 	stw	r6,-40(fp)
   24c40:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   24c44:	e03ffe15 	stw	zero,-8(fp)
   24c48:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   24c4c:	d0a6b417 	ldw	r2,-25904(gp)
  
  if (alt_ticks_per_second ())
   24c50:	10004826 	beq	r2,zero,24d74 <alt_alarm_start+0x14c>
  {
    if (alarm)
   24c54:	e0bff817 	ldw	r2,-32(fp)
   24c58:	10004426 	beq	r2,zero,24d6c <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   24c5c:	e0bff817 	ldw	r2,-32(fp)
   24c60:	e0fff617 	ldw	r3,-40(fp)
   24c64:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   24c68:	e0bff817 	ldw	r2,-32(fp)
   24c6c:	e0fff517 	ldw	r3,-44(fp)
   24c70:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   24c74:	0005303a 	rdctl	r2,status
   24c78:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24c7c:	e0fff917 	ldw	r3,-28(fp)
   24c80:	00bfff84 	movi	r2,-2
   24c84:	1884703a 	and	r2,r3,r2
   24c88:	1001703a 	wrctl	status,r2
  return context;
   24c8c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   24c90:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24c94:	d0a6b517 	ldw	r2,-25900(gp)
   24c98:	d0e6b617 	ldw	r3,-25896(gp)
      
      current_nticks = alt_nticks();
   24c9c:	e0bffe15 	stw	r2,-8(fp)
   24ca0:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   24ca4:	e0bff717 	ldw	r2,-36(fp)
   24ca8:	1011883a 	mov	r8,r2
   24cac:	0013883a 	mov	r9,zero
   24cb0:	e13ffe17 	ldw	r4,-8(fp)
   24cb4:	e17fff17 	ldw	r5,-4(fp)
   24cb8:	4105883a 	add	r2,r8,r4
   24cbc:	120d803a 	cmpltu	r6,r2,r8
   24cc0:	4947883a 	add	r3,r9,r5
   24cc4:	30c9883a 	add	r4,r6,r3
   24cc8:	2007883a 	mov	r3,r4
   24ccc:	1009883a 	mov	r4,r2
   24cd0:	180b883a 	mov	r5,r3
   24cd4:	01800044 	movi	r6,1
   24cd8:	000f883a 	mov	r7,zero
   24cdc:	2185883a 	add	r2,r4,r6
   24ce0:	1111803a 	cmpltu	r8,r2,r4
   24ce4:	29c7883a 	add	r3,r5,r7
   24ce8:	40c9883a 	add	r4,r8,r3
   24cec:	2007883a 	mov	r3,r4
   24cf0:	1009883a 	mov	r4,r2
   24cf4:	180b883a 	mov	r5,r3
   24cf8:	e0bff817 	ldw	r2,-32(fp)
   24cfc:	11000215 	stw	r4,8(r2)
   24d00:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24d04:	e0bff817 	ldw	r2,-32(fp)
   24d08:	d0e00d04 	addi	r3,gp,-32716
   24d0c:	e0fffb15 	stw	r3,-20(fp)
   24d10:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24d14:	e0bffa17 	ldw	r2,-24(fp)
   24d18:	e0fffb17 	ldw	r3,-20(fp)
   24d1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24d20:	e0bffb17 	ldw	r2,-20(fp)
   24d24:	10c00017 	ldw	r3,0(r2)
   24d28:	e0bffa17 	ldw	r2,-24(fp)
   24d2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24d30:	e0bffb17 	ldw	r2,-20(fp)
   24d34:	10800017 	ldw	r2,0(r2)
   24d38:	e0fffa17 	ldw	r3,-24(fp)
   24d3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24d40:	e0bffb17 	ldw	r2,-20(fp)
   24d44:	e0fffa17 	ldw	r3,-24(fp)
   24d48:	10c00015 	stw	r3,0(r2)
}
   24d4c:	0001883a 	nop
   24d50:	e0bffd17 	ldw	r2,-12(fp)
   24d54:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   24d58:	e0bffc17 	ldw	r2,-16(fp)
   24d5c:	1001703a 	wrctl	status,r2
}
   24d60:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   24d64:	0005883a 	mov	r2,zero
   24d68:	00000306 	br	24d78 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   24d6c:	00bffa84 	movi	r2,-22
   24d70:	00000106 	br	24d78 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   24d74:	00bfde84 	movi	r2,-134
  }
}
   24d78:	e037883a 	mov	sp,fp
   24d7c:	df000017 	ldw	fp,0(sp)
   24d80:	dec00104 	addi	sp,sp,4
   24d84:	f800283a 	ret

00024d88 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24d88:	deffff04 	addi	sp,sp,-4
   24d8c:	df000015 	stw	fp,0(sp)
   24d90:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24d94:	0001883a 	nop
   24d98:	e037883a 	mov	sp,fp
   24d9c:	df000017 	ldw	fp,0(sp)
   24da0:	dec00104 	addi	sp,sp,4
   24da4:	f800283a 	ret

00024da8 <alt_get_errno>:
{
   24da8:	defffe04 	addi	sp,sp,-8
   24dac:	dfc00115 	stw	ra,4(sp)
   24db0:	df000015 	stw	fp,0(sp)
   24db4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24db8:	d0a00a17 	ldw	r2,-32728(gp)
   24dbc:	10000326 	beq	r2,zero,24dcc <alt_get_errno+0x24>
   24dc0:	d0a00a17 	ldw	r2,-32728(gp)
   24dc4:	103ee83a 	callr	r2
   24dc8:	00000106 	br	24dd0 <alt_get_errno+0x28>
   24dcc:	d0a6af04 	addi	r2,gp,-25924
}
   24dd0:	e037883a 	mov	sp,fp
   24dd4:	dfc00117 	ldw	ra,4(sp)
   24dd8:	df000017 	ldw	fp,0(sp)
   24ddc:	dec00204 	addi	sp,sp,8
   24de0:	f800283a 	ret

00024de4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24de4:	defffa04 	addi	sp,sp,-24
   24de8:	dfc00515 	stw	ra,20(sp)
   24dec:	df000415 	stw	fp,16(sp)
   24df0:	df000404 	addi	fp,sp,16
   24df4:	e13ffd15 	stw	r4,-12(fp)
   24df8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24dfc:	e0bffd17 	ldw	r2,-12(fp)
   24e00:	10000326 	beq	r2,zero,24e10 <alt_dev_llist_insert+0x2c>
   24e04:	e0bffd17 	ldw	r2,-12(fp)
   24e08:	10800217 	ldw	r2,8(r2)
   24e0c:	1000061e 	bne	r2,zero,24e28 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24e10:	0024da80 	call	24da8 <alt_get_errno>
   24e14:	1007883a 	mov	r3,r2
   24e18:	00800584 	movi	r2,22
   24e1c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24e20:	00bffa84 	movi	r2,-22
   24e24:	00001406 	br	24e78 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24e28:	e0bffd17 	ldw	r2,-12(fp)
   24e2c:	e0fffc17 	ldw	r3,-16(fp)
   24e30:	e0ffff15 	stw	r3,-4(fp)
   24e34:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   24e38:	e0bffe17 	ldw	r2,-8(fp)
   24e3c:	e0ffff17 	ldw	r3,-4(fp)
   24e40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24e44:	e0bfff17 	ldw	r2,-4(fp)
   24e48:	10c00017 	ldw	r3,0(r2)
   24e4c:	e0bffe17 	ldw	r2,-8(fp)
   24e50:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   24e54:	e0bfff17 	ldw	r2,-4(fp)
   24e58:	10800017 	ldw	r2,0(r2)
   24e5c:	e0fffe17 	ldw	r3,-8(fp)
   24e60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24e64:	e0bfff17 	ldw	r2,-4(fp)
   24e68:	e0fffe17 	ldw	r3,-8(fp)
   24e6c:	10c00015 	stw	r3,0(r2)
}
   24e70:	0001883a 	nop

  return 0;  
   24e74:	0005883a 	mov	r2,zero
}
   24e78:	e037883a 	mov	sp,fp
   24e7c:	dfc00117 	ldw	ra,4(sp)
   24e80:	df000017 	ldw	fp,0(sp)
   24e84:	dec00204 	addi	sp,sp,8
   24e88:	f800283a 	ret

00024e8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24e8c:	defffd04 	addi	sp,sp,-12
   24e90:	dfc00215 	stw	ra,8(sp)
   24e94:	df000115 	stw	fp,4(sp)
   24e98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24e9c:	008000b4 	movhi	r2,2
   24ea0:	10974c04 	addi	r2,r2,23856
   24ea4:	e0bfff15 	stw	r2,-4(fp)
   24ea8:	00000606 	br	24ec4 <_do_ctors+0x38>
        (*ctor) (); 
   24eac:	e0bfff17 	ldw	r2,-4(fp)
   24eb0:	10800017 	ldw	r2,0(r2)
   24eb4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24eb8:	e0bfff17 	ldw	r2,-4(fp)
   24ebc:	10bfff04 	addi	r2,r2,-4
   24ec0:	e0bfff15 	stw	r2,-4(fp)
   24ec4:	e0ffff17 	ldw	r3,-4(fp)
   24ec8:	008000b4 	movhi	r2,2
   24ecc:	10974d04 	addi	r2,r2,23860
   24ed0:	18bff62e 	bgeu	r3,r2,24eac <_do_ctors+0x20>
}
   24ed4:	0001883a 	nop
   24ed8:	0001883a 	nop
   24edc:	e037883a 	mov	sp,fp
   24ee0:	dfc00117 	ldw	ra,4(sp)
   24ee4:	df000017 	ldw	fp,0(sp)
   24ee8:	dec00204 	addi	sp,sp,8
   24eec:	f800283a 	ret

00024ef0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24ef0:	defffd04 	addi	sp,sp,-12
   24ef4:	dfc00215 	stw	ra,8(sp)
   24ef8:	df000115 	stw	fp,4(sp)
   24efc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24f00:	008000b4 	movhi	r2,2
   24f04:	10974c04 	addi	r2,r2,23856
   24f08:	e0bfff15 	stw	r2,-4(fp)
   24f0c:	00000606 	br	24f28 <_do_dtors+0x38>
        (*dtor) (); 
   24f10:	e0bfff17 	ldw	r2,-4(fp)
   24f14:	10800017 	ldw	r2,0(r2)
   24f18:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24f1c:	e0bfff17 	ldw	r2,-4(fp)
   24f20:	10bfff04 	addi	r2,r2,-4
   24f24:	e0bfff15 	stw	r2,-4(fp)
   24f28:	e0ffff17 	ldw	r3,-4(fp)
   24f2c:	008000b4 	movhi	r2,2
   24f30:	10974d04 	addi	r2,r2,23860
   24f34:	18bff62e 	bgeu	r3,r2,24f10 <_do_dtors+0x20>
}
   24f38:	0001883a 	nop
   24f3c:	0001883a 	nop
   24f40:	e037883a 	mov	sp,fp
   24f44:	dfc00117 	ldw	ra,4(sp)
   24f48:	df000017 	ldw	fp,0(sp)
   24f4c:	dec00204 	addi	sp,sp,8
   24f50:	f800283a 	ret

00024f54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24f54:	deffff04 	addi	sp,sp,-4
   24f58:	df000015 	stw	fp,0(sp)
   24f5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24f60:	0001883a 	nop
   24f64:	e037883a 	mov	sp,fp
   24f68:	df000017 	ldw	fp,0(sp)
   24f6c:	dec00104 	addi	sp,sp,4
   24f70:	f800283a 	ret

00024f74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24f74:	defff904 	addi	sp,sp,-28
   24f78:	dfc00615 	stw	ra,24(sp)
   24f7c:	df000515 	stw	fp,20(sp)
   24f80:	df000504 	addi	fp,sp,20
   24f84:	e13fff15 	stw	r4,-4(fp)
   24f88:	e17ffe15 	stw	r5,-8(fp)
   24f8c:	e1bffd15 	stw	r6,-12(fp)
   24f90:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24f94:	e0800217 	ldw	r2,8(fp)
   24f98:	d8800015 	stw	r2,0(sp)
   24f9c:	e1fffc17 	ldw	r7,-16(fp)
   24fa0:	e1bffd17 	ldw	r6,-12(fp)
   24fa4:	e17ffe17 	ldw	r5,-8(fp)
   24fa8:	e13fff17 	ldw	r4,-4(fp)
   24fac:	00251240 	call	25124 <alt_iic_isr_register>
}  
   24fb0:	e037883a 	mov	sp,fp
   24fb4:	dfc00117 	ldw	ra,4(sp)
   24fb8:	df000017 	ldw	fp,0(sp)
   24fbc:	dec00204 	addi	sp,sp,8
   24fc0:	f800283a 	ret

00024fc4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   24fc4:	defff904 	addi	sp,sp,-28
   24fc8:	df000615 	stw	fp,24(sp)
   24fcc:	df000604 	addi	fp,sp,24
   24fd0:	e13ffb15 	stw	r4,-20(fp)
   24fd4:	e17ffa15 	stw	r5,-24(fp)
   24fd8:	e0bffa17 	ldw	r2,-24(fp)
   24fdc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   24fe0:	0005303a 	rdctl	r2,status
   24fe4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24fe8:	e0fffe17 	ldw	r3,-8(fp)
   24fec:	00bfff84 	movi	r2,-2
   24ff0:	1884703a 	and	r2,r3,r2
   24ff4:	1001703a 	wrctl	status,r2
  return context;
   24ff8:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24ffc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   25000:	00c00044 	movi	r3,1
   25004:	e0bfff17 	ldw	r2,-4(fp)
   25008:	1884983a 	sll	r2,r3,r2
   2500c:	1007883a 	mov	r3,r2
   25010:	d0a6b317 	ldw	r2,-25908(gp)
   25014:	1884b03a 	or	r2,r3,r2
   25018:	d0a6b315 	stw	r2,-25908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2501c:	d0a6b317 	ldw	r2,-25908(gp)
   25020:	100170fa 	wrctl	ienable,r2
   25024:	e0bffd17 	ldw	r2,-12(fp)
   25028:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   2502c:	e0bffc17 	ldw	r2,-16(fp)
   25030:	1001703a 	wrctl	status,r2
}
   25034:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   25038:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2503c:	e037883a 	mov	sp,fp
   25040:	df000017 	ldw	fp,0(sp)
   25044:	dec00104 	addi	sp,sp,4
   25048:	f800283a 	ret

0002504c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2504c:	defff904 	addi	sp,sp,-28
   25050:	df000615 	stw	fp,24(sp)
   25054:	df000604 	addi	fp,sp,24
   25058:	e13ffb15 	stw	r4,-20(fp)
   2505c:	e17ffa15 	stw	r5,-24(fp)
   25060:	e0bffa17 	ldw	r2,-24(fp)
   25064:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   25068:	0005303a 	rdctl	r2,status
   2506c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25070:	e0fffe17 	ldw	r3,-8(fp)
   25074:	00bfff84 	movi	r2,-2
   25078:	1884703a 	and	r2,r3,r2
   2507c:	1001703a 	wrctl	status,r2
  return context;
   25080:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   25084:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   25088:	00c00044 	movi	r3,1
   2508c:	e0bfff17 	ldw	r2,-4(fp)
   25090:	1884983a 	sll	r2,r3,r2
   25094:	0084303a 	nor	r2,zero,r2
   25098:	1007883a 	mov	r3,r2
   2509c:	d0a6b317 	ldw	r2,-25908(gp)
   250a0:	1884703a 	and	r2,r3,r2
   250a4:	d0a6b315 	stw	r2,-25908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   250a8:	d0a6b317 	ldw	r2,-25908(gp)
   250ac:	100170fa 	wrctl	ienable,r2
   250b0:	e0bffd17 	ldw	r2,-12(fp)
   250b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   250b8:	e0bffc17 	ldw	r2,-16(fp)
   250bc:	1001703a 	wrctl	status,r2
}
   250c0:	0001883a 	nop
  return 0;
   250c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   250c8:	e037883a 	mov	sp,fp
   250cc:	df000017 	ldw	fp,0(sp)
   250d0:	dec00104 	addi	sp,sp,4
   250d4:	f800283a 	ret

000250d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   250d8:	defffc04 	addi	sp,sp,-16
   250dc:	df000315 	stw	fp,12(sp)
   250e0:	df000304 	addi	fp,sp,12
   250e4:	e13ffe15 	stw	r4,-8(fp)
   250e8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   250ec:	000530fa 	rdctl	r2,ienable
   250f0:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   250f4:	00c00044 	movi	r3,1
   250f8:	e0bffd17 	ldw	r2,-12(fp)
   250fc:	1884983a 	sll	r2,r3,r2
   25100:	1007883a 	mov	r3,r2
   25104:	e0bfff17 	ldw	r2,-4(fp)
   25108:	1884703a 	and	r2,r3,r2
   2510c:	1004c03a 	cmpne	r2,r2,zero
   25110:	10803fcc 	andi	r2,r2,255
}
   25114:	e037883a 	mov	sp,fp
   25118:	df000017 	ldw	fp,0(sp)
   2511c:	dec00104 	addi	sp,sp,4
   25120:	f800283a 	ret

00025124 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25124:	defff504 	addi	sp,sp,-44
   25128:	dfc00a15 	stw	ra,40(sp)
   2512c:	df000915 	stw	fp,36(sp)
   25130:	df000904 	addi	fp,sp,36
   25134:	e13ffa15 	stw	r4,-24(fp)
   25138:	e17ff915 	stw	r5,-28(fp)
   2513c:	e1bff815 	stw	r6,-32(fp)
   25140:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   25144:	00bffa84 	movi	r2,-22
   25148:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2514c:	e0bff917 	ldw	r2,-28(fp)
   25150:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   25154:	e0bffe17 	ldw	r2,-8(fp)
   25158:	10800808 	cmpgei	r2,r2,32
   2515c:	1000251e 	bne	r2,zero,251f4 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   25160:	0005303a 	rdctl	r2,status
   25164:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25168:	e0fffc17 	ldw	r3,-16(fp)
   2516c:	00bfff84 	movi	r2,-2
   25170:	1884703a 	and	r2,r3,r2
   25174:	1001703a 	wrctl	status,r2
  return context;
   25178:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2517c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   25180:	e0bffe17 	ldw	r2,-8(fp)
   25184:	100890fa 	slli	r4,r2,3
   25188:	e0fff817 	ldw	r3,-32(fp)
   2518c:	008000f4 	movhi	r2,3
   25190:	2085883a 	add	r2,r4,r2
   25194:	10e4b715 	stw	r3,-27940(r2)
    alt_irq[id].context = isr_context;
   25198:	e0bffe17 	ldw	r2,-8(fp)
   2519c:	100890fa 	slli	r4,r2,3
   251a0:	e0fff717 	ldw	r3,-36(fp)
   251a4:	008000f4 	movhi	r2,3
   251a8:	2085883a 	add	r2,r4,r2
   251ac:	10e4b815 	stw	r3,-27936(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   251b0:	e0bff817 	ldw	r2,-32(fp)
   251b4:	10000526 	beq	r2,zero,251cc <alt_iic_isr_register+0xa8>
   251b8:	e0bffe17 	ldw	r2,-8(fp)
   251bc:	100b883a 	mov	r5,r2
   251c0:	e13ffa17 	ldw	r4,-24(fp)
   251c4:	0024fc40 	call	24fc4 <alt_ic_irq_enable>
   251c8:	00000406 	br	251dc <alt_iic_isr_register+0xb8>
   251cc:	e0bffe17 	ldw	r2,-8(fp)
   251d0:	100b883a 	mov	r5,r2
   251d4:	e13ffa17 	ldw	r4,-24(fp)
   251d8:	002504c0 	call	2504c <alt_ic_irq_disable>
   251dc:	e0bfff15 	stw	r2,-4(fp)
   251e0:	e0bffd17 	ldw	r2,-12(fp)
   251e4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   251e8:	e0bffb17 	ldw	r2,-20(fp)
   251ec:	1001703a 	wrctl	status,r2
}
   251f0:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   251f4:	e0bfff17 	ldw	r2,-4(fp)
}
   251f8:	e037883a 	mov	sp,fp
   251fc:	dfc00117 	ldw	ra,4(sp)
   25200:	df000017 	ldw	fp,0(sp)
   25204:	dec00204 	addi	sp,sp,8
   25208:	f800283a 	ret

0002520c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2520c:	defff904 	addi	sp,sp,-28
   25210:	dfc00615 	stw	ra,24(sp)
   25214:	df000515 	stw	fp,20(sp)
   25218:	df000504 	addi	fp,sp,20
   2521c:	e13ffe15 	stw	r4,-8(fp)
   25220:	e17ffd15 	stw	r5,-12(fp)
   25224:	e1bffc15 	stw	r6,-16(fp)
   25228:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   2522c:	e1bffb17 	ldw	r6,-20(fp)
   25230:	e17ffc17 	ldw	r5,-16(fp)
   25234:	e13ffd17 	ldw	r4,-12(fp)
   25238:	00254740 	call	25474 <open>
   2523c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   25240:	e0bfff17 	ldw	r2,-4(fp)
   25244:	10002016 	blt	r2,zero,252c8 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   25248:	e0ffff17 	ldw	r3,-4(fp)
   2524c:	1805883a 	mov	r2,r3
   25250:	1085883a 	add	r2,r2,r2
   25254:	10c5883a 	add	r2,r2,r3
   25258:	100490ba 	slli	r2,r2,2
   2525c:	00c000b4 	movhi	r3,2
   25260:	10c7883a 	add	r3,r2,r3
   25264:	18d97d17 	ldw	r3,26100(r3)
   25268:	e0bffe17 	ldw	r2,-8(fp)
   2526c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   25270:	e0ffff17 	ldw	r3,-4(fp)
   25274:	1805883a 	mov	r2,r3
   25278:	1085883a 	add	r2,r2,r2
   2527c:	10c5883a 	add	r2,r2,r3
   25280:	100490ba 	slli	r2,r2,2
   25284:	00c000b4 	movhi	r3,2
   25288:	10c7883a 	add	r3,r2,r3
   2528c:	18d97e17 	ldw	r3,26104(r3)
   25290:	e0bffe17 	ldw	r2,-8(fp)
   25294:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   25298:	e0ffff17 	ldw	r3,-4(fp)
   2529c:	1805883a 	mov	r2,r3
   252a0:	1085883a 	add	r2,r2,r2
   252a4:	10c5883a 	add	r2,r2,r3
   252a8:	100490ba 	slli	r2,r2,2
   252ac:	00c000b4 	movhi	r3,2
   252b0:	10c7883a 	add	r3,r2,r3
   252b4:	18d97f17 	ldw	r3,26108(r3)
   252b8:	e0bffe17 	ldw	r2,-8(fp)
   252bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   252c0:	e13fff17 	ldw	r4,-4(fp)
   252c4:	0023d780 	call	23d78 <alt_release_fd>
  }
} 
   252c8:	0001883a 	nop
   252cc:	e037883a 	mov	sp,fp
   252d0:	dfc00117 	ldw	ra,4(sp)
   252d4:	df000017 	ldw	fp,0(sp)
   252d8:	dec00204 	addi	sp,sp,8
   252dc:	f800283a 	ret

000252e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   252e0:	defffb04 	addi	sp,sp,-20
   252e4:	dfc00415 	stw	ra,16(sp)
   252e8:	df000315 	stw	fp,12(sp)
   252ec:	df000304 	addi	fp,sp,12
   252f0:	e13fff15 	stw	r4,-4(fp)
   252f4:	e17ffe15 	stw	r5,-8(fp)
   252f8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   252fc:	01c07fc4 	movi	r7,511
   25300:	01800044 	movi	r6,1
   25304:	e17fff17 	ldw	r5,-4(fp)
   25308:	010000b4 	movhi	r4,2
   2530c:	21198004 	addi	r4,r4,26112
   25310:	002520c0 	call	2520c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   25314:	01c07fc4 	movi	r7,511
   25318:	000d883a 	mov	r6,zero
   2531c:	e17ffe17 	ldw	r5,-8(fp)
   25320:	010000b4 	movhi	r4,2
   25324:	21197d04 	addi	r4,r4,26100
   25328:	002520c0 	call	2520c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2532c:	01c07fc4 	movi	r7,511
   25330:	01800044 	movi	r6,1
   25334:	e17ffd17 	ldw	r5,-12(fp)
   25338:	010000b4 	movhi	r4,2
   2533c:	21198304 	addi	r4,r4,26124
   25340:	002520c0 	call	2520c <alt_open_fd>
}  
   25344:	0001883a 	nop
   25348:	e037883a 	mov	sp,fp
   2534c:	dfc00117 	ldw	ra,4(sp)
   25350:	df000017 	ldw	fp,0(sp)
   25354:	dec00204 	addi	sp,sp,8
   25358:	f800283a 	ret

0002535c <alt_get_errno>:
{
   2535c:	defffe04 	addi	sp,sp,-8
   25360:	dfc00115 	stw	ra,4(sp)
   25364:	df000015 	stw	fp,0(sp)
   25368:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2536c:	d0a00a17 	ldw	r2,-32728(gp)
   25370:	10000326 	beq	r2,zero,25380 <alt_get_errno+0x24>
   25374:	d0a00a17 	ldw	r2,-32728(gp)
   25378:	103ee83a 	callr	r2
   2537c:	00000106 	br	25384 <alt_get_errno+0x28>
   25380:	d0a6af04 	addi	r2,gp,-25924
}
   25384:	e037883a 	mov	sp,fp
   25388:	dfc00117 	ldw	ra,4(sp)
   2538c:	df000017 	ldw	fp,0(sp)
   25390:	dec00204 	addi	sp,sp,8
   25394:	f800283a 	ret

00025398 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   25398:	defffd04 	addi	sp,sp,-12
   2539c:	df000215 	stw	fp,8(sp)
   253a0:	df000204 	addi	fp,sp,8
   253a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   253a8:	e0bffe17 	ldw	r2,-8(fp)
   253ac:	10800217 	ldw	r2,8(r2)
   253b0:	10d00034 	orhi	r3,r2,16384
   253b4:	e0bffe17 	ldw	r2,-8(fp)
   253b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   253bc:	e03fff15 	stw	zero,-4(fp)
   253c0:	00002306 	br	25450 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   253c4:	e0ffff17 	ldw	r3,-4(fp)
   253c8:	1805883a 	mov	r2,r3
   253cc:	1085883a 	add	r2,r2,r2
   253d0:	10c5883a 	add	r2,r2,r3
   253d4:	100490ba 	slli	r2,r2,2
   253d8:	00c000b4 	movhi	r3,2
   253dc:	10c7883a 	add	r3,r2,r3
   253e0:	18d97d17 	ldw	r3,26100(r3)
   253e4:	e0bffe17 	ldw	r2,-8(fp)
   253e8:	10800017 	ldw	r2,0(r2)
   253ec:	1880151e 	bne	r3,r2,25444 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   253f0:	e0ffff17 	ldw	r3,-4(fp)
   253f4:	1805883a 	mov	r2,r3
   253f8:	1085883a 	add	r2,r2,r2
   253fc:	10c5883a 	add	r2,r2,r3
   25400:	100490ba 	slli	r2,r2,2
   25404:	00c000b4 	movhi	r3,2
   25408:	10c7883a 	add	r3,r2,r3
   2540c:	18997f17 	ldw	r2,26108(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   25410:	10000c0e 	bge	r2,zero,25444 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   25414:	e0ffff17 	ldw	r3,-4(fp)
   25418:	1805883a 	mov	r2,r3
   2541c:	1085883a 	add	r2,r2,r2
   25420:	10c5883a 	add	r2,r2,r3
   25424:	100490ba 	slli	r2,r2,2
   25428:	00c000b4 	movhi	r3,2
   2542c:	18d97d04 	addi	r3,r3,26100
   25430:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25434:	e0fffe17 	ldw	r3,-8(fp)
   25438:	18800226 	beq	r3,r2,25444 <alt_file_locked+0xac>
    {
      return -EACCES;
   2543c:	00bffcc4 	movi	r2,-13
   25440:	00000806 	br	25464 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   25444:	e0bfff17 	ldw	r2,-4(fp)
   25448:	10800044 	addi	r2,r2,1
   2544c:	e0bfff15 	stw	r2,-4(fp)
   25450:	d0a00917 	ldw	r2,-32732(gp)
   25454:	1007883a 	mov	r3,r2
   25458:	e0bfff17 	ldw	r2,-4(fp)
   2545c:	18bfd92e 	bgeu	r3,r2,253c4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   25460:	0005883a 	mov	r2,zero
}
   25464:	e037883a 	mov	sp,fp
   25468:	df000017 	ldw	fp,0(sp)
   2546c:	dec00104 	addi	sp,sp,4
   25470:	f800283a 	ret

00025474 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   25474:	defff604 	addi	sp,sp,-40
   25478:	dfc00915 	stw	ra,36(sp)
   2547c:	df000815 	stw	fp,32(sp)
   25480:	df000804 	addi	fp,sp,32
   25484:	e13ffa15 	stw	r4,-24(fp)
   25488:	e17ff915 	stw	r5,-28(fp)
   2548c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   25490:	00bfffc4 	movi	r2,-1
   25494:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   25498:	00bffb44 	movi	r2,-19
   2549c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   254a0:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   254a4:	d1600704 	addi	r5,gp,-32740
   254a8:	e13ffa17 	ldw	r4,-24(fp)
   254ac:	00257c80 	call	257c8 <alt_find_dev>
   254b0:	e0bfff15 	stw	r2,-4(fp)
   254b4:	e0bfff17 	ldw	r2,-4(fp)
   254b8:	1000051e 	bne	r2,zero,254d0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   254bc:	e13ffa17 	ldw	r4,-24(fp)
   254c0:	00258580 	call	25858 <alt_find_file>
   254c4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   254c8:	00800044 	movi	r2,1
   254cc:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   254d0:	e0bfff17 	ldw	r2,-4(fp)
   254d4:	10002c26 	beq	r2,zero,25588 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   254d8:	e13fff17 	ldw	r4,-4(fp)
   254dc:	00259600 	call	25960 <alt_get_fd>
   254e0:	e0bffe15 	stw	r2,-8(fp)
   254e4:	e0bffe17 	ldw	r2,-8(fp)
   254e8:	1000030e 	bge	r2,zero,254f8 <open+0x84>
    {
      status = index;
   254ec:	e0bffe17 	ldw	r2,-8(fp)
   254f0:	e0bffd15 	stw	r2,-12(fp)
   254f4:	00002606 	br	25590 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   254f8:	e0fffe17 	ldw	r3,-8(fp)
   254fc:	1805883a 	mov	r2,r3
   25500:	1085883a 	add	r2,r2,r2
   25504:	10c5883a 	add	r2,r2,r3
   25508:	100490ba 	slli	r2,r2,2
   2550c:	00c000b4 	movhi	r3,2
   25510:	18d97d04 	addi	r3,r3,26100
   25514:	10c5883a 	add	r2,r2,r3
   25518:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2551c:	e0fff917 	ldw	r3,-28(fp)
   25520:	00900034 	movhi	r2,16384
   25524:	10bfffc4 	addi	r2,r2,-1
   25528:	1886703a 	and	r3,r3,r2
   2552c:	e0bffb17 	ldw	r2,-20(fp)
   25530:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   25534:	e0bffc17 	ldw	r2,-16(fp)
   25538:	1000051e 	bne	r2,zero,25550 <open+0xdc>
   2553c:	e13ffb17 	ldw	r4,-20(fp)
   25540:	00253980 	call	25398 <alt_file_locked>
   25544:	e0bffd15 	stw	r2,-12(fp)
   25548:	e0bffd17 	ldw	r2,-12(fp)
   2554c:	10001016 	blt	r2,zero,25590 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   25550:	e0bfff17 	ldw	r2,-4(fp)
   25554:	10800317 	ldw	r2,12(r2)
   25558:	10000826 	beq	r2,zero,2557c <open+0x108>
   2555c:	e0bfff17 	ldw	r2,-4(fp)
   25560:	10800317 	ldw	r2,12(r2)
   25564:	e1fff817 	ldw	r7,-32(fp)
   25568:	e1bff917 	ldw	r6,-28(fp)
   2556c:	e17ffa17 	ldw	r5,-24(fp)
   25570:	e13ffb17 	ldw	r4,-20(fp)
   25574:	103ee83a 	callr	r2
   25578:	00000106 	br	25580 <open+0x10c>
   2557c:	0005883a 	mov	r2,zero
   25580:	e0bffd15 	stw	r2,-12(fp)
   25584:	00000206 	br	25590 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   25588:	00bffb44 	movi	r2,-19
   2558c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   25590:	e0bffd17 	ldw	r2,-12(fp)
   25594:	1000090e 	bge	r2,zero,255bc <open+0x148>
  {
    alt_release_fd (index);  
   25598:	e13ffe17 	ldw	r4,-8(fp)
   2559c:	0023d780 	call	23d78 <alt_release_fd>
    ALT_ERRNO = -status;
   255a0:	002535c0 	call	2535c <alt_get_errno>
   255a4:	1007883a 	mov	r3,r2
   255a8:	e0bffd17 	ldw	r2,-12(fp)
   255ac:	0085c83a 	sub	r2,zero,r2
   255b0:	18800015 	stw	r2,0(r3)
    return -1;
   255b4:	00bfffc4 	movi	r2,-1
   255b8:	00000106 	br	255c0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   255bc:	e0bffe17 	ldw	r2,-8(fp)
}
   255c0:	e037883a 	mov	sp,fp
   255c4:	dfc00117 	ldw	ra,4(sp)
   255c8:	df000017 	ldw	fp,0(sp)
   255cc:	dec00204 	addi	sp,sp,8
   255d0:	f800283a 	ret

000255d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   255d4:	defffa04 	addi	sp,sp,-24
   255d8:	df000515 	stw	fp,20(sp)
   255dc:	df000504 	addi	fp,sp,20
   255e0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   255e4:	0005303a 	rdctl	r2,status
   255e8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   255ec:	e0fffc17 	ldw	r3,-16(fp)
   255f0:	00bfff84 	movi	r2,-2
   255f4:	1884703a 	and	r2,r3,r2
   255f8:	1001703a 	wrctl	status,r2
  return context;
   255fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   25600:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   25604:	e0bffb17 	ldw	r2,-20(fp)
   25608:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2560c:	e0bffd17 	ldw	r2,-12(fp)
   25610:	10800017 	ldw	r2,0(r2)
   25614:	e0fffd17 	ldw	r3,-12(fp)
   25618:	18c00117 	ldw	r3,4(r3)
   2561c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   25620:	e0bffd17 	ldw	r2,-12(fp)
   25624:	10800117 	ldw	r2,4(r2)
   25628:	e0fffd17 	ldw	r3,-12(fp)
   2562c:	18c00017 	ldw	r3,0(r3)
   25630:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   25634:	e0bffd17 	ldw	r2,-12(fp)
   25638:	e0fffd17 	ldw	r3,-12(fp)
   2563c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   25640:	e0bffd17 	ldw	r2,-12(fp)
   25644:	e0fffd17 	ldw	r3,-12(fp)
   25648:	10c00015 	stw	r3,0(r2)
} 
   2564c:	0001883a 	nop
   25650:	e0bfff17 	ldw	r2,-4(fp)
   25654:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   25658:	e0bffe17 	ldw	r2,-8(fp)
   2565c:	1001703a 	wrctl	status,r2
}
   25660:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   25664:	0001883a 	nop
   25668:	e037883a 	mov	sp,fp
   2566c:	df000017 	ldw	fp,0(sp)
   25670:	dec00104 	addi	sp,sp,4
   25674:	f800283a 	ret

00025678 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   25678:	defff904 	addi	sp,sp,-28
   2567c:	dfc00615 	stw	ra,24(sp)
   25680:	df000515 	stw	fp,20(sp)
   25684:	dc400415 	stw	r17,16(sp)
   25688:	dc000315 	stw	r16,12(sp)
   2568c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   25690:	d0a00d17 	ldw	r2,-32716(gp)
   25694:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   25698:	d126b517 	ldw	r4,-25900(gp)
   2569c:	d166b617 	ldw	r5,-25896(gp)
   256a0:	01800044 	movi	r6,1
   256a4:	000f883a 	mov	r7,zero
   256a8:	2185883a 	add	r2,r4,r6
   256ac:	1111803a 	cmpltu	r8,r2,r4
   256b0:	29c7883a 	add	r3,r5,r7
   256b4:	40c9883a 	add	r4,r8,r3
   256b8:	2007883a 	mov	r3,r4
   256bc:	1009883a 	mov	r4,r2
   256c0:	180b883a 	mov	r5,r3
   256c4:	d126b515 	stw	r4,-25900(gp)
   256c8:	d166b615 	stw	r5,-25896(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   256cc:	00002906 	br	25774 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   256d0:	e0bffd17 	ldw	r2,-12(fp)
   256d4:	10800017 	ldw	r2,0(r2)
   256d8:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   256dc:	e13ffd17 	ldw	r4,-12(fp)
   256e0:	20800217 	ldw	r2,8(r4)
   256e4:	20c00317 	ldw	r3,12(r4)
   256e8:	d126b517 	ldw	r4,-25900(gp)
   256ec:	d166b617 	ldw	r5,-25896(gp)
   256f0:	28c01e36 	bltu	r5,r3,2576c <alt_tick+0xf4>
   256f4:	1940011e 	bne	r3,r5,256fc <alt_tick+0x84>
   256f8:	20801c36 	bltu	r4,r2,2576c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   256fc:	e0bffd17 	ldw	r2,-12(fp)
   25700:	10800417 	ldw	r2,16(r2)
   25704:	e0fffd17 	ldw	r3,-12(fp)
   25708:	18c00517 	ldw	r3,20(r3)
   2570c:	1809883a 	mov	r4,r3
   25710:	103ee83a 	callr	r2
   25714:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   25718:	e0bffb17 	ldw	r2,-20(fp)
   2571c:	1000031e 	bne	r2,zero,2572c <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   25720:	e13ffd17 	ldw	r4,-12(fp)
   25724:	00255d40 	call	255d4 <alt_alarm_stop>
   25728:	00001006 	br	2576c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   2572c:	e0bffd17 	ldw	r2,-12(fp)
   25730:	11000217 	ldw	r4,8(r2)
   25734:	11400317 	ldw	r5,12(r2)
   25738:	e0bffb17 	ldw	r2,-20(fp)
   2573c:	1021883a 	mov	r16,r2
   25740:	0023883a 	mov	r17,zero
   25744:	2405883a 	add	r2,r4,r16
   25748:	110d803a 	cmpltu	r6,r2,r4
   2574c:	2c47883a 	add	r3,r5,r17
   25750:	30c9883a 	add	r4,r6,r3
   25754:	2007883a 	mov	r3,r4
   25758:	1009883a 	mov	r4,r2
   2575c:	180b883a 	mov	r5,r3
   25760:	e0bffd17 	ldw	r2,-12(fp)
   25764:	11000215 	stw	r4,8(r2)
   25768:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   2576c:	e0bffc17 	ldw	r2,-16(fp)
   25770:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   25774:	e0fffd17 	ldw	r3,-12(fp)
   25778:	d0a00d04 	addi	r2,gp,-32716
   2577c:	18bfd41e 	bne	r3,r2,256d0 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   25780:	0001883a 	nop
}
   25784:	0001883a 	nop
   25788:	e6fffe04 	addi	sp,fp,-8
   2578c:	dfc00317 	ldw	ra,12(sp)
   25790:	df000217 	ldw	fp,8(sp)
   25794:	dc400117 	ldw	r17,4(sp)
   25798:	dc000017 	ldw	r16,0(sp)
   2579c:	dec00404 	addi	sp,sp,16
   257a0:	f800283a 	ret

000257a4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   257a4:	deffff04 	addi	sp,sp,-4
   257a8:	df000015 	stw	fp,0(sp)
   257ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   257b0:	000170fa 	wrctl	ienable,zero
}
   257b4:	0001883a 	nop
   257b8:	e037883a 	mov	sp,fp
   257bc:	df000017 	ldw	fp,0(sp)
   257c0:	dec00104 	addi	sp,sp,4
   257c4:	f800283a 	ret

000257c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   257c8:	defffa04 	addi	sp,sp,-24
   257cc:	dfc00515 	stw	ra,20(sp)
   257d0:	df000415 	stw	fp,16(sp)
   257d4:	df000404 	addi	fp,sp,16
   257d8:	e13ffd15 	stw	r4,-12(fp)
   257dc:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   257e0:	e0bffc17 	ldw	r2,-16(fp)
   257e4:	10800017 	ldw	r2,0(r2)
   257e8:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   257ec:	e13ffd17 	ldw	r4,-12(fp)
   257f0:	0020bfc0 	call	20bfc <strlen>
   257f4:	10800044 	addi	r2,r2,1
   257f8:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   257fc:	00000d06 	br	25834 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   25800:	e0bfff17 	ldw	r2,-4(fp)
   25804:	10800217 	ldw	r2,8(r2)
   25808:	e0fffe17 	ldw	r3,-8(fp)
   2580c:	180d883a 	mov	r6,r3
   25810:	e17ffd17 	ldw	r5,-12(fp)
   25814:	1009883a 	mov	r4,r2
   25818:	0025ad40 	call	25ad4 <memcmp>
   2581c:	1000021e 	bne	r2,zero,25828 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   25820:	e0bfff17 	ldw	r2,-4(fp)
   25824:	00000706 	br	25844 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   25828:	e0bfff17 	ldw	r2,-4(fp)
   2582c:	10800017 	ldw	r2,0(r2)
   25830:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   25834:	e0ffff17 	ldw	r3,-4(fp)
   25838:	e0bffc17 	ldw	r2,-16(fp)
   2583c:	18bff01e 	bne	r3,r2,25800 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   25840:	0005883a 	mov	r2,zero
}
   25844:	e037883a 	mov	sp,fp
   25848:	dfc00117 	ldw	ra,4(sp)
   2584c:	df000017 	ldw	fp,0(sp)
   25850:	dec00204 	addi	sp,sp,8
   25854:	f800283a 	ret

00025858 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   25858:	defffb04 	addi	sp,sp,-20
   2585c:	dfc00415 	stw	ra,16(sp)
   25860:	df000315 	stw	fp,12(sp)
   25864:	df000304 	addi	fp,sp,12
   25868:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2586c:	d0a00517 	ldw	r2,-32748(gp)
   25870:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25874:	00003106 	br	2593c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   25878:	e0bfff17 	ldw	r2,-4(fp)
   2587c:	10800217 	ldw	r2,8(r2)
   25880:	1009883a 	mov	r4,r2
   25884:	0020bfc0 	call	20bfc <strlen>
   25888:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2588c:	e0bfff17 	ldw	r2,-4(fp)
   25890:	10c00217 	ldw	r3,8(r2)
   25894:	e0bffe17 	ldw	r2,-8(fp)
   25898:	10bfffc4 	addi	r2,r2,-1
   2589c:	1885883a 	add	r2,r3,r2
   258a0:	10800003 	ldbu	r2,0(r2)
   258a4:	10803fcc 	andi	r2,r2,255
   258a8:	1080201c 	xori	r2,r2,128
   258ac:	10bfe004 	addi	r2,r2,-128
   258b0:	10800bd8 	cmpnei	r2,r2,47
   258b4:	1000031e 	bne	r2,zero,258c4 <alt_find_file+0x6c>
    {
      len -= 1;
   258b8:	e0bffe17 	ldw	r2,-8(fp)
   258bc:	10bfffc4 	addi	r2,r2,-1
   258c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   258c4:	e0bffe17 	ldw	r2,-8(fp)
   258c8:	e0fffd17 	ldw	r3,-12(fp)
   258cc:	1885883a 	add	r2,r3,r2
   258d0:	10800003 	ldbu	r2,0(r2)
   258d4:	10803fcc 	andi	r2,r2,255
   258d8:	1080201c 	xori	r2,r2,128
   258dc:	10bfe004 	addi	r2,r2,-128
   258e0:	10800be0 	cmpeqi	r2,r2,47
   258e4:	1000081e 	bne	r2,zero,25908 <alt_find_file+0xb0>
   258e8:	e0bffe17 	ldw	r2,-8(fp)
   258ec:	e0fffd17 	ldw	r3,-12(fp)
   258f0:	1885883a 	add	r2,r3,r2
   258f4:	10800003 	ldbu	r2,0(r2)
   258f8:	10803fcc 	andi	r2,r2,255
   258fc:	1080201c 	xori	r2,r2,128
   25900:	10bfe004 	addi	r2,r2,-128
   25904:	10000a1e 	bne	r2,zero,25930 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   25908:	e0bfff17 	ldw	r2,-4(fp)
   2590c:	10800217 	ldw	r2,8(r2)
   25910:	e0fffe17 	ldw	r3,-8(fp)
   25914:	180d883a 	mov	r6,r3
   25918:	e17ffd17 	ldw	r5,-12(fp)
   2591c:	1009883a 	mov	r4,r2
   25920:	0025ad40 	call	25ad4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   25924:	1000021e 	bne	r2,zero,25930 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   25928:	e0bfff17 	ldw	r2,-4(fp)
   2592c:	00000706 	br	2594c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   25930:	e0bfff17 	ldw	r2,-4(fp)
   25934:	10800017 	ldw	r2,0(r2)
   25938:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   2593c:	e0ffff17 	ldw	r3,-4(fp)
   25940:	d0a00504 	addi	r2,gp,-32748
   25944:	18bfcc1e 	bne	r3,r2,25878 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   25948:	0005883a 	mov	r2,zero
}
   2594c:	e037883a 	mov	sp,fp
   25950:	dfc00117 	ldw	ra,4(sp)
   25954:	df000017 	ldw	fp,0(sp)
   25958:	dec00204 	addi	sp,sp,8
   2595c:	f800283a 	ret

00025960 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25960:	defffc04 	addi	sp,sp,-16
   25964:	df000315 	stw	fp,12(sp)
   25968:	df000304 	addi	fp,sp,12
   2596c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   25970:	00bffa04 	movi	r2,-24
   25974:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25978:	e03fff15 	stw	zero,-4(fp)
   2597c:	00001d06 	br	259f4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   25980:	e0ffff17 	ldw	r3,-4(fp)
   25984:	1805883a 	mov	r2,r3
   25988:	1085883a 	add	r2,r2,r2
   2598c:	10c5883a 	add	r2,r2,r3
   25990:	100490ba 	slli	r2,r2,2
   25994:	00c000b4 	movhi	r3,2
   25998:	10c7883a 	add	r3,r2,r3
   2599c:	18997d17 	ldw	r2,26100(r3)
   259a0:	1000111e 	bne	r2,zero,259e8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   259a4:	e0ffff17 	ldw	r3,-4(fp)
   259a8:	1805883a 	mov	r2,r3
   259ac:	1085883a 	add	r2,r2,r2
   259b0:	10c5883a 	add	r2,r2,r3
   259b4:	100490ba 	slli	r2,r2,2
   259b8:	e13ffd17 	ldw	r4,-12(fp)
   259bc:	00c000b4 	movhi	r3,2
   259c0:	10c7883a 	add	r3,r2,r3
   259c4:	19197d15 	stw	r4,26100(r3)
      if (i > alt_max_fd)
   259c8:	d0e00917 	ldw	r3,-32732(gp)
   259cc:	e0bfff17 	ldw	r2,-4(fp)
   259d0:	1880020e 	bge	r3,r2,259dc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   259d4:	e0bfff17 	ldw	r2,-4(fp)
   259d8:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   259dc:	e0bfff17 	ldw	r2,-4(fp)
   259e0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   259e4:	00000706 	br	25a04 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   259e8:	e0bfff17 	ldw	r2,-4(fp)
   259ec:	10800044 	addi	r2,r2,1
   259f0:	e0bfff15 	stw	r2,-4(fp)
   259f4:	e0bfff17 	ldw	r2,-4(fp)
   259f8:	10800810 	cmplti	r2,r2,32
   259fc:	103fe01e 	bne	r2,zero,25980 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   25a00:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25a04:	e0bffe17 	ldw	r2,-8(fp)
}
   25a08:	e037883a 	mov	sp,fp
   25a0c:	df000017 	ldw	fp,0(sp)
   25a10:	dec00104 	addi	sp,sp,4
   25a14:	f800283a 	ret

00025a18 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   25a18:	defffe04 	addi	sp,sp,-8
   25a1c:	df000115 	stw	fp,4(sp)
   25a20:	df000104 	addi	fp,sp,4
   25a24:	e13fff15 	stw	r4,-4(fp)
   25a28:	e0bfff17 	ldw	r2,-4(fp)
   25a2c:	10bffe84 	addi	r2,r2,-6
   25a30:	10c00428 	cmpgeui	r3,r2,16
   25a34:	18c03fcc 	andi	r3,r3,255
   25a38:	18000f1e 	bne	r3,zero,25a78 <alt_exception_cause_generated_bad_addr+0x60>
   25a3c:	00c00044 	movi	r3,1
   25a40:	1884983a 	sll	r2,r3,r2
   25a44:	10e2c8cc 	andi	r3,r2,35619
   25a48:	1806c03a 	cmpne	r3,r3,zero
   25a4c:	18c03fcc 	andi	r3,r3,255
   25a50:	1800051e 	bne	r3,zero,25a68 <alt_exception_cause_generated_bad_addr+0x50>
   25a54:	1084100c 	andi	r2,r2,4160
   25a58:	1004c03a 	cmpne	r2,r2,zero
   25a5c:	10803fcc 	andi	r2,r2,255
   25a60:	1000031e 	bne	r2,zero,25a70 <alt_exception_cause_generated_bad_addr+0x58>
   25a64:	00000406 	br	25a78 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   25a68:	00800044 	movi	r2,1
   25a6c:	00000306 	br	25a7c <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   25a70:	0005883a 	mov	r2,zero
   25a74:	00000106 	br	25a7c <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   25a78:	0005883a 	mov	r2,zero
  }
}
   25a7c:	e037883a 	mov	sp,fp
   25a80:	df000017 	ldw	fp,0(sp)
   25a84:	dec00104 	addi	sp,sp,4
   25a88:	f800283a 	ret

00025a8c <atexit>:
   25a8c:	200b883a 	mov	r5,r4
   25a90:	000f883a 	mov	r7,zero
   25a94:	000d883a 	mov	r6,zero
   25a98:	0009883a 	mov	r4,zero
   25a9c:	0025b4c1 	jmpi	25b4c <__register_exitproc>

00025aa0 <exit>:
   25aa0:	defffe04 	addi	sp,sp,-8
   25aa4:	000b883a 	mov	r5,zero
   25aa8:	dc000015 	stw	r16,0(sp)
   25aac:	dfc00115 	stw	ra,4(sp)
   25ab0:	2021883a 	mov	r16,r4
   25ab4:	0025bdc0 	call	25bdc <__call_exitprocs>
   25ab8:	008000b4 	movhi	r2,2
   25abc:	111df617 	ldw	r4,30680(r2)
   25ac0:	20800f17 	ldw	r2,60(r4)
   25ac4:	10000126 	beq	r2,zero,25acc <exit+0x2c>
   25ac8:	103ee83a 	callr	r2
   25acc:	8009883a 	mov	r4,r16
   25ad0:	0025cfc0 	call	25cfc <_exit>

00025ad4 <memcmp>:
   25ad4:	30800130 	cmpltui	r2,r6,4
   25ad8:	10000b1e 	bne	r2,zero,25b08 <memcmp+0x34>
   25adc:	2144b03a 	or	r2,r4,r5
   25ae0:	108000cc 	andi	r2,r2,3
   25ae4:	1000171e 	bne	r2,zero,25b44 <memcmp+0x70>
   25ae8:	20c00017 	ldw	r3,0(r4)
   25aec:	28800017 	ldw	r2,0(r5)
   25af0:	1880141e 	bne	r3,r2,25b44 <memcmp+0x70>
   25af4:	31bfff04 	addi	r6,r6,-4
   25af8:	30800128 	cmpgeui	r2,r6,4
   25afc:	21000104 	addi	r4,r4,4
   25b00:	29400104 	addi	r5,r5,4
   25b04:	103ff81e 	bne	r2,zero,25ae8 <memcmp+0x14>
   25b08:	30bfffc4 	addi	r2,r6,-1
   25b0c:	30000b26 	beq	r6,zero,25b3c <memcmp+0x68>
   25b10:	11800044 	addi	r6,r2,1
   25b14:	218d883a 	add	r6,r4,r6
   25b18:	00000106 	br	25b20 <memcmp+0x4c>
   25b1c:	21800726 	beq	r4,r6,25b3c <memcmp+0x68>
   25b20:	20800003 	ldbu	r2,0(r4)
   25b24:	28c00003 	ldbu	r3,0(r5)
   25b28:	21000044 	addi	r4,r4,1
   25b2c:	29400044 	addi	r5,r5,1
   25b30:	10fffa26 	beq	r2,r3,25b1c <memcmp+0x48>
   25b34:	10c5c83a 	sub	r2,r2,r3
   25b38:	f800283a 	ret
   25b3c:	0005883a 	mov	r2,zero
   25b40:	f800283a 	ret
   25b44:	30bfffc4 	addi	r2,r6,-1
   25b48:	003ff106 	br	25b10 <memcmp+0x3c>

00025b4c <__register_exitproc>:
   25b4c:	008000b4 	movhi	r2,2
   25b50:	10ddf617 	ldw	r3,30680(r2)
   25b54:	18805217 	ldw	r2,328(r3)
   25b58:	10001726 	beq	r2,zero,25bb8 <__register_exitproc+0x6c>
   25b5c:	10c00117 	ldw	r3,4(r2)
   25b60:	1a000808 	cmpgei	r8,r3,32
   25b64:	40001b1e 	bne	r8,zero,25bd4 <__register_exitproc+0x88>
   25b68:	20000b26 	beq	r4,zero,25b98 <__register_exitproc+0x4c>
   25b6c:	181090ba 	slli	r8,r3,2
   25b70:	02400044 	movi	r9,1
   25b74:	48d2983a 	sll	r9,r9,r3
   25b78:	1211883a 	add	r8,r2,r8
   25b7c:	41802215 	stw	r6,136(r8)
   25b80:	11806217 	ldw	r6,392(r2)
   25b84:	21000098 	cmpnei	r4,r4,2
   25b88:	324cb03a 	or	r6,r6,r9
   25b8c:	11806215 	stw	r6,392(r2)
   25b90:	41c04215 	stw	r7,264(r8)
   25b94:	20000b26 	beq	r4,zero,25bc4 <__register_exitproc+0x78>
   25b98:	19000084 	addi	r4,r3,2
   25b9c:	200890ba 	slli	r4,r4,2
   25ba0:	18c00044 	addi	r3,r3,1
   25ba4:	10c00115 	stw	r3,4(r2)
   25ba8:	1105883a 	add	r2,r2,r4
   25bac:	11400015 	stw	r5,0(r2)
   25bb0:	0005883a 	mov	r2,zero
   25bb4:	f800283a 	ret
   25bb8:	18805304 	addi	r2,r3,332
   25bbc:	18805215 	stw	r2,328(r3)
   25bc0:	003fe606 	br	25b5c <__register_exitproc+0x10>
   25bc4:	11006317 	ldw	r4,396(r2)
   25bc8:	2248b03a 	or	r4,r4,r9
   25bcc:	11006315 	stw	r4,396(r2)
   25bd0:	003ff106 	br	25b98 <__register_exitproc+0x4c>
   25bd4:	00bfffc4 	movi	r2,-1
   25bd8:	f800283a 	ret

00025bdc <__call_exitprocs>:
   25bdc:	defff704 	addi	sp,sp,-36
   25be0:	008000b4 	movhi	r2,2
   25be4:	dcc00315 	stw	r19,12(sp)
   25be8:	14ddf617 	ldw	r19,30680(r2)
   25bec:	dc800215 	stw	r18,8(sp)
   25bf0:	dfc00815 	stw	ra,32(sp)
   25bf4:	9c805217 	ldw	r18,328(r19)
   25bf8:	ddc00715 	stw	r23,28(sp)
   25bfc:	dd800615 	stw	r22,24(sp)
   25c00:	dd400515 	stw	r21,20(sp)
   25c04:	dd000415 	stw	r20,16(sp)
   25c08:	dc400115 	stw	r17,4(sp)
   25c0c:	dc000015 	stw	r16,0(sp)
   25c10:	90001026 	beq	r18,zero,25c54 <__call_exitprocs+0x78>
   25c14:	202b883a 	mov	r21,r4
   25c18:	282d883a 	mov	r22,r5
   25c1c:	05000044 	movi	r20,1
   25c20:	94000117 	ldw	r16,4(r18)
   25c24:	847fffc4 	addi	r17,r16,-1
   25c28:	88000a16 	blt	r17,zero,25c54 <__call_exitprocs+0x78>
   25c2c:	84000044 	addi	r16,r16,1
   25c30:	802090ba 	slli	r16,r16,2
   25c34:	9421883a 	add	r16,r18,r16
   25c38:	b0001126 	beq	r22,zero,25c80 <__call_exitprocs+0xa4>
   25c3c:	80804017 	ldw	r2,256(r16)
   25c40:	15800f26 	beq	r2,r22,25c80 <__call_exitprocs+0xa4>
   25c44:	8c7fffc4 	addi	r17,r17,-1
   25c48:	88bfffd8 	cmpnei	r2,r17,-1
   25c4c:	843fff04 	addi	r16,r16,-4
   25c50:	103ff91e 	bne	r2,zero,25c38 <__call_exitprocs+0x5c>
   25c54:	dfc00817 	ldw	ra,32(sp)
   25c58:	ddc00717 	ldw	r23,28(sp)
   25c5c:	dd800617 	ldw	r22,24(sp)
   25c60:	dd400517 	ldw	r21,20(sp)
   25c64:	dd000417 	ldw	r20,16(sp)
   25c68:	dcc00317 	ldw	r19,12(sp)
   25c6c:	dc800217 	ldw	r18,8(sp)
   25c70:	dc400117 	ldw	r17,4(sp)
   25c74:	dc000017 	ldw	r16,0(sp)
   25c78:	dec00904 	addi	sp,sp,36
   25c7c:	f800283a 	ret
   25c80:	90800117 	ldw	r2,4(r18)
   25c84:	81800017 	ldw	r6,0(r16)
   25c88:	10bfffc4 	addi	r2,r2,-1
   25c8c:	14401726 	beq	r2,r17,25cec <__call_exitprocs+0x110>
   25c90:	80000015 	stw	zero,0(r16)
   25c94:	303feb26 	beq	r6,zero,25c44 <__call_exitprocs+0x68>
   25c98:	a446983a 	sll	r3,r20,r17
   25c9c:	90806217 	ldw	r2,392(r18)
   25ca0:	95c00117 	ldw	r23,4(r18)
   25ca4:	1884703a 	and	r2,r3,r2
   25ca8:	1000081e 	bne	r2,zero,25ccc <__call_exitprocs+0xf0>
   25cac:	303ee83a 	callr	r6
   25cb0:	90c00117 	ldw	r3,4(r18)
   25cb4:	98805217 	ldw	r2,328(r19)
   25cb8:	1dc0011e 	bne	r3,r23,25cc0 <__call_exitprocs+0xe4>
   25cbc:	14bfe126 	beq	r2,r18,25c44 <__call_exitprocs+0x68>
   25cc0:	103fe426 	beq	r2,zero,25c54 <__call_exitprocs+0x78>
   25cc4:	1025883a 	mov	r18,r2
   25cc8:	003fd506 	br	25c20 <__call_exitprocs+0x44>
   25ccc:	90806317 	ldw	r2,396(r18)
   25cd0:	81002017 	ldw	r4,128(r16)
   25cd4:	1886703a 	and	r3,r3,r2
   25cd8:	1800061e 	bne	r3,zero,25cf4 <__call_exitprocs+0x118>
   25cdc:	200b883a 	mov	r5,r4
   25ce0:	a809883a 	mov	r4,r21
   25ce4:	303ee83a 	callr	r6
   25ce8:	003ff106 	br	25cb0 <__call_exitprocs+0xd4>
   25cec:	94400115 	stw	r17,4(r18)
   25cf0:	003fe806 	br	25c94 <__call_exitprocs+0xb8>
   25cf4:	303ee83a 	callr	r6
   25cf8:	003fed06 	br	25cb0 <__call_exitprocs+0xd4>

00025cfc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25cfc:	defffd04 	addi	sp,sp,-12
   25d00:	df000215 	stw	fp,8(sp)
   25d04:	df000204 	addi	fp,sp,8
   25d08:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25d0c:	0001883a 	nop
   25d10:	e0bffe17 	ldw	r2,-8(fp)
   25d14:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25d18:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25d1c:	10000226 	beq	r2,zero,25d28 <_exit+0x2c>
    ALT_SIM_FAIL();
   25d20:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   25d24:	00000106 	br	25d2c <_exit+0x30>
    ALT_SIM_PASS();
   25d28:	002af0b0 	cmpltui	zero,zero,43970
}
   25d2c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25d30:	003fff06 	br	25d30 <_exit+0x34>
